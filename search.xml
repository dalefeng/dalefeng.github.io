<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux 使用 VirtualBox NAT + Host-Only 双网卡</title>
    <url>/posts/2045486310.html</url>
    <content><![CDATA[<blockquote>
<p>中文文档 ： <a href="https://wiki.archlinux.org/title/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<h1 id="安装-Virtualbox"><a href="#安装-Virtualbox" class="headerlink" title="安装 Virtualbox"></a>安装 Virtualbox</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S virtualbox</span><br></pre></td></tr></tbody></table></figure>

<p>注意：根据提示选择对应的 <code>virtualbox-host-modules</code> 软件包</p>
<h1 id="加载-VirtualBox-内核模块"><a href="#加载-VirtualBox-内核模块" class="headerlink" title="加载 VirtualBox 内核模块"></a>加载 VirtualBox 内核模块</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo modprobe vboxdrv vboxnetadp vboxnetflt</span><br></pre></td></tr></tbody></table></figure>
<p><code>vboxnetadp</code> 和 <code>vboxnetflt</code>：这两个模块在使用桥接网络和 host-only 网络功能时，都是需要的。具体来说，vboxnetadp 模块用于在 VirtualBox 全局配置里为主体机创建虚拟网卡；vboxnetflt 模块会在使用了该功能的客体机启动时起作用。</p>
<h1 id="VirtualBox支持的多种网络"><a href="#VirtualBox支持的多种网络" class="headerlink" title="VirtualBox支持的多种网络"></a>VirtualBox 支持的多种网络</h1><p>网络地址转换（NAT）：</p>
<p>1、虚拟机可以上网。</p>
<p>2、默认情况下，主机无法连接虚拟机。</p>
<p>3、虚拟机与虚拟机不能相互连接，使用此网络模式的虚拟机，VirtualBox 会给每个虚拟机单独创建一个 NAT 设备，虚拟机与虚拟机是无法相互连接的。</p>
<p>桥接网卡：</p>
<p>1、虚拟机可以上网。</p>
<p>2、主机能连接虚拟机，虚拟机也可以连接主机。</p>
<p>3、虚拟机与虚拟机能相互连接。</p>
<p>仅主机（Host-Only）网络：</p>
<p>1、虚拟机不能上网。</p>
<p>2、主机能连接虚拟机，虚拟机也可以连接主机。</p>
<p>3、虚拟机与虚拟机能相互连接。</p>
<p>NAT 网络：</p>
<p>1、虚拟机可以上网。</p>
<p>2、默认情况下，主机无法连接虚拟机。</p>
<p>3、虚拟机与虚拟机能相互连接；</p>
<p>“网络地址转换（NAT）” 与 “NAT 网络” 最大的不同点在于：“NAT 网络” 的虚拟机可以使用同一个全局 NAT 设备，所以虚拟机与虚拟机能相互连接；而使用 “网络地址转换（NAT）” 网络，VirtualBox 给每个虚拟机单独创建一个 NAT 设备，所以虚拟机与虚拟机无法相互连接。</p>
<p>通常可以使用 “桥接网卡” 这种网络，并将网卡配置为静态 IP。主机与虚拟机都在一个网段，实现主机与虚拟机相互连接、虚拟机与虚拟机相互连接，虚拟机也能上网。</p>
<p>但是公司的网络通常不允许将电脑配置为静态 IP，可使用 “NAT 网络”+“仅主机（Host-Only）网络” 双网卡模式解决虚拟机使用静态 IP、上网、相互连接的问题。</p>
<p>“NAT 网络” 的作用是：实现虚拟机上网，实现虚拟机与虚拟机相互连接，并且支持将网卡配置为静态 IP（用于虚拟机之间连接，虚拟机重启后 IP 地址不变）。</p>
<p>“仅主机（Host-Only）网络” 的作用是：实现主机与虚拟机相互连接，也支持将网卡配置为静态 IP，虚拟机重启后 IP 地址不变。</p>
<h1 id="创建仅主机网卡"><a href="#创建仅主机网卡" class="headerlink" title="创建仅主机网卡"></a>创建仅主机网卡</h1><p>VirtualBox 6.1.28 对仅主机接口设置的地址施加了额外的控制，如果不是白名单修改则可能会出显以下错误</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Callee RC: </span><br><span class="line">E_ACCESSDENIED (0x80070005)</span><br></pre></td></tr></tbody></table></figure>

<p>如果是 Linux 用户且则需要添加 IP 白名单</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/vbox/networks.conf                                                                                                                 </span><br><span class="line">* 192.0.0.0/8</span><br><span class="line">* 172.0.0.0/8</span><br><span class="line">* 10.0.0.0/8</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>

<p>点击 “管理” —&gt; “主机网络管理器” </p>
<p><strong>修改 网卡 和 DHCP 服务器地址</strong></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220701160245487.png" alt="image-20220701160245487"></p>
<p>修改成功后在宿住机即可 <code>ip a</code> 查看网卡信息（必须有 IP 才算成功）</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220701160432046.png" alt="image-20220701160432046"></p>
<h1 id="创建-NAT-网络"><a href="#创建-NAT-网络" class="headerlink" title="创建 NAT 网络"></a>创建 NAT 网络</h1><p>点击 “管理” —&gt; “全局设定” —&gt; “网络” —&gt; “添加新 NAT 网络” 。这一步是新建一个全局的 NAT 设备，所有的虚拟机都可以使用此 NAT 设备。新 NAT 网络 CIDR 默认是 10.0.2.0/24。</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220701160934702.png" alt="image-20220701160934702"></p>
<h1 id="虚拟机配置双网卡"><a href="#虚拟机配置双网卡" class="headerlink" title="虚拟机配置双网卡"></a>虚拟机配置双网卡</h1><p>网卡一：NAT 网络</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220701161045781.png" alt="image-20220701161045781"></p>
<p>网卡二：仅主机（Host-Only）</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220701161124662.png" alt="image-20220701161124662"></p>
<h1 id="修改虚拟机IP"><a href="#修改虚拟机IP" class="headerlink" title="修改虚拟机IP"></a>修改虚拟机 IP</h1><p>enp0s3：为 NAT 网络</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TYPE="Ethernet"</span><br><span class="line">PROXY_METHOD="none"</span><br><span class="line">BROWSER_ONLY="no"</span><br><span class="line">BOOTPROTO="static"</span><br><span class="line">DEFROUTE="yes"</span><br><span class="line">IPV4_FAILURE_FATAL="no"</span><br><span class="line">NAME="enp0s3"</span><br><span class="line">DEVICE="enp0s3"</span><br><span class="line">ONBOOT="yes"</span><br><span class="line"> </span><br><span class="line"># 第1步新建的NatNetwork01网络CIDR是10.0.2.0/24，所以网关填写10.0.2.1，子网掩码是255.255.255.0</span><br><span class="line">GATEWAY=10.0.2.1</span><br><span class="line">IPADDR=10.0.2.100</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p>enp0s8：为仅主机网卡</p>
<p>修改为静态 ip</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s8</span><br><span class="line"></span><br><span class="line">TYPE="Ethernet"</span><br><span class="line">PROXY_METHOD="none"</span><br><span class="line">BROWSER_ONLY="no"</span><br><span class="line">BOOTPROTO="static"</span><br><span class="line">DEFROUTE="yes"</span><br><span class="line">IPV4_FAILURE_FATAL="no"</span><br><span class="line">NAME="enp0s8"</span><br><span class="line">DEVICE="enp0s8"</span><br><span class="line">ONBOOT="yes"</span><br><span class="line"></span><br><span class="line"># 网关与子网掩码与 vboxnet0 相同</span><br><span class="line">GATEWAY=192.168.100.1</span><br><span class="line">IPADDR=192.168.100.66</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>重启网卡</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></tbody></table></figure>



<p><img src="https://minio.kl.do/picture/images/typora/image-20220701162217726.png" alt="image-20220701162217726"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux 使用 KVM 和 virt-manager</title>
    <url>/posts/902109.html</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S qemu virt-manager</span><br></pre></td></tr></tbody></table></figure>

<p>网络相关依赖包</p>
<blockquote>
<p>没有下列软件包初始化 NAT 网络可能会出现异常 libvirt:Failed to initialize a valid firewall backend</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S ebtables iptables dnsmasq</span><br></pre></td></tr></tbody></table></figure>



<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li><p>配置 libvirtd 用户组</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/libvirt/libvirtd.conf</span><br></pre></td></tr></tbody></table></figure>
<p><strong>取消注释并修改以下两行</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 用户组</span><br><span class="line">unix_sock_group = "wheel"</span><br><span class="line"></span><br><span class="line"># unix_sock_rw_perms = "0770"</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>添加当前用户到用户组中<br>PS：如果用户已配置用户组则不需要进行此步骤</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo usermod -a -G wheel $(whoami)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>设置  libvirtd 开机自启</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl start libvirtd</span><br><span class="line">sudo systemctl enable libvirtd</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>可以通过命令行 （virsh） 或通过 virt-manager 图形界面管理 libvirt 系统<br><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211210124655768-1402877812.png" alt="image"></p>
</blockquote>
<p><strong>建议在 Home 目录下创建一个文件系统目录，在此目录手动创建硬盘。自动创建可能会出现不可预知的权限问题</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211210135157452-1020889102.png" alt="image"></p>
<h1 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h1><h2 id="启动网卡"><a href="#启动网卡" class="headerlink" title="启动网卡"></a>启动网卡</h2><ol>
<li>首先建立 default 网卡文件 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo cat /etc/libvirt/qemu/networks/default.xml                                                                                                1 ✘  19:22:18  </span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">WARNING: THIS IS AN AUTO-GENERATED FILE. CHANGES TO IT ARE LIKELY TO BE</span><br><span class="line">OVERWRITTEN AND LOST. Changes to this xml configuration should be made using:</span><br><span class="line">  virsh net-edit default</span><br><span class="line">or other application using the libvirt API.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;network&gt;</span><br><span class="line">  &lt;name&gt;default&lt;/name&gt;</span><br><span class="line">  &lt;uuid&gt;7ef2500e-b19a-4e8a-9322-467bb7e50f43&lt;/uuid&gt;</span><br><span class="line">  &lt;forward mode='nat'/&gt;</span><br><span class="line">  &lt;bridge name='virbr0' stp='on' delay='0'/&gt;</span><br><span class="line">  &lt;mac address='52:54:00:a4:29:99'/&gt;</span><br><span class="line">  &lt;ip address='192.168.122.1' netmask='255.255.255.0'&gt;</span><br><span class="line">    &lt;dhcp&gt;</span><br><span class="line">      &lt;range start='192.168.122.2' end='192.168.122.254'/&gt;</span><br><span class="line">    &lt;/dhcp&gt;</span><br><span class="line">  &lt;/ip&gt;</span><br><span class="line">&lt;/network&gt;</span><br></pre></td></tr></tbody></table></figure></li>
<li>定义网卡 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo virsh net-define /etc/libvirt/qemu/networks/default.xml</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>启动网卡 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">virsh net-start default</span><br></pre></td></tr></tbody></table></figure>
4、查看网卡 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></tbody></table></figure>
<img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211213211605201-1675934469.png"></li>
</ol>
<h2 id="关闭DHCP服务器"><a href="#关闭DHCP服务器" class="headerlink" title="关闭DHCP服务器"></a>关闭 DHCP 服务器</h2><blockquote>
<p>如果有这个需求可按以下方式关闭</p>
</blockquote>
<ol>
<li><p>停止 dnsmasq DHCP 和 DNS 服务器</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl stop dnsmasq</span><br><span class="line">sudo systemctl enable dnsmasq</span><br></pre></td></tr></tbody></table></figure>
<p>2. 查看网卡</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo virsh net-list    </span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211213211346471-1548257738.png"></p>
</li>
<li><p>已经分配的 dhcp 租约条目</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo virsh net-dhcp-leases default                                             </span><br><span class="line"> Expiry Time   MAC 地址   Protocol   IP address   Hostname   Client ID or DUID</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">2021-12-13 16:09:57  52:54:00:c6:51:45  ipv4      192.168.122.23/24         registry        01:52:54:00:c6:51:45</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>直接删除 dhcp 租约条目</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/libvirt/dnsmasq/virbr0.*</span><br><span class="line">sudo virsh net-dhcp-leases default</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211213211525833-950041815.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux zsh 终端美化 powerlevel10k 配置</title>
    <url>/posts/3009125945.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Arch Linux + KDE Plasma</p>
<h1 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装 zsh</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S zsh</span><br></pre></td></tr></tbody></table></figure>
<h2 id="更改默认终端"><a href="#更改默认终端" class="headerlink" title="更改默认终端"></a>更改默认终端</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></tbody></table></figure>
<h1 id="安装oh-my-zsh-git"><a href="#安装oh-my-zsh-git" class="headerlink" title="安装oh-my-zsh-git"></a>安装 oh-my-zsh-git</h1><blockquote>
<p>archlinuxcn 源有打好的包，或者使用 AUR 安装。</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S oh-my-zsh-git</span><br></pre></td></tr></tbody></table></figure>
<h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cp /usr/share/oh-my-zsh/zshrc ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这时候打开终端软件，应该就会默认进入 zsh 了</p>
</blockquote>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="autojump-跳转目录"><a href="#autojump-跳转目录" class="headerlink" title="autojump 跳转目录"></a>autojump 跳转目录</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S autojump</span><br></pre></td></tr></tbody></table></figure>
<h2 id="命令高亮现和自动建议补全"><a href="#命令高亮现和自动建议补全" class="headerlink" title="命令高亮现和自动建议补全"></a>命令高亮现和自动建议补全</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S zsh-syntax-highlighting zsh-autosuggestions</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这两个是 zsh 插件，使用上面的方式配置是不行的，因为 oh-my-zsh 找不到这两个插件（会报 plugin not found）。为此我们要进行一下特殊处理，创建这两个插件的符号链接到 oh-my-zsh 的自定义插件目录</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo ln -s /usr/share/zsh/plugins/zsh-syntax-highlighting /usr/share/oh-my-zsh/custom/plugins/</span><br><span class="line">sudo ln -s /usr/share/zsh/plugins/zsh-autosuggestions /usr/share/oh-my-zsh/custom/plugins/</span><br></pre></td></tr></tbody></table></figure>

<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>同样是打开.zshrc 文件，找到 plugins=(git)，在这里增加自己想要的插件即可，多个插件名称之间使用空格或者换行分开（不能使用逗号）。<br><code>vim ~/.zshrc</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">	sudo</span><br><span class="line">	git</span><br><span class="line">	autojump</span><br><span class="line">	zsh-syntax-highlighting</span><br><span class="line">	zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">source .zshrc</span><br></pre></td></tr></tbody></table></figure>

<h1 id="安装powerlevel10k样式"><a href="#安装powerlevel10k样式" class="headerlink" title="安装powerlevel10k样式"></a>安装 powerlevel10k 样式</h1><h2 id="安装Nerd-Fonts字体"><a href="#安装Nerd-Fonts字体" class="headerlink" title="安装Nerd Fonts字体"></a>安装 Nerd Fonts 字体</h2><h3 id="下载字体"><a href="#下载字体" class="headerlink" title="下载字体"></a>下载字体</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p ~/.local/share/fonts</span><br><span class="line">cd ~/.local/share/fonts &amp;&amp; curl -fLo "Droid Sans Mono for Powerline Nerd Font Complete.otf" https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf</span><br></pre></td></tr></tbody></table></figure>

<h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fc-list | grep -i droid</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211212195754819-443504235.png" alt="image"></p>
<h3 id="设置终端字体"><a href="#设置终端字体" class="headerlink" title="设置终端字体"></a>设置终端字体</h3><p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210411225528194-1045968221.png" alt="image"></p>
<h2 id="下载powerlevel10k"><a href="#下载powerlevel10k" class="headerlink" title="下载powerlevel10k"></a>下载 powerlevel10k</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k</span><br></pre></td></tr></tbody></table></figure>
<h2 id="修改zsh主题"><a href="#修改zsh主题" class="headerlink" title="修改zsh主题"></a>修改 zsh 主题</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ZSH_THEME="powerlevel10k/powerlevel10k"</span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<p><strong>重启终端即可进入配置 p10k</strong><br>**<code>p10k configure</code> 以直接从终端访问内置配置向导	**</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210411230642493-1277999922.png" alt="image"></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="配置成功后只显示一行"><a href="#配置成功后只显示一行" class="headerlink" title="配置成功后只显示一行"></a>配置成功后只显示一行</h2><p><strong>Instant Prompt Mode 选择 off</strong></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux Timeshift 系统备份与还原</title>
    <url>/posts/826509507.html</url>
    <content><![CDATA[<h1 id="安装-timeshif"><a href="#安装-timeshif" class="headerlink" title="安装 timeshif"></a>安装 timeshif</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -s timeshif</span><br></pre></td></tr></tbody></table></figure>
<h1 id="备份设置"><a href="#备份设置" class="headerlink" title="备份设置"></a>备份设置</h1><h2 id="选择快照类型"><a href="#选择快照类型" class="headerlink" title="选择快照类型"></a>选择快照类型</h2><blockquote>
<p>此处选择【RSYNC】</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210524220736339-661009589.png" alt="image"></p>
<h2 id="选择储存位置"><a href="#选择储存位置" class="headerlink" title="选择储存位置"></a>选择储存位置</h2><blockquote>
<p>每台设备安装分区不一样，大家安装实际情况选择，一般选择比较大的空间存储，并且最好是机械，这样不容易损坏</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210524221142456-179728810.png" alt="image"></p>
<h2 id="设置计划备份"><a href="#设置计划备份" class="headerlink" title="设置计划备份"></a>设置计划备份</h2><blockquote>
<p>可按自己硬盘大小设置合适的间隔时间</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210524221437571-517262813.png" alt="image"></p>
<h1 id="系统恢复"><a href="#系统恢复" class="headerlink" title="系统恢复"></a>系统恢复</h1><h2 id="可视化恢复-可进入系统"><a href="#可视化恢复-可进入系统" class="headerlink" title="可视化恢复(可进入系统)"></a>可视化恢复 (可进入系统)</h2><blockquote>
<p>如果此时还能够进入系统，直接打开 Timeshift 软件进行还原</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210524220919372-1849238983.png" alt="image"></p>
<h2 id="命令行恢复-系统崩溃-可进入命令行"><a href="#命令行恢复-系统崩溃-可进入命令行" class="headerlink" title="命令行恢复(系统崩溃,可进入命令行)"></a>命令行恢复 (系统崩溃，可进入命令行)</h2><blockquote>
<p>一般系统崩溃后不能进入桌面，但是能够进入登录界面，现象就是在登录界面输入密码后不会进入桌面，那么就要通过命令行的方式进行还原。</p>
</blockquote>
<ol>
<li>通过 Ctrl+Alt+F1（一般是 F1-F6 都可）进入 tty 终端</li>
<li>输入用户和密码登录</li>
<li>查看可还原节点列表 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo timeshift --list</span><br></pre></td></tr></tbody></table></figure>
结果为：<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo timeshift --list                                               1 ✘  22:19:03   </span><br><span class="line"></span><br><span class="line">/dev/nvme0n1p6 is mounted at: /run/timeshift/backup, options: rw,relatime</span><br><span class="line"></span><br><span class="line">Device : /dev/nvme0n1p6</span><br><span class="line">UUID   : c16a9a25-22e4-4438-98ce-b3210ceaf18a</span><br><span class="line">Path   : /run/timeshift/backup</span><br><span class="line">Mode   : RSYNC</span><br><span class="line">Status : OK</span><br><span class="line">1 snapshots, 32.7 GB free</span><br><span class="line"></span><br><span class="line">Num     Name                 Tags  Description  </span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">0    &gt;  2021-05-22_11-00-01  W </span><br><span class="line">1    &gt;  2021-05-23_11-00-01  W </span><br></pre></td></tr></tbody></table></figure></li>
<li>选择节点还原数据 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo timeshift --restore --snapshot '2019-07-16_16-35-42' --skip-grub</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>在输出的内容中依次输入【Enter】键和【y】键。<br>–skip-grub 选项为跳过 grub 安装，一般来说 grub 不需要重新安装，除非 bios 启动无法找到正确的 grub 启动项，才需要安装。</p>
</blockquote>
</li>
</ol>
<h2 id="ArchLinux-Live-CD恢复-无法进入系统"><a href="#ArchLinux-Live-CD恢复-无法进入系统" class="headerlink" title="ArchLinux Live CD恢复(无法进入系统)"></a>ArchLinux Live CD 恢复 (无法进入系统)</h2><blockquote>
<p>无法进入系统，通过 U 盘启动系统</p>
</blockquote>
<ol>
<li>制作 Archlinux 启动盘</li>
<li>进入 live 系统</li>
<li>安装 timeshift<br>4. 安装上面《命令行恢复 (系统崩溃，可进入命令行)》章节进行恢复</li>
</ol>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="恢复完成后桌面无法加载程序快捷方式"><a href="#恢复完成后桌面无法加载程序快捷方式" class="headerlink" title="恢复完成后桌面无法加载程序快捷方式"></a>恢复完成后桌面无法加载程序快捷方式</h2><blockquote>
<p>执行更新系统即可恢复</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -Syuu</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java RSA 非对称加密算法工具类和 Jwt Toekn 工具类</title>
    <url>/posts/1576613567.html</url>
    <content><![CDATA[<p>这里提供一个 RSA 加密算法的工具类，其中包含生成密钥、加密、解密、加签、验签等 RSA 常用的方法，可以直接使用</p>
<p>引入 Maven 依赖，(如果不引入则需要修改 base64 加密、解密方法为 <code>java.ultils.base64</code>)</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.19.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h1 id="RSA工具类"><a href="#RSA工具类" class="headerlink" title="RSA工具类"></a>RSA 工具类</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.likfees.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> RSA非对称加密算法工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Likfees</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/07/04 20:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSAUtils</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA最大加密明文大小 2048/8-11</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ENCRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">245</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RSA最大解密密文大小 2048/8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_DECRYPT_BLOCK</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_RSA</span> <span class="operator">=</span> <span class="string">"RSA"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义公钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_RSA_PUBLICKEY</span> <span class="operator">=</span> <span class="string">"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhbMJG9i6O0T1hQ8oCoThMAg/0mlcerjYn+wMdZudoDCeEbxKYebs+WoNvBmV26A/co9yJ2+aUIf60kkJ6YwDh9pXSk2vgm7x0TAZ9HzRhpk6td4JO4HM9QpPaQG2Z3Tw8DnhNk7yGADp+weLqgULDDlUI7lm1s1G9OSY+ZK2TwjKPSC4j1CnjD6kvSW1qVGB0GhkreX877Rop+KbOmVE+JtQQgc+DcOgyMjGtSvDGrwBsI569wrywlOeFMLqVDlVLi3ugWDSEn3EHz63Nj442VSfR6ukxtifIwmogUI4VplXQoO4Am6kKH50tkggqVBNFGh0s5qavpig0XYkn42+6QIDAQAB"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_RSA_PRIVATEKEY</span> <span class="operator">=</span> <span class="string">"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCFswkb2Lo7RPWFDygKhOEwCD/SaVx6uNif7Ax1m52gMJ4RvEph5uz5ag28GZXboD9yj3Inb5pQh/rSSQnpjAOH2ldKTa+CbvHRMBn0fNGGmTq13gk7gcz1Ck9pAbZndPDwOeE2TvIYAOn7B4uqBQsMOVQjuWbWzUb05Jj5krZPCMo9ILiPUKeMPqS9JbWpUYHQaGSt5fzvtGin4ps6ZUT4m1BCBz4Nw6DIyMa1K8MavAGwjnr3CvLCU54UwupUOVUuLe6BYNISfcQfPrc2PjjZVJ9Hq6TG2J8jCaiBQjhWmVdCg7gCbqQofnS2SCCpUE0UaHSzmpq+mKDRdiSfjb7pAgMBAAECggEAR3vSAvF9oPLd0qan4ffp7qR6eyWaLINoTxkGEFuDi4JzAUiK/I1bZn8tmMSVOzgStE292xfwid4qXQRwKE6UFK7IvRGMJVDsOcxeFDooTK7glRyCEy7zRpCcpKglvmrn54kKwN600eCrOWxvYBgSMBb2xaL7OR3IMmeG4uluUBK8u8phRfXbt1CaQvzfqZqZbspE/XX23Lgnxq/7PV2ME1ukOHAzQm8XdSQosLTX2WhbGBCG8xG1Ia9qZ5R63Y3Gk8gnXxVEpzcbtF7sxU/hDwdpfb7wiIQTyoBcL/XIr9I42p4TvizAtr4spzzkIMprKiEAP1IozBCD3YWvPMUJgQKBgQDGgSoosujtJ2OicvtJrO67YW6ecMc9L2VBY/qAxrivC+Ups/rS2PPchNy9abv8JGnCpa1MdOUudpaSv9g47BES5NwZ38bGHj+U7Wg9VIRQ/G8dxWelQrVgALLJ9mjDmJrenUmfwBaYqej3fvYZMA/hWT0CUhBWKVn1X0nPzXlYRwKBgQCsbKgHrQK39bccVMBDBnsRLXzJOLcIFu+AHShhqQfttMeDOQiXuVpy4CAv84y0Y3/rV7Yr6RGZ1pOTOr2NvTGUka/ZfOvYi8UPULzAOLh02KBb1LtcRrvwPYuoLxKN81XYZ85yS7EggpEFtbsm0YSZozv4Vx5uccHxevzHXBn3TwKBgQCj83DPtp09qufW96LnAicXquyDfmCA/5FhBeOT0w4cvfVjkVycI0afHzl2VEtIgQa9Frvgxze3PYk14bADq66abV4BHNt/LOKU7dTHuvOiNCzOaQom68cEaO9CcfureXKIZV62zB+drdBWAo3e1dx34o3KSd9mWrcLO82qDWqo5wKBgGxZAuV/5Dtw3hWhdAcqJV9P9CAF0Y31y533tI5Zxy+p780Xo7yjrqCNEezP4FTiSVm7ji/djz/aRHW57a8JegRf396Mzy8N9VCAbXtkqRRTo8DQ1sNPd32pTv7qRYCJriIEaQgNZEqHgVXTMr1b3zUkC+Ur6WWBeluh6wHjcDWlAoGAfduQDd31wN1r8MaTv0Uj1k4YXWPQdfKlmATsD0iT1oMg2bfPVwPhs+UI5hwhu2KD/zjzS7qGyfXiTXLh11pJrlFV9D5OVsxwOKwCGe1mUuwmBtWTTLxw1Irlz91Tu3sgioSZ9MeuUHI1psAttcnxGmOq6taEXCFkr20q+9SH3fk="</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义签名算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">KEY_RSA_SIGNATURE</span> <span class="operator">=</span> <span class="string">"sha256withRSA"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成公私密钥对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title function_">init</span><span class="params">()</span> {</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="type">KeyPairGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(KEY_RSA);</span><br><span class="line">            <span class="comment">//设置密钥对的bit数，越大越安全，但速度减慢，一般使用512或1024、2048</span></span><br><span class="line">            generator.initialize(<span class="number">2048</span>);</span><br><span class="line">            <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> generator.generateKeyPair();</span><br><span class="line">            <span class="comment">// 获取公钥</span></span><br><span class="line">            <span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">            <span class="comment">// 获取私钥</span></span><br><span class="line">            <span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">            <span class="comment">// 将密钥对封装为Map</span></span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">            map.put(KEY_RSA_PUBLICKEY, publicKey);</span><br><span class="line">            map.put(KEY_RSA_PRIVATEKEY, privateKey);</span><br><span class="line">        } <span class="keyword">catch</span> (NoSuch算法Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RSAPublicKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title function_">getPublicKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decodeBase64(KEY_RSA_PUBLICKEY);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">        <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> factory.generatePublic(<span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decoded));</span><br><span class="line">        <span class="keyword">return</span> (RSAPublicKey) publicKey;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 RSAPrivateKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decodeBase64(KEY_RSA_PRIVATEKEY);</span><br><span class="line">        <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> factory.generatePrivate(<span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decoded));</span><br><span class="line">        <span class="keyword">return</span> (RSAPrivateKey) privateKey;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥加密  如果大于245则分段加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptByPublic</span><span class="params">(String encryptingStr, String publicKeyStr)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 将公钥由字符串转为UTF-8格式的字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] publicKeyBytes = Base64.decodeBase64(publicKeyStr);</span><br><span class="line">            <span class="comment">// 获得公钥</span></span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(publicKeyBytes);</span><br><span class="line">            <span class="comment">// 取得待加密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptingStr.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            KeyFactory factory;</span><br><span class="line">            factory = KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> factory.generatePublic(keySpec);</span><br><span class="line">            <span class="comment">// 对数据加密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.get算法());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                }</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回加密后由Base64编码的加密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(encryptedData));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥解密 如果大于256则分段解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptByPrivate</span><span class="params">(String encryptedStr, String privateKeyStr)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 对私钥解密</span></span><br><span class="line">            <span class="type">byte</span>[] privateKeyBytes = Base64.decodeBase64(privateKeyStr);</span><br><span class="line">            <span class="comment">// 获得私钥</span></span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(privateKeyBytes);</span><br><span class="line">            <span class="comment">// 获得待解密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = Base64.decodeBase64(encryptedStr);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> factory.generatePrivate(keySpec);</span><br><span class="line">            <span class="comment">// 对数据解密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.get算法());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                }</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回UTF-8编码的解密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedData, StandardCharsets.UTF_8);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密  如果大于245则分段加密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encryptByPrivate</span><span class="params">(String encryptingStr, String privateKeyStr)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="type">byte</span>[] privateKeyBytes = Base64.decodeBase64(privateKeyStr);</span><br><span class="line">            <span class="comment">// 获得私钥</span></span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(privateKeyBytes);</span><br><span class="line">            <span class="comment">// 取得待加密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptingStr.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> factory.generatePrivate(keySpec);</span><br><span class="line">            <span class="comment">// 对数据加密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.get算法());</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段加密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_ENCRYPT_BLOCK) {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_ENCRYPT_BLOCK);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                }</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_ENCRYPT_BLOCK;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">byte</span>[] encryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回加密后由Base64编码的加密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(encryptedData));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解密 如果大于256则分段解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decryptByPublic</span><span class="params">(String encryptedStr, String publicKeyStr)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 对公钥解密</span></span><br><span class="line">            <span class="type">byte</span>[] publicKeyBytes = Base64.decodeBase64(publicKeyStr);</span><br><span class="line">            <span class="comment">// 取得公钥</span></span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(publicKeyBytes);</span><br><span class="line">            <span class="comment">// 取得待加密数据</span></span><br><span class="line">            <span class="type">byte</span>[] data = Base64.decodeBase64(encryptedStr);</span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> factory.generatePublic(keySpec);</span><br><span class="line">            <span class="comment">// 对数据解密</span></span><br><span class="line">            <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(factory.get算法());</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">            <span class="type">int</span> <span class="variable">inputLen</span> <span class="operator">=</span> data.length;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">offSet</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">byte</span>[] cache;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 对数据分段解密</span></span><br><span class="line">            <span class="keyword">while</span> (inputLen - offSet &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (inputLen - offSet &gt; MAX_DECRYPT_BLOCK) {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, MAX_DECRYPT_BLOCK);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    cache = cipher.doFinal(data, offSet, inputLen - offSet);</span><br><span class="line">                }</span><br><span class="line">                out.write(cache, <span class="number">0</span>, cache.length);</span><br><span class="line">                i++;</span><br><span class="line">                offSet = i * MAX_DECRYPT_BLOCK;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">byte</span>[] decryptedData = out.toByteArray();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">// 返回UTF-8编码的解密信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(decryptedData, StandardCharsets.UTF_8);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用私钥对加密数据进行签名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sign</span><span class="params">(String encryptedStr, String privateKey)</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//将私钥加密数据字符串转换为字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptedStr.getBytes();</span><br><span class="line">            <span class="comment">// 解密由base64编码的私钥</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = Base64.decodeBase64(privateKey);</span><br><span class="line">            <span class="comment">// 构造PKCS8EncodedKeySpec对象</span></span><br><span class="line">            <span class="type">PKCS8EncodedKeySpec</span> <span class="variable">pkcs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(bytes);</span><br><span class="line">            <span class="comment">// 指定的加密算法</span></span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="comment">// 取私钥对象</span></span><br><span class="line">            <span class="type">PrivateKey</span> <span class="variable">key</span> <span class="operator">=</span> factory.generatePrivate(pkcs);</span><br><span class="line">            <span class="comment">// 用私钥对信息生成数字签名</span></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(KEY_RSA_SIGNATURE);</span><br><span class="line">            signature.initSign(key);</span><br><span class="line">            signature.update(data);</span><br><span class="line">            str = <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(signature.sign()));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验数字签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 校验成功返回true，失败返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String encryptedStr, String publicKey, String sign)</span> {</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//将私钥加密数据字符串转换为字节数组</span></span><br><span class="line">            <span class="type">byte</span>[] data = encryptedStr.getBytes();</span><br><span class="line">            <span class="comment">// 解密由base64编码的公钥</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = Base64.decodeBase64(publicKey);</span><br><span class="line">            <span class="comment">// 构造X509EncodedKeySpec对象</span></span><br><span class="line">            <span class="type">X509EncodedKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(bytes);</span><br><span class="line">            <span class="comment">// 指定的加密算法</span></span><br><span class="line">            <span class="type">KeyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> KeyFactory.getInstance(KEY_RSA);</span><br><span class="line">            <span class="comment">// 取公钥对象</span></span><br><span class="line">            <span class="type">PublicKey</span> <span class="variable">key</span> <span class="operator">=</span> factory.generatePublic(keySpec);</span><br><span class="line">            <span class="comment">// 用公钥验证数字签名</span></span><br><span class="line">            <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> Signature.getInstance(KEY_RSA_SIGNATURE);</span><br><span class="line">            signature.initVerify(key);</span><br><span class="line">            signature.update(data);</span><br><span class="line">            flag = signature.verify(Base64.decodeBase64(sign));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 功能描述:格式化公私钥 C++格式</span></span><br><span class="line"><span class="comment">     * 公钥字符串开头要加上“-----BEGIN PUBLIC KEY-----\n”，结尾加上“\n-----END PUBLIC KEY-----\n”</span></span><br><span class="line"><span class="comment">     * 私钥字符串开头要加上“-----BEGIN RSA PRIVATE KEY-----\n”，结尾加上“\n-----END RSA PRIVATE KEY-----\n”</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str  要格式的字符串, flag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> flag true为公 false为私</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2020/3/18 16:40</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">formatStr</span><span class="params">(String str, <span class="type">boolean</span> flag)</span> {</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = sb.length(); i &lt; len; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">64</span> == <span class="number">0</span>) {</span><br><span class="line">                sb.insert(i, <span class="string">"\n"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"-----BEGIN PUBLIC KEY-----"</span>).append(sb).append(<span class="string">"\n-----END PUBLIC KEY-----\n"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">"-----BEGIN RSA PRIVATE KEY-----"</span>).append(sb).append(<span class="string">"\n-----END RSA PRIVATE KEY-----\n"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 生成 RSA 密钥</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;(<span class="number">2</span>);</span><br><span class="line">        map = RSAUtils.init();</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用密钥进行认证</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">publicKey</span> <span class="operator">=</span> RSAUtils.KEY_RSA_PUBLICKEY;</span><br><span class="line">        <span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> RSAUtils.KEY_RSA_PRIVATEKEY;</span><br><span class="line">        System.out.println(<span class="string">"publicKey = "</span> + publicKey);</span><br><span class="line">        System.out.println(<span class="string">"privateKey = "</span> + privateKey);</span><br><span class="line">        System.out.println(<span class="string">"formatStr(publicKey,false) = "</span> + formatStr(publicKey, <span class="literal">true</span>));</span><br><span class="line">        System.out.println(<span class="string">"formatStr(privateKey,false) = "</span> + formatStr(privateKey, <span class="literal">false</span>));</span><br><span class="line">        <span class="comment">//由前四行代码获得公、私密钥</span></span><br><span class="line"><span class="comment">//        publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjVgHojy7oZ1Gl/iT9CXgvzlqPyV5wxvSRW7f6qDQh1FreYVTIbyVOees9LDbyFyocLCx6Cz3E4csHJvjwIem6SuZpIpmeJGS5bo04JVK2JwdqbFoIXd1Q5bGsA17nUNlnSR4h3ODM8OCKsC0Qpt1KSvN0WB2JUGBbUFwiPxrwEMLeYntz4cABBA/KYt5Ac9HBk5TDRDpFVlOM43t0B2219GxQOxm1x8fFjwzKV06nwYbmIuqoKqQVlym3FYrYiOdd0/iXXxp4Whi0Hdo7XyfaQhoCCd3FNnFP8Ng0HDAW99HxEaP9eIuC4wCV16o8jsUzm7V/yhTF1NlIPlTQW35hQIDAQAB";</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">"1 InnoDB 支持表锁和行锁，使用索引作为检索条件修改数据时采用行锁，否则采用表锁。\n"</span> + <span class="string">"2 InnoDB 自动给修改操作加锁，给查询操作不自动加锁"</span> + <span class="string">"3 行锁可能因为未使用索引而升级为表锁，所以除了检查索引是否创建的同时，也需要通过explain执行计划查询索引是否被实际使用。, RSA!"</span>;</span><br><span class="line">        <span class="comment">// 公钥加密，私钥解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enStr1</span> <span class="operator">=</span> RSAUtils.encryptByPublic(str, publicKey);</span><br><span class="line">        System.out.println(<span class="string">"公钥加密后："</span> + enStr1);</span><br><span class="line">        <span class="type">String</span> <span class="variable">deStr1</span> <span class="operator">=</span> RSAUtils.decryptByPrivate(enStr1, privateKey);</span><br><span class="line">        System.out.println(<span class="string">"私钥解密后："</span> + deStr1);</span><br><span class="line">        <span class="comment">// 私钥加密，公钥解密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">enStr2</span> <span class="operator">=</span> RSAUtils.encryptByPrivate(str, privateKey);</span><br><span class="line">        System.out.println(<span class="string">"私钥加密后："</span> + enStr2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">deStr2</span> <span class="operator">=</span> RSAUtils.decryptByPublic(enStr2, publicKey);</span><br><span class="line">        System.out.println(<span class="string">"公钥解密后："</span> + deStr2);</span><br><span class="line">        <span class="comment">// 产生签名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> sign(enStr2, privateKey);</span><br><span class="line">        System.out.println(<span class="string">"签名:"</span> + sign);</span><br><span class="line">        <span class="comment">// 验证签名</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">status</span> <span class="operator">=</span> verify(enStr2, publicKey, sign);</span><br><span class="line">        System.out.println(<span class="string">"状态:"</span> + status);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="RSA工具类2"><a href="#RSA工具类2" class="headerlink" title="RSA工具类2"></a>RSA 工具类 2</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.bilibili.service.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA加密</span></span><br><span class="line"><span class="comment"> * 非对称加密，有公钥和私钥之分，公钥用于数据加密，私钥用于数据解密。加密结果可逆</span></span><br><span class="line"><span class="comment"> * 公钥一般提供给外部进行使用，私钥需要放置在服务器端保证安全性。</span></span><br><span class="line"><span class="comment"> * 特点：加密安全性很高，但是加密速度较慢</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSAUtil</span> {</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCQk33iNdA8Iey7J6XrBsidqn6u8EDLWPHsfEUgLQ3qiTikhPKDTzZkpAfU/O0x6NvSKa7Dp0+uqWT3vnW1De0+3u8mCYdVfOdH94VG4xg5U5UrRJei8HhPiXuvKQ+6NBtebCCW5adZ4pBgOiU14cJLhVmm+dYiLo3IDD5LqrlomQIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">"MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJCTfeI10Dwh7LsnpesGyJ2qfq7wQMtY8ex8RSAtDeqJOKSE8oNPNmSkB9T87THo29IprsOnT66pZPe+dbUN7T7e7yYJh1V850f3hUbjGDlTlStEl6LweE+Je68pD7o0G15sIJblp1nikGA6JTXhwkuFWab51iIujcgMPkuquWiZAgMBAAECgYA1UT9mciQWWQh9yNRmhXzssFjB2TZ8B5RIe1fe0t7D9NEf0yvAgzDzEo8U3CX5dv/CVL7vxr8bEbt7phCwsa8hJiLEOr7hLZaJzXVTbvfqb91oCZGNkqDQ3NJfGBMVgUmltEYF2Bbk3U0NDyat+Gu54tRd2OH+adJYKsD0XYeDBQJBAN5FE8E04A4FA1q8mQbVTSVJDYIEJwOrdC0r3iZ7za5CyXGk+br8pFalRePFaksRGdN32+mYhDKVNrNHspAObVMCQQCmhBsD+xiWrmpnrzeIfCW1cX8qRC3/RMkq0ACw3l6YedNFdN2Tb5WsRHmcbCI9y8mfLHiG/X1R+zHZKG67EKjjAkAmvAkGSY2mQ89i160fWLq5/bIh71FRPWbgnF15fWfJr4/lgyeWI4MMKn80g2nTrSZACQpE+jRHkGNY+OywWCNLAkEAli5nvztkfeJpDYK2b16pE/B9ZL2BTs3XMcnQFbU5VAPsTKSOgz8MmwZXOIE+kMWP3wPY4McXlC0eVGFnHUh1SQJAeAl3RPk+XbZDMYfPkStRJwocG9Ap+88mwTgR1I7uPzZ1aM84/WsQskiVMXv2SZLmMWvYtnhIKosL6IACp2AcDA=="</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception{</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> RSAUtil.encrypt(<span class="string">"123456"</span>);</span><br><span class="line">		System.out.println(str);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getPublicKeyStr</span><span class="params">()</span>{</span><br><span class="line">		<span class="keyword">return</span> PUBLIC_KEY;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title function_">getPublicKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">		<span class="type">byte</span>[] decoded = Base64.decodeBase64(PUBLIC_KEY);</span><br><span class="line">		<span class="keyword">return</span> (RSAPublicKey) KeyFactory.getInstance(<span class="string">"RSA"</span>)</span><br><span class="line">				.generatePublic(<span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decoded));</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">		<span class="type">byte</span>[] decoded = Base64.decodeBase64(PRIVATE_KEY);</span><br><span class="line">		<span class="keyword">return</span> (RSAPrivateKey) KeyFactory.getInstance(<span class="string">"RSA"</span>)</span><br><span class="line">				.generatePrivate(<span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decoded));</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> RSAKey <span class="title function_">generateKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> NoSuch算法Exception {</span><br><span class="line">		<span class="type">KeyPairGenerator</span> <span class="variable">keyPairGen</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">		keyPairGen.initialize(<span class="number">1024</span>, <span class="keyword">new</span> <span class="title class_">SecureRandom</span>());</span><br><span class="line">		<span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGen.generateKeyPair();</span><br><span class="line">		<span class="type">RSAPrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line">		<span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">		<span class="type">String</span> <span class="variable">publicKeyString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(publicKey.getEncoded()));</span><br><span class="line">		<span class="type">String</span> <span class="variable">privateKeyString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.encodeBase64(privateKey.getEncoded()));</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RSAKey</span>(privateKey, privateKeyString, publicKey, publicKeyString);</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String source)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">		<span class="type">byte</span>[] decoded = Base64.decodeBase64(PUBLIC_KEY);</span><br><span class="line">		<span class="type">RSAPublicKey</span> <span class="variable">rsaPublicKey</span> <span class="operator">=</span> (RSAPublicKey) KeyFactory.getInstance(<span class="string">"RSA"</span>)</span><br><span class="line">				.generatePublic(<span class="keyword">new</span> <span class="title class_">X509EncodedKeySpec</span>(decoded));</span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">		cipher.init(<span class="number">1</span>, rsaPublicKey);</span><br><span class="line">		<span class="keyword">return</span> Base64.encodeBase64String(cipher.doFinal(source.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Cipher <span class="title function_">getCipher</span><span class="params">()</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">		<span class="type">byte</span>[] decoded = Base64.decodeBase64(PRIVATE_KEY);</span><br><span class="line">		<span class="type">RSAPrivateKey</span> <span class="variable">rsaPrivateKey</span> <span class="operator">=</span> (RSAPrivateKey) KeyFactory.getInstance(<span class="string">"RSA"</span>)</span><br><span class="line">				.generatePrivate(<span class="keyword">new</span> <span class="title class_">PKCS8EncodedKeySpec</span>(decoded));</span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">		cipher.init(<span class="number">2</span>, rsaPrivateKey);</span><br><span class="line">		<span class="keyword">return</span> cipher;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">decrypt</span><span class="params">(String text)</span> <span class="keyword">throws</span> Exception {</span><br><span class="line">		<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> getCipher();</span><br><span class="line">		<span class="type">byte</span>[] inputByte = Base64.decodeBase64(text.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(cipher.doFinal(inputByte));</span><br><span class="line">	}</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RSAKey</span> {</span><br><span class="line">		  <span class="keyword">private</span> RSAPrivateKey privateKey;</span><br><span class="line">		  <span class="keyword">private</span> String privateKeyString;</span><br><span class="line">		  <span class="keyword">private</span> RSAPublicKey publicKey;</span><br><span class="line">		  <span class="keyword">public</span> String publicKeyString;</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> <span class="title function_">RSAKey</span><span class="params">(RSAPrivateKey privateKey, String privateKeyString, RSAPublicKey publicKey, String publicKeyString)</span> {</span><br><span class="line">		    <span class="built_in">this</span>.privateKey = privateKey;</span><br><span class="line">		    <span class="built_in">this</span>.privateKeyString = privateKeyString;</span><br><span class="line">		    <span class="built_in">this</span>.publicKey = publicKey;</span><br><span class="line">		    <span class="built_in">this</span>.publicKeyString = publicKeyString;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> RSAPrivateKey <span class="title function_">getPrivateKey</span><span class="params">()</span> {</span><br><span class="line">		    <span class="keyword">return</span> <span class="built_in">this</span>.privateKey;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrivateKey</span><span class="params">(RSAPrivateKey privateKey)</span> {</span><br><span class="line">		    <span class="built_in">this</span>.privateKey = privateKey;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> String <span class="title function_">getPrivateKeyString</span><span class="params">()</span> {</span><br><span class="line">		    <span class="keyword">return</span> <span class="built_in">this</span>.privateKeyString;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrivateKeyString</span><span class="params">(String privateKeyString)</span> {</span><br><span class="line">		    <span class="built_in">this</span>.privateKeyString = privateKeyString;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> RSAPublicKey <span class="title function_">getPublicKey</span><span class="params">()</span> {</span><br><span class="line">		    <span class="keyword">return</span> <span class="built_in">this</span>.publicKey;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPublicKey</span><span class="params">(RSAPublicKey publicKey)</span> {</span><br><span class="line">		    <span class="built_in">this</span>.publicKey = publicKey;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> String <span class="title function_">getPublicKeyString</span><span class="params">()</span> {</span><br><span class="line">		    <span class="keyword">return</span> <span class="built_in">this</span>.publicKeyString;</span><br><span class="line">		  }</span><br><span class="line"></span><br><span class="line">		  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPublicKeyString</span><span class="params">(String publicKeyString)</span> {</span><br><span class="line">		    <span class="built_in">this</span>.publicKeyString = publicKeyString;</span><br><span class="line">		  }</span><br><span class="line">		}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h1 id="JWT-工具类"><a href="#JWT-工具类" class="headerlink" title="JWT 工具类"></a>JWT 工具类</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.likfees.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.likfees.entity.exception.ConditionException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.算法s.算法;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenUtils</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ISSUER</span> <span class="operator">=</span> <span class="string">"kl.do"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">EXPIRE</span> <span class="operator">=</span><span class="number">30</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(Long userId, String phone, String avatar, String nickname)</span> {</span><br><span class="line">        算法 算法 = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            算法 = 算法.RSA256(RSAUtils.getPublicKey(), RSAUtils.getPrivateKey());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance(); <span class="comment">// 日历类用于生成过期时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        calendar.add(Calendar.SECOND, EXPIRE);</span><br><span class="line">        <span class="keyword">return</span> JWT.create().withKeyId(String.valueOf(userId)).withIssuer(ISSUER).withExpiresAt(calendar.getTime()).withClaim(<span class="string">"user_id"</span>, userId).withClaim(<span class="string">"phone"</span>, phone).withClaim(<span class="string">"avatar"</span>, avatar).withClaim(<span class="string">"nickname"</span>, nickname).sign(算法);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Claim&gt; <span class="title function_">VerifyToken</span><span class="params">(String token)</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            算法 算法 = 算法.RSA256(RSAUtils.getPublicKey(), RSAUtils.getPrivateKey());</span><br><span class="line">            <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(算法).build();</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">            Map&lt;String, Claim&gt; claims = jwt.getClaims();</span><br><span class="line">            <span class="keyword">return</span> claims;</span><br><span class="line">        } <span class="keyword">catch</span> (TokenExpiredException e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConditionException</span>(<span class="number">401</span>, <span class="string">"token 令牌已过期"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (SignatureVerificationException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(token);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConditionException</span>(<span class="number">401</span>, <span class="string">"token 令牌无效"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Air 程序热更工具与 Goland、DLV 配合 Debug 调试程序</title>
    <url>/posts/12396.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Air 是一款 Go 语言热加载工具，它能实时监听文件或目录变化，并自动完成编译与重启程序操作，从而显著提升开发阶段的工作效率。</p>
<p>在开发过程中，要实现实时加载功能，这个困扰肯定不止你一人遇到。秉持着 “一定有现成解决方案” 的信念，我进行了全网搜索，并果真在 GitHub 上找到了一款工具 ——Air。它具备以下特性：</p>
<ol>
<li>彩色日志输出</li>
<li>支持自定义构建或二进制命令</li>
<li>允许忽略子目录</li>
<li>启动后可继续监听新增目录</li>
<li>优化了构建过程</li>
</ol>
<p>这款工具能够有效实现在开发中的实时加载需求。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="通过-go-install-（推荐）"><a href="#通过-go-install-（推荐）" class="headerlink" title="通过 go install （推荐）"></a>通过 go install （推荐）</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">go install github.com/cosmtrek/air@latest</span><br><span class="line"></span><br><span class="line">air -v</span><br></pre></td></tr></tbody></table></figure>

<h3 id="通过-install-sh"><a href="#通过-install-sh" class="headerlink" title="通过 install.sh"></a>通过 install.sh</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">binary will be $(go <span class="built_in">env</span> GOPATH)/bin/air</span></span><br><span class="line">curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s -- -b $(go env GOPATH)/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or install it into ./bin/</span></span><br><span class="line">curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s</span><br><span class="line"></span><br><span class="line">air -v</span><br></pre></td></tr></tbody></table></figure>

<h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>为了减少输入，你可以在 .bashrc 或 .zshrc 文件中添加别名 air=’~/.air’。</p>
<p>首先进入你的项目目录：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/your_project</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>最简单的使用方式是运行：</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 直接启动当前目录下的程序</span></span><br><span class="line">air</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>使用配置文件 </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 首先在当前目录查找 .air.toml，如果没有找到，则使用默认配置</span></span><br><span class="line">air -c .air.toml</span><br></pre></td></tr></tbody></table></figure>

<p>你可以通过运行以下命令，在当前目录初始化一个默认设置的 .air.toml 配置文件：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">air init</span><br></pre></td></tr></tbody></table></figure>

<p>之后，只需直接运行 <code>air</code> 命令，无需额外参数，它将使用 .air.toml 文件进行配置：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">air</span><br></pre></td></tr></tbody></table></figure>

<p>若要修改配置，请参考 air_example.toml 文件。</p>
<p>运行时参数：<br>你可以通过在 <code>air</code> 命令后添加参数来为构建后的二进制文件传递运行参数。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将运行 ./tmp/main bench</span></span><br><span class="line">air bench</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将运行 ./tmp/main server --port 8080</span></span><br><span class="line">air server --port 8080</span><br></pre></td></tr></tbody></table></figure>

<p>你可以使用 <code>--</code> 参数来分隔传递给 <code>air</code> 命令和构建后二进制文件的参数：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将运行 ./tmp/main -h</span></span><br><span class="line">air -- -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将使用自定义配置运行 air，并将 -h 参数传递给构建后的二进制文件</span></span><br><span class="line">air -c .air.toml -- -h</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h3 id="Goland"><a href="#Goland" class="headerlink" title="Goland"></a>Goland</h3><h4 id="Air-配置"><a href="#Air-配置" class="headerlink" title="Air 配置"></a>Air 配置</h4><ol>
<li>首先进入你的项目目录：</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/your_project</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>初始化默认 .air.toml 配置 </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">air init</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>golang dlv 配置<br>版本号为 golang 的版本 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">go install github.com/go-delve/delve/cmd/dlv@v1.21.1</span><br></pre></td></tr></tbody></table></figure>

<ol start="5">
<li>修改 .air.toml 配置<br>主要关注一下几个配置 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">bin = "tmp/main.exe"</span><br><span class="line">cmd = "go build -o ./tmp/main.exe {{项目路径}}"</span><br><span class="line">full_bin = "{{dlv路径}} --listen=:{{监听端口}}--headless=true --api-version=2 --accept-multiclient exec tmp/main.exe"</span><br></pre></td></tr></tbody></table></figure>

<p>完整配置示例如下：</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">root</span> = <span class="string">"."</span> <span class="comment"># 监控目录</span></span><br><span class="line"><span class="attr">testdata_dir</span> = <span class="string">"testdata"</span></span><br><span class="line"><span class="attr">tmp_dir</span> = <span class="string">"tmp"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build]</span></span><br><span class="line">  <span class="attr">args_bin</span> = []</span><br><span class="line">  <span class="attr">bin</span> = <span class="string">"tmp/main.exe"</span></span><br><span class="line">  <span class="attr">cmd</span> = <span class="string">"powershell.exe go build -gcflags 'all=-N -l' -o ./tmp/main.exe ."</span></span><br><span class="line">  <span class="attr">delay</span> = <span class="number">1000</span></span><br><span class="line">  <span class="attr">exclude_dir</span> = [<span class="string">"assets"</span>, <span class="string">"tmp"</span>, <span class="string">"vendor"</span>, <span class="string">"testdata"</span>]</span><br><span class="line">  <span class="attr">exclude_file</span> = []</span><br><span class="line">  <span class="attr">exclude_regex</span> = [<span class="string">"_test.go"</span>]</span><br><span class="line">  <span class="attr">exclude_unchanged</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">follow_symlink</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">full_bin</span> = <span class="string">"dlv --listen=:12366 --headless=true --api-version=2 --continue --accept-multiclient exec tmp/main.exe"</span></span><br><span class="line">  <span class="attr">include_dir</span> = []</span><br><span class="line">  <span class="attr">include_ext</span> = [<span class="string">"go"</span>, <span class="string">"tpl"</span>, <span class="string">"tmpl"</span>, <span class="string">"html"</span>]</span><br><span class="line">  <span class="attr">include_file</span> = []</span><br><span class="line">  <span class="attr">kill_delay</span> = <span class="string">"0s"</span></span><br><span class="line">  <span class="attr">log</span> = <span class="string">"build-errors.log"</span></span><br><span class="line">  <span class="attr">poll</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">poll_interval</span> = <span class="number">0</span></span><br><span class="line">  <span class="comment">#post_cmd = ["powershell.exe Stop-Process -Id (Get-NetTCPConnection -LocalPort 12388).OwningProcess -Force"]</span></span><br><span class="line">  <span class="attr">post_cmd</span> = [<span class="string">"echo killing the dlv process."</span>, <span class="string">"powershell.exe Stop-Process -Id (Get-NetTCPConnection -LocalPort 12366).OwningProcess -Force"</span>, <span class="string">"echo kille success"</span>]</span><br><span class="line">  <span class="attr">pre_cmd</span> = []</span><br><span class="line">  <span class="attr">rerun</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">rerun_delay</span> = <span class="number">500</span></span><br><span class="line">  <span class="attr">send_interrupt</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">stop_on_error</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[color]</span></span><br><span class="line">  <span class="attr">app</span> = <span class="string">""</span></span><br><span class="line">  <span class="attr">build</span> = <span class="string">"yellow"</span></span><br><span class="line">  <span class="attr">main</span> = <span class="string">"magenta"</span></span><br><span class="line">  <span class="attr">runner</span> = <span class="string">"green"</span></span><br><span class="line">  <span class="attr">watcher</span> = <span class="string">"cyan"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line">  <span class="attr">main_only</span> = <span class="literal">true</span></span><br><span class="line">  <span class="attr">time</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[misc]</span></span><br><span class="line">  <span class="attr">clean_on_exit</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[screen]</span></span><br><span class="line">  <span class="attr">clear_on_rebuild</span> = <span class="literal">false</span></span><br><span class="line">  <span class="attr">keep_scroll</span> = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="Goland-配置"><a href="#Goland-配置" class="headerlink" title="Goland 配置"></a>Goland 配置</h4><p><img src="https://minio.kl.do/picture/images/typora/a1fa2354cad9db7cc1a90f8ec081253a.png" alt="https://minio.kl.do/picture/images/typora/a1fa2354cad9db7cc1a90f8ec081253a.png"></p>
<p><img src="https://minio.kl.do/picture/images/typora/80756269a3e893ab66a19083a75d285e.png" alt="https://minio.kl.do/picture/images/typora/80756269a3e893ab66a19083a75d285e.png"></p>
<p><img src="https://minio.kl.do/picture/images/typora/8503c5b436522935f61a364bcbb468f7.png" alt="https://minio.kl.do/picture/images/typora/8503c5b436522935f61a364bcbb468f7.png"></p>
<h4 id="Debug-testing"><a href="#Debug-testing" class="headerlink" title="Debug testing"></a>Debug testing</h4><ol>
<li>启动 air<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">air</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p><img src="https://minio.kl.do/picture/images/typora/21fc5ab256d078e256fdcec9bc95da65.png" alt="https://minio.kl.do/picture/images/typora/21fc5ab256d078e256fdcec9bc95da65.png"></p>
<ol start="2">
<li>启动 goland debug</li>
</ol>
<p><img src="https://minio.kl.do/picture/images/typora/e0d7d3e48c38744acde5b45e37899ae1.png" alt="https://minio.kl.do/picture/images/typora/e0d7d3e48c38744acde5b45e37899ae1.png"></p>
<ol start="3">
<li> 发起请求即可开始 Debug<br><strong>如果不能访问，尝试启动 goland debug 后在访问</strong></li>
</ol>
<p><img src="https://minio.kl.do/picture/images/typora/7758e122fe33a0193d7440fe719a19fc.png" alt="https://minio.kl.do/picture/images/typora/7758e122fe33a0193d7440fe719a19fc.png"></p>
<h3 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h3><h4 id="停止-air-时dlv无法停止"><a href="#停止-air-时dlv无法停止" class="headerlink" title="停止 air 时dlv无法停止"></a>停止 air 时 dlv 无法停止</h4><ol>
<li>手动解决 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">netstat -aon|findstr 12366</span><br><span class="line">taskkill /F /IM 39560</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>windows air 解决方案<br>程序结束后将 dlv 端口程序强制停止 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#post_cmd = ["powershell.exe Stop-Process -Id (Get-NetTCPConnection -LocalPort 12366).OwningProcess -Force"]</span><br><span class="line">或</span><br><span class="line">post_cmd = ["echo killing the dlv process.", "powershell.exe Stop-Process -Id (Get-NetTCPConnection -LocalPort 12366).OwningProcess -Force", "echo kille success"]</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Archlinux 常用软件推荐 更新于 2024 年 7 月</title>
    <url>/posts/722051157.html</url>
    <content><![CDATA[<blockquote>
<p>记录一下常用软件</p>
</blockquote>
<h1 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h1><ul>
<li><code>xdg-user-dirs-gtk</code> 执行 <code>xdg-user-dirs-gtk-update</code> 可将更新 Home 目录路径</li>
</ul>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><ul>
<li><code>yay</code> 	代替 pacman 的包管理</li>
<li><code>downgrade</code> pacman 降级工具</li>
</ul>
<h3 id="解决proxychains不支持-yay-一"><a href="#解决proxychains不支持-yay-一" class="headerlink" title="解决proxychains不支持 yay 一"></a>解决 proxychains 不支持 yay 一</h3><p>修改 proxychains 配置文件，把 proxy_dns 注释掉。</p>
<p>打开 proxychains.conf 文件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"># 找到52行的位置，在proxy_dns前加上#号</span><br><span class="line"># proxy_dns</span><br></pre></td></tr></tbody></table></figure>
<p>修改完成后就可以愉快的使用 yay 了</p>
<h2 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h2><ul>
<li><code>zsh</code></li>
<li><code>oh-my-zsh-git</code> 搭配 zsh 利器 `</li>
<li><code>proxychains-ng</code> 终端代理工具 `</li>
<li><code>htop</code> top 升级版</li>
<li><code>trash-cli</code> 命令行回收站，防止误删</li>
</ul>
<h2 id="聊天工具"><a href="#聊天工具" class="headerlink" title="聊天工具"></a>聊天工具</h2><p><code>linuxqq</code> 官方的 QQ Linux 客户端</p>
<p><code>icalingua++</code> 第三方 QQ 客户端</p>
<h3 id="Wine"><a href="#Wine" class="headerlink" title="Wine"></a>Wine</h3><blockquote>
<p>高分屏修改 dpi</p>
<p>vim ~/.pam_environment  添加  <code>DEEPIN_WINE_SCALE=1.5</code> </p>
<p>或者目录映射等可以在 winecfg 进行设置 <code>/opt/apps/com.qq.office.deepin/files/run.sh winecfg</code></p>
</blockquote>
<ul>
<li><code>deepin-wine-tim</code> TIM</li>
<li><code>deepin-wine-wechat</code>  微信 `</li>
</ul>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul>
<li><code>ttf-sarasa-gothic</code>  更纱黑体 推荐字体</li>
<li><code>wqy-microhei</code>  文泉驿微米黑</li>
<li><code>nerd-fonts-jetbrains-mono</code> 用于终端字体</li>
<li><code>noto-fonts-cjk</code> 微信 deepin 版必须装，解决小程序无法打开。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><code>wps-office ttf-wps-fonts wps-office-mui-zh-cn patch</code> 文办公软件 WPS</p>
</li>
<li><p><code>neovim  </code>  Vim 编辑器，xclip 剪贴版工具</p>
</li>
<li><p><code>google-chrome</code> 谷歌浏览器</p>
</li>
<li><p><code>firefox</code> 火狐浏览器</p>
</li>
<li><p><code>unrar</code> 解压</p>
</li>
<li><p><code>unzip-natspec</code> 不推荐使用 <code>unzip</code> 因为有些文件会乱码  </p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">unzip -O gbk yourzip</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>cmake extra-cmake-modules</code></p>
</li>
<li><p><code>curl wget git</code> 命令行下载工具，支持 http，ftp</p>
</li>
<li><p><code>axel</code> 命令行多线程下载工具 <code>axel -n 10 下载链接 </code></p>
</li>
<li><p><code>kvantum-qt5</code> 窗口美化神器</p>
</li>
<li><p><code>ntfs-3g</code> 挂载手机和 u 盘</p>
</li>
<li><p><code>vlc</code> 视频播放器</p>
</li>
<li><p><code>smplayer</code> 视频播放器</p>
</li>
<li><p><code>haruna</code> 视频播放器</p>
</li>
<li><p><code>neofetch</code> 装逼神器</p>
</li>
<li><p><code>timeshift</code> 系统快照，防止滚挂</p>
</li>
<li><p><code>flameshot</code> 火焰截图 强大的截图工具</p>
</li>
<li><p><code>xdotool</code> 模拟键盘按键输入</p>
</li>
</ul>
<h1 id="可选软件"><a href="#可选软件" class="headerlink" title="可选软件"></a>可选软件</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li><p><code>visual-studio-code-bin</code> vscode</p>
</li>
<li><p><code>intellij-idea-ultimate-edition intellij-idea-ultimate-edition-jre</code> Idea Java 开发工具</p>
</li>
<li><p><code>goland goland-jre</code> go 开发工具</p>
</li>
<li><p><code>pycharm-professional</code> pycharm</p>
</li>
<li><p><code>phpstorm phpstorm-jre</code> phpstorm</p>
</li>
<li><p><code>apifox</code> 国内类似 postman 的工具 <strong>推荐</strong></p>
</li>
<li><p><code>postman-bin</code> api 测试工具</p>
</li>
<li><p><code>utools</code> 程序员的工具箱</p>
</li>
<li><p><code>filezilla</code> FTP 管理工具</p>
</li>
<li><p><code>tabby-bin</code> SSH 工具， <strong>需要代理才能安装</strong></p>
</li>
<li><p><code>vmware-workstation</code> 虚拟机</p>
</li>
<li><p><code>open-vm-tools</code> 增强虚拟机工具</p>
<p>需要启动服务，你也可以设为开机自启</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 完成安装依赖再安装 vmware-workstation</span><br><span class="line"># 必装！ 安装对应 Linux 内核版本</span><br><span class="line">sudo pacman -S sudo pacman -S linux-headers</span><br><span class="line"></span><br><span class="line"># 加载VMware模块</span><br><span class="line">sudo modprobe -a vmw_vmci vmmon </span><br><span class="line"></span><br><span class="line"># 启动虚拟机的网络</span><br><span class="line">sudo systemctl start vmware-networks.service </span><br><span class="line"># 启动虚拟机的 USB</span><br><span class="line">sudo systemctl start vmware-usbarbitrator.service</span><br></pre></td></tr></tbody></table></figure>

<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>netease-cloud-music</code> 网易云音乐<br>设置 dpi</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /opt/netease/netease-cloud-music/netease-cloud-music.bash</span><br><span class="line"></span><br><span class="line"># 增加以下内容</span><br><span class="line">--force-device-scale-factor=1.20</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211210155531917-574238588.png" alt="image"></p>
<ul>
<li><p><code>qqmusic-bin</code> QQ 音乐<br>设置 dpi</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /usr/bin/qqmusic</span><br><span class="line"></span><br><span class="line"># 与网易云一样增加以下内容</span><br><span class="line">--force-device-scale-factor=1.20</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p><code>xmind-zen</code> 思维导图</p>
</li>
<li><p><code>todesk</code>  Todesk 远程桌面</p>
</li>
<li><p><code>typora</code> markdown 编辑器（新版 已收费）</p>
</li>
<li><p><code>typora-free-cn</code> markdown 编辑器（旧版 免费）</p>
</li>
<li><p><code>wolai-bin</code> 个人云端笔记软件</p>
</li>
<li><p><code>gimp</code> photoshop 的替代品，GIMP 是自由、免费、开源的。</p>
</li>
<li><p><code>baidunetdisk-bin</code> : 百度网盘</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210411221551687-1917115214.png" alt="image"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang/Java 实现无重复字符的最长子串 - LeetCode 算法</title>
    <url>/posts/1582355105.html</url>
    <content><![CDATA[<blockquote>
<p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。<br>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>
</blockquote>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>示例 1:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "abcacadabcd"</span><br><span class="line">输出: 4 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "dabc"，所以其长度为 3。</span><br></pre></td></tr></tbody></table></figure>
<p>示例 2:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br></pre></td></tr></tbody></table></figure>
<p>示例 3:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</span><br></pre></td></tr></tbody></table></figure>
<p>示例 4:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">输入: s = ""</span><br><span class="line">输出: 0</span><br></pre></td></tr></tbody></table></figure>

<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><blockquote>
<p>原始字符串：abcacadabcd</p>
</blockquote>
<p><img src="https://img2020.cnblogs.com/blog/2354934/202110/2354934-20211016134821713-395407765.jpg" alt="image"></p>
<h1 id="Golang-代码实现"><a href="#Golang-代码实现" class="headerlink" title="Golang 代码实现"></a>Golang 代码实现</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">func lengthOfLongestSubstring(s string) int {</span><br><span class="line">    lastOccurred := make(map[byte]int)</span><br><span class="line">    start := 0     // 子串开始的下标</span><br><span class="line">    maxLength := 0 // 最大子串长度</span><br><span class="line">    for index, ch := range []byte(s) {</span><br><span class="line">        // 如果当前字符存在 map 中</span><br><span class="line">        //且当前字符的下标在start子串开始位置之后的，如果成立则为发生重复</span><br><span class="line">        // 发生重复 start 则当前字符所在的子串下标(map中的下标)后移一位</span><br><span class="line">        lastI, ok := lastOccurred[ch]</span><br><span class="line">        if ok &amp;&amp; lastI &gt;= start {</span><br><span class="line">            start = lastI + 1</span><br><span class="line">        }</span><br><span class="line">        // 计算当前字符下标(index)与 start 下标的距离</span><br><span class="line">        distance := index - start + 1</span><br><span class="line">        if distance &gt; maxLength {</span><br><span class="line">            maxLength = distance</span><br><span class="line">        }</span><br><span class="line">        // key:当前字符 Ascii 码，value:当前字符下标</span><br><span class="line">        lastOccurred[ch] = index</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    return maxLength</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="Golang-单元测试"><a href="#Golang-单元测试" class="headerlink" title="Golang 单元测试"></a>Golang 单元测试</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    "testing"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 单元测试</span><br><span class="line">func TestSubStr(t *testing.T) {</span><br><span class="line">    tests := []struct {</span><br><span class="line">        s   string // 传入的字符串</span><br><span class="line">        ans int    // 答案</span><br><span class="line">    }{</span><br><span class="line">        // 定义测试数据</span><br><span class="line">        {"acbbbb", 3},</span><br><span class="line">        {"bbb", 1},</span><br><span class="line">        {"", 0},</span><br><span class="line">        {"a", 1},</span><br><span class="line">        {"abcde123abcde", 8},</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    for _, tt := range tests {</span><br><span class="line">        actual := LongNotReplace(tt.s)</span><br><span class="line">        // 结果不等于设定的答案</span><br><span class="line">        if actual != tt.ans {</span><br><span class="line">            t.Errorf("got %d for input %q, expected %d", actual, tt.s, tt.ans)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 性能测试</span><br><span class="line">func BenchmarkSubstr(b *testing.B) {</span><br><span class="line">    s := "acbsafaswwqabcdedg123adadwdcs"</span><br><span class="line">    ans := 7; // 答案</span><br><span class="line">    for i := 0; i &lt; 10; i++ {</span><br><span class="line">        s += s</span><br><span class="line">    }</span><br><span class="line">    b.Logf("strlen:%d", len(s))</span><br><span class="line">    b.ResetTimer() // 重置当前执行时间，不计算上面拼接字符串</span><br><span class="line">    for i := 0; i &lt; b.N; i++ {</span><br><span class="line">        actual := LongNotReplace(s)</span><br><span class="line">        if actual != ans {</span><br><span class="line">            b.Errorf("got %d for input %q, expected %d", actual, s, ans)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class Solution {</span><br><span class="line">    public int lengthOfLongestSubstring(String s) {</span><br><span class="line">        int maxLen = 0;</span><br><span class="line">        int start = 0;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; lastOccurred = new HashMap&lt;&gt;();</span><br><span class="line">        char[] chars = s.toCharArray();</span><br><span class="line">        int charsLen = chars.length;</span><br><span class="line">        for (int i = 0; i &lt; charsLen; i++) {</span><br><span class="line">            // 从 map 中获取元素，元素存在且元素出现在start开始的子串中则为重复</span><br><span class="line">            Integer lastI = lastOccurred.get(chars[i]);</span><br><span class="line">            if (null != lastI &amp;&amp; lastI &gt;= start) {</span><br><span class="line">                start = lastI + 1;</span><br><span class="line">            }</span><br><span class="line">            // 计算距离</span><br><span class="line">            int distance = i - start + 1;</span><br><span class="line">            if (distance &gt; maxLen) {</span><br><span class="line">                maxLen = distance;</span><br><span class="line">            }</span><br><span class="line">            lastOccurred.put(chars[i], i);</span><br><span class="line">        }</span><br><span class="line">        return maxLen;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><strong>优化版本</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 这里使用空间换速度,使用 slice 替换 map 不涉及处理中文</span><br><span class="line">// 因为使用的是byte所以 byte的空间是0~255</span><br><span class="line">var lastOccurred = make([]int, 255)</span><br><span class="line"></span><br><span class="line">func lengthOfLongestSubstring(s string) int {</span><br><span class="line">    //lastOccurred := make(map[byte]int)</span><br><span class="line">    start := 0     // 子串开始的下标</span><br><span class="line">    maxLength := 0 // 最大子串长度</span><br><span class="line">    // 将默认值修改为-1</span><br><span class="line">    for item := range lastOccurred {</span><br><span class="line">        lastOccurred[item] = -1</span><br><span class="line">    }</span><br><span class="line">    for index, ch := range []byte(s) {</span><br><span class="line">        //且当前字符的下标在start子串开始位置之后的，如果成立则为发生重复</span><br><span class="line">        // 发生重复 start 则当前字符所在的子串下标(map中的下标)后移一位</span><br><span class="line">        if lastI := lastOccurred[ch]; lastI != -1 &amp;&amp; lastI &gt;= start {</span><br><span class="line">            start = lastI + 1</span><br><span class="line">        }</span><br><span class="line">        // 计算当前字符下标(index)与 start 下标的距离</span><br><span class="line">        distance := index - start + 1</span><br><span class="line">        if distance &gt; maxLength {</span><br><span class="line">            maxLength = distance</span><br><span class="line">        }</span><br><span class="line">        // key:当前字符 Ascii 码，value:当前字符下标</span><br><span class="line">        lastOccurred[ch] = index</span><br><span class="line">    }</span><br><span class="line">    return maxLength</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Jwt 集成 Gin</title>
    <url>/posts/419692717.html</url>
    <content><![CDATA[<h1 id="Jwt"><a href="#Jwt" class="headerlink" title="Jwt"></a>Jwt</h1><blockquote>
<p>Github： <a href="https://github.com/golang-jwt/jwt">https://github.com/golang-jwt/jwt</a><br>文档：<a href="https://pkg.go.dev/github.com/golang-jwt/jwt">https://pkg.go.dev/github.com/golang-jwt/jwt</a></p>
</blockquote>
<p><strong>拉取仓库</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">go get https://github.com/golang-jwt/jwt</span><br></pre></td></tr></tbody></table></figure>



<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">"WXlqEk8BJXmAjtp"</span> <span class="string">//</span> <span class="string">随机生成</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="定义-Payload-结构体-和-逻辑代码"><a href="#定义-Payload-结构体-和-逻辑代码" class="headerlink" title="定义 Payload 结构体 和 逻辑代码"></a>定义 Payload 结构体 和 逻辑代码</h2><p><strong>request.go</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jwtauth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"errors"</span></span><br><span class="line">	<span class="string">"github.com/golang-jwt/jwt"</span></span><br><span class="line">	<span class="string">"go.uber.org/zap"</span></span><br><span class="line">	<span class="string">"micro-shop-api/user-web/global"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomClaims 自定义 Payload 信息</span></span><br><span class="line"><span class="keyword">type</span> CustomClaims <span class="keyword">struct</span> {</span><br><span class="line">	Id       <span class="type">uint</span>   <span class="comment">// 用户id</span></span><br><span class="line">	Mobile   <span class="type">string</span> <span class="comment">// 手机号</span></span><br><span class="line">	Nickname <span class="type">string</span> <span class="comment">// 用户昵称</span></span><br><span class="line">	jwt.StandardClaims</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomClaimsDefault</span><span class="params">(id <span class="type">uint</span>, mobile <span class="type">string</span>, nickname <span class="type">string</span>)</span></span> *CustomClaims {</span><br><span class="line">	beforeTime := time.Now().Unix()</span><br><span class="line">	<span class="keyword">return</span> &amp;CustomClaims{</span><br><span class="line">		Id:       id,</span><br><span class="line">		Mobile:   mobile,</span><br><span class="line">		Nickname: nickname,</span><br><span class="line">		StandardClaims: jwt.StandardClaims{</span><br><span class="line">			NotBefore: beforeTime, <span class="comment">// 生效时间</span></span><br><span class="line">			ExpiresAt: beforeTime + <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>, <span class="comment">// 失效时间</span></span><br><span class="line">			Issuer:    <span class="string">"likfees"</span>, <span class="comment">// 机构</span></span><br><span class="line">		},</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> JWT <span class="keyword">struct</span> {</span><br><span class="line">	singKey []<span class="type">byte</span> <span class="comment">// Jwt 密钥</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	TokenExpired     = errors.New(<span class="string">"Token is expired"</span>)        <span class="comment">// 令牌过期</span></span><br><span class="line">	TokenNotValidYet = errors.New(<span class="string">"Token not active yet"</span>)    <span class="comment">// 令牌未生效</span></span><br><span class="line">	TokenMalformed   = errors.New(<span class="string">"that's not even a token"</span>) <span class="comment">// 令牌不完整</span></span><br><span class="line">	TokenInvalid     = errors.New(<span class="string">""</span>)                        <span class="comment">// 无效令牌</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewJWT 返回一个JWT 实例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJWT</span><span class="params">()</span></span> *JWT {</span><br><span class="line">	<span class="keyword">return</span> &amp;JWT{</span><br><span class="line">		singKey: []<span class="type">byte</span>(global.Config.JwtInfo.SingKey),</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken 创建新的 Token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> CreateToken(claims CustomClaims) (token <span class="type">string</span>, err <span class="type">error</span>) {</span><br><span class="line">	withClaims := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)</span><br><span class="line">	<span class="keyword">return</span> withClaims.SignedString(j.singKey)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseToken 验证 Token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(j *JWT)</span></span> ParseToken(token <span class="type">string</span>) (*CustomClaims, <span class="type">error</span>) {</span><br><span class="line">	withClaims, err := jwt.ParseWithClaims(token, &amp;CustomClaims{}, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>{}, <span class="type">error</span>) {</span><br><span class="line">		<span class="keyword">return</span> j.singKey, <span class="literal">nil</span></span><br><span class="line">	})</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="comment">// 获取到 Jwt ValidationError 错误类型</span></span><br><span class="line">		<span class="keyword">if</span> ve, ok := err.(*jwt.ValidationError); ok {</span><br><span class="line">			zap.S().Infof(<span class="string">"获取到 Jwt ValidationError 原：%v 错误类型:%v"</span>, err, ve.Errors)</span><br><span class="line">			<span class="keyword">if</span> ve.Errors&amp;jwt.ValidationErrorMalformed != <span class="number">0</span> { <span class="comment">// 令牌不完整</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, TokenMalformed</span><br><span class="line">			} <span class="keyword">else</span> <span class="keyword">if</span> ve.Errors&amp;jwt.ValidationErrorExpired != <span class="number">0</span> { <span class="comment">// 令牌过期</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, TokenExpired</span><br><span class="line">			} <span class="keyword">else</span> <span class="keyword">if</span> ve.Errors&amp;jwt.ValidationErrorNotValidYet != <span class="number">0</span> { <span class="comment">// 令牌还未生效</span></span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, TokenNotValidYet</span><br><span class="line">			} <span class="keyword">else</span> {</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> withClaims == <span class="literal">nil</span> {</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> claims, ok := withClaims.Claims.(*CustomClaims); ok { <span class="comment">// 验证成功	</span></span><br><span class="line">		<span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">	} </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, TokenInvalid</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="生成-Token"><a href="#生成-Token" class="headerlink" title="生成 Token"></a>生成 Token</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">j := jwtauth.NewJWT()</span><br><span class="line">claims := jwtauth.NewCustomClaimsDefault(<span class="type">uint</span>(id),mobile, nickname)</span><br><span class="line">token, err := j.CreateToken(*claims)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">}</span><br><span class="line">fmt.Println(token)</span><br></pre></td></tr></tbody></table></figure>

<h2 id="中间件验证-Token"><a href="#中间件验证-Token" class="headerlink" title="中间件验证 Token"></a>中间件验证 Token</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JwtAuth</span><span class="params">()</span></span> gin.HandlerFunc {</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> {</span><br><span class="line">		<span class="comment">// 获取 header 中的 token</span></span><br><span class="line">		token := c.GetHeader(<span class="string">"Authorization"</span>)</span><br><span class="line">		j := jwtauth.NewJWT()</span><br><span class="line">		<span class="comment">// 验证 token</span></span><br><span class="line">		claims, err := j.ParseToken(token)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> { </span><br><span class="line">            <span class="comment">// 验证失败</span></span><br><span class="line">			c.Abort() <span class="comment">// 中断，中间件中 return 不生效</span></span><br><span class="line">		}</span><br><span class="line">		c.Set(<span class="string">"uid"</span>, claims.Id)</span><br><span class="line">		c.Set(<span class="string">"mobile"</span>, claims.Mobile)</span><br><span class="line">		c.Next()</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>使用中间件</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">UserRoute := router.Group(<span class="string">"user"</span>).Use(middleware.JwtAuth())</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 无限级分类 (递归)</title>
    <url>/posts/3181363109.html</url>
    <content><![CDATA[<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><blockquote>
<p>没什么可说的直接看代码</p>
</blockquote>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="comment">//模拟假数据</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">arr</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="variable">$rows</span> = [</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'1'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'一级菜单'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'2'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'二级菜单'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'3'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'一级菜单-1'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'1'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-1'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'4'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'二级菜单-1'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'2'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-2'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'5'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'一级菜单-1-1'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'3'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-1-3'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'6'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'二级菜单-1-1'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'4'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-2-4'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'7'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'二级菜单-1-2'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'4'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-2-4'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'8'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'三级菜单'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'9'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'二级菜单-1-3'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'4'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-2-4-6'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'10'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'三级菜单-1'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'8'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-8'</span>,</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                <span class="string">'id'</span> =&gt; <span class="string">'11'</span>,</span><br><span class="line">                <span class="string">'name'</span> =&gt; <span class="string">'一级菜单-1-4'</span>,</span><br><span class="line">                <span class="string">'pid'</span> =&gt; <span class="string">'5'</span>,</span><br><span class="line">                <span class="string">'path'</span> =&gt; <span class="string">'0-8'</span>,</span><br><span class="line">            ],</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$rows</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">//获取从第0级下的所有分类（pid==0）</span></span><br><span class="line">        <span class="variable">$list</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">build_tree</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$list</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findChild</span>(<span class="params"><span class="variable">$list</span>, <span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="variable">$child</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) {</span><br><span class="line">            <span class="comment">//如果pid等于传进来</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$item</span>[<span class="string">'pid'</span>] == <span class="variable">$id</span>) {</span><br><span class="line">                <span class="variable">$child</span>[] = <span class="variable">$item</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$child</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前级别的子级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $root_id /第几层</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build_tree</span>(<span class="params"><span class="variable">$root_id</span></span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">//获取假数据</span></span><br><span class="line">        <span class="variable">$list</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">arr</span>();</span><br><span class="line">        <span class="comment">//查找指定级数</span></span><br><span class="line">        <span class="variable">$tree</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">findChild</span>(<span class="variable">$list</span>, <span class="variable">$root_id</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$tree</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//遍历获取到的层级得到下级分类</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$tree</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) {</span><br><span class="line">            <span class="comment">//递归调用自己 查找每个元素下的分类</span></span><br><span class="line">            <span class="variable">$child</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">build_tree</span>(<span class="variable">$item</span>[<span class="string">'id'</span>]);</span><br><span class="line">            <span class="comment">//如果有子类就放入数组中</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$child</span> != <span class="literal">null</span>){</span><br><span class="line">                <span class="variable">$tree</span>[<span class="variable">$key</span>][<span class="string">'child'</span>] = <span class="variable">$child</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$tree</span>;</span><br><span class="line">    }</span><br><span class="line">} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="预览结果"><a href="#预览结果" class="headerlink" title="预览结果"></a>预览结果</h1><p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20210411200023334-299438163.png" alt="image"></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang gRPC 开发快速入门</title>
    <url>/posts/2093417083.html</url>
    <content><![CDATA[<h1 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h1><p><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a><br>对应系统下载即可</p>
<ul>
<li>protoc-3.xx.0-win64.zip</li>
<li>protoc-3.xx.0-linux-x86_64.zip</li>
</ul>
<p><strong>注意：protoc 的版本需要和 golang/protobuf 保持一致 （尽量自己去下载最新的版本）</strong></p>
<p>下载完成后解压后记得将路径添加到环境变量中</p>
<h1 id="下载go的依赖包"><a href="#下载go的依赖包" class="headerlink" title="下载go的依赖包"></a>下载 go 的依赖包</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">go get github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></tbody></table></figure>

<h1 id="proto文件"><a href="#proto文件" class="headerlink" title="proto文件"></a>proto 文件</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight protobuf"><table><tbody><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">"/.;proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> {</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> {</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> {</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="生成go文件"><a href="#生成go文件" class="headerlink" title="生成go文件"></a>生成 go 文件</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">protoc -I . goods.proto --go_out=plugins=grpc:.</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220119003211761.png" alt="image-20220119003211761"></p>
<h1 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"demo1/grpc_start/proto"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数必须一致</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> SayHello(ctx context.Context, request *proto.HelloRequest) (*proto.HelloReply, <span class="type">error</span>) {</span><br><span class="line">	<span class="keyword">return</span> &amp;proto.HelloReply{</span><br><span class="line">		Message: <span class="string">"hello "</span> + request.Name,</span><br><span class="line">	}, <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="comment">// 创建服务</span></span><br><span class="line">	g := grpc.NewServer()</span><br><span class="line">	<span class="comment">// 注册服务</span></span><br><span class="line">	proto.RegisterGreeterServer(g, &amp;Server{})</span><br><span class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"localhost:8080"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"failed Listen:"</span> + err.Error())</span><br><span class="line">	}</span><br><span class="line">	err = g.Serve(listener)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"failed to start grpc:"</span> + err.Error())</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"demo1/grpc_start/proto"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	conn, err := grpc.Dial(<span class="string">"localhost:8080"</span>, grpc.WithInsecure())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	c := proto.NewGreeterClient(conn)</span><br><span class="line">	r, err := c.SayHello(context.Background(), &amp;proto.HelloRequest{Name: <span class="string">"likfees"</span>})</span><br><span class="line">	fmt.Println(r.Message)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220119003352585.png" alt="image-20220119003352585"></p>
]]></content>
      <categories>
        <category>Golang</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang gRPC 的四种数据流</title>
    <url>/posts/2249663406.html</url>
    <content><![CDATA[<h1 id="四种数据流"><a href="#四种数据流" class="headerlink" title="四种数据流"></a>四种数据流</h1><ol>
<li>简单模式<br>这种模式最为传统，即客户端发起一次请求，服务端响应一个数据</li>
<li>服务器数据流<br>这种模式是客户端发起一次请求，服务端返回一段连续的数据流。典型的例子是客户端向服务端发送一个股票代码，服务端就把该股票的实时数据源源不断的返回给客户端。</li>
<li>客户端数据流<br>与服务端数据流模式相反，这次是客户端源源不断的向服务端发送数据流，而在发送结束后，由服务端返回一个响应。典型的例子是物联网终端向服务器报送数据。</li>
<li>双向数据流<br>顾名思义，这是客户端和服务端都可以向对方发送数据流，这个时候双方的数据可以同时互相发送，也就是可以实现实时交互。典型的例子是聊天机器人。</li>
</ol>
<p>这里只会讲 grpc 中的 *	stream*，srteam 顾名思义 就是 一种 流，可以源源不断的推送 数据，很适合 传输一些大数据，或者 服务端 和 客户端 长时间 数据交互，比如 客户端 可以向 服务端 订阅 一个数据，服务端 就 可以利用 stream ，源源不断地 推送数据。</p>
<h1 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight protobuf"><table><tbody><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">"/.;proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> {</span><br><span class="line">  <span class="comment">// 服务端流模式</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> GetStream(StreamRequestData) <span class="keyword">returns</span> (stream StreamResponseData)</span>;</span><br><span class="line">  <span class="comment">// 客户端流模式</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> PutStream(stream StreamRequestData) <span class="keyword">returns</span> (StreamResponseData)</span>;</span><br><span class="line">  <span class="comment">// 双向流模式</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> AllStream(stream StreamRequestData) <span class="keyword">returns</span> (stream StreamResponseData)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">StreamRequestData</span> {</span><br><span class="line">  <span class="type">string</span> data = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">StreamResponseData</span>{</span><br><span class="line">  <span class="type">string</span> data = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><ul>
<li>go<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">protoc -I . stream.proto --go_out=plugins=grpc:.</span><br></pre></td></tr></tbody></table></figure></li>
<li>python <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I.  stream.proto</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"demo1/grpc_stream/proto"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ADDRESS = <span class="string">"localhost:50051"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须实现 proto 中定义的所有方法</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器数据流模式 服务端不断的发送数据给客户端</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> GetStream(request *proto.StreamRequestData, stream proto.Greeter_GetStreamServer) <span class="type">error</span> {</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">		<span class="comment">// 不断的返回时间戳</span></span><br><span class="line">		_ = stream.Send(&amp;proto.StreamResponseData{</span><br><span class="line">			Data: fmt.Sprintf(request.Data+<span class="string">": %v"</span>, time.Now().Unix()),</span><br><span class="line">		})</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端流模式 客户端不断给服务端发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> PutStream(stream proto.Greeter_PutStreamServer) <span class="type">error</span> {</span><br><span class="line">	<span class="keyword">for</span> {</span><br><span class="line">		r, err := stream.Recv()</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF {</span><br><span class="line">			fmt.Println(<span class="string">"EOF"</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		} <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="built_in">panic</span>(err)</span><br><span class="line">		}</span><br><span class="line">		fmt.Println(<span class="string">"客户端流模式:"</span> + r.Data)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Server)</span></span> AllStream(stream proto.Greeter_AllStreamServer) <span class="type">error</span> {</span><br><span class="line">	<span class="comment">// 因为发送和接收数据是并行的，不能因为接受或发送数据阻塞，所以用到协程</span></span><br><span class="line">	wg := sync.WaitGroup{}</span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="comment">//接受数据</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">		<span class="keyword">for</span> {</span><br><span class="line">			data, err := stream.Recv()</span><br><span class="line">			<span class="keyword">if</span> err == io.EOF {</span><br><span class="line">				fmt.Println(<span class="string">"EOF"</span>)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			} <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			}</span><br><span class="line">			fmt.Println(<span class="string">"接收到客户端数据："</span> + data.Data)</span><br><span class="line">		}</span><br><span class="line">		wg.Done()</span><br><span class="line">	}()</span><br><span class="line">	<span class="comment">// 发送数据</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">			err := stream.Send(&amp;proto.StreamResponseData{</span><br><span class="line">				Data: fmt.Sprintf(<span class="string">"我是服务端%d！"</span>, i),</span><br><span class="line">			})</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			}</span><br><span class="line">			time.Sleep(time.Second)</span><br><span class="line">		}</span><br><span class="line">		wg.Done()</span><br><span class="line">	}()</span><br><span class="line">	wg.Wait()</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	listener, err := net.Listen(<span class="string">"tcp"</span>, ADDRESS)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"failed Listener:"</span> + err.Error())</span><br><span class="line">	}</span><br><span class="line">	g := grpc.NewServer()</span><br><span class="line">	proto.RegisterGreeterServer(g, &amp;Server{})</span><br><span class="line">	err = g.Serve(listener)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>


<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"demo1/grpc_stream/proto"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc/credentials/insecure"</span></span><br><span class="line">	<span class="string">"io"</span></span><br><span class="line">	<span class="string">"sync"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ADDRESS = <span class="string">"localhost:50051"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端流模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetStream</span><span class="params">(c proto.GreeterClient)</span></span> {</span><br><span class="line">	rsp, _ := c.GetStream(context.Background(), &amp;proto.StreamRequestData{Data: <span class="string">"likfees"</span>})</span><br><span class="line">	<span class="keyword">for</span> {</span><br><span class="line">		<span class="comment">// 不断的接收数据</span></span><br><span class="line">		r, err := rsp.Recv()</span><br><span class="line">		<span class="comment">// 当没有数据时结束</span></span><br><span class="line">		<span class="keyword">if</span> err == io.EOF {</span><br><span class="line">			fmt.Println(<span class="string">"EOF"</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		} <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="built_in">panic</span>(err)</span><br><span class="line">		}</span><br><span class="line">		fmt.Println(r.Data)</span><br><span class="line">	}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端流模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PutStream</span><span class="params">(c proto.GreeterClient)</span></span> {</span><br><span class="line">	rsp, _ := c.PutStream(context.Background())</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">		_ = rsp.Send(&amp;proto.StreamRequestData{</span><br><span class="line">			Data: fmt.Sprintf(<span class="string">"%v"</span>, time.Now().Unix()),</span><br><span class="line">		})</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 关闭发送</span></span><br><span class="line">	_ = rsp.CloseSend()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向数据流模式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllStream</span><span class="params">(c proto.GreeterClient)</span></span> {</span><br><span class="line">	conn, err := c.AllStream(context.Background())</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"the connect failed! "</span> + err.Error())</span><br><span class="line">	}</span><br><span class="line">	wg := sync.WaitGroup{}</span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="comment">// 接受数据</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">		<span class="keyword">for</span> {</span><br><span class="line">			r, err := conn.Recv()</span><br><span class="line">			<span class="keyword">if</span> err == io.EOF {</span><br><span class="line">				fmt.Println(<span class="string">"EOF"</span>)</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			} <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			}</span><br><span class="line">			fmt.Println(<span class="string">"收到服务器发送数据："</span> + r.Data)</span><br><span class="line">		}</span><br><span class="line">		wg.Done()</span><br><span class="line">	}()</span><br><span class="line">	<span class="comment">// 发送数据</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">			err = conn.Send(&amp;proto.StreamRequestData{</span><br><span class="line">				Data: fmt.Sprintf(<span class="string">"我是客户端%v！"</span>, i),</span><br><span class="line">			})</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			}</span><br><span class="line">			time.Sleep(time.Second)</span><br><span class="line">		}</span><br><span class="line">		_ = conn.CloseSend()</span><br><span class="line">		wg.Done()</span><br><span class="line">	}()</span><br><span class="line">	wg.Wait()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	conn, err := grpc.Dial(ADDRESS, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"the connect failed! "</span> + err.Error())</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	c := proto.NewGreeterClient(conn)</span><br><span class="line">	GetStream(c)</span><br><span class="line">	PutStream(c)</span><br><span class="line">	AllStream(c)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220127162356072.png" alt="image-20220127162356072"></p>
]]></content>
      <categories>
        <category>Golang</category>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>ArchLinux 开启面部解锁功能</title>
    <url>/posts/3352666994.html</url>
    <content><![CDATA[<blockquote>
<p>github：<a href="https://github.com/boltgolt/howdy">https://github.com/boltgolt/howdy</a></p>
<p>archwiki： <a href="https://wiki.archlinux.org/title/Howdy_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Howdy_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p>
</blockquote>
<h1 id="安装-Howdy"><a href="#安装-Howdy" class="headerlink" title="安装 Howdy"></a>安装 Howdy</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yay -S howdy</span><br></pre></td></tr></tbody></table></figure>

<p> 修改 Howdy 目录权限</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo chmod -R 755 /lib/security/howdy</span><br></pre></td></tr></tbody></table></figure>



<h1 id="添加红外传感器"><a href="#添加红外传感器" class="headerlink" title="添加红外传感器"></a>添加红外传感器</h1><p>可以在诸如 <a href="https://archlinux.org/packages/?name=cheese">cheese</a>、<a href="https://aur.archlinux.org/packages/fswebcam/">fswebcam</a>AUR 或者 <a href="https://archlinux.org/packages/?name=v4l-utils">v4l-utils</a> 的程序里找到并确定能连接到红外传感器的正确 <code>/dev/videoX</code> 文件，</p>
<p>以内置于 <a href="https://archlinux.org/packages/?name=v4l-utils">v4l-utils</a> 软件包的工具为例：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v4l2-ctl --list-devices</span></span><br><span class="line">Integrated_Webcam_HD: Integrate (usb-0000:00:14.0-11):</span><br><span class="line">        /dev/video0</span><br><span class="line">        /dev/video1</span><br></pre></td></tr></tbody></table></figure>



<p>修改配置文件 <code>sudo vim /lib/security/howdy/config.ini</code> 也可以使用 <code>sudo howdy config</code> 修改</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"> 修改以下内容</span><br><span class="line">- device_path = none</span><br><span class="line">+ device_path = /dev/video0</span><br></pre></td></tr></tbody></table></figure>

<p><strong>测试配置是否成功</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo howdy test</span><br></pre></td></tr></tbody></table></figure>



<h1 id="添加人脸模型"><a href="#添加人脸模型" class="headerlink" title="添加人脸模型"></a>添加人脸模型</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo howdy add</span><br></pre></td></tr></tbody></table></figure>

<p>查看添加的人脸模型</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo howdy list</span><br></pre></td></tr></tbody></table></figure>



<h1 id="面部验证"><a href="#面部验证" class="headerlink" title="面部验证"></a>面部验证</h1><p>为了能识别用户，必须对 Howdy 需要用到的 <a href="https://wiki.archlinux.org/title/PAM">PAM</a> 配置文件做一些小修改，任取其一加入：</p>
<p><strong>建议放在 <a href="https://wiki.archlinux.org/title/PAM">PAM</a> 配置第一行</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">auth sufficient pam_python.so /lib/security/howdy/pam.py</span><br></pre></td></tr></tbody></table></figure>

<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/pam.d/sudo</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220524134900307.png" alt="image-20220524134900307"></p>
<p>测试</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></tbody></table></figure>



<h1 id="SDDM"><a href="#SDDM" class="headerlink" title="SDDM"></a>SDDM</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/pam.d/system-login</span><br><span class="line">或</span><br><span class="line">sudo vim  /etc/pam.d/sddm</span><br></pre></td></tr></tbody></table></figure>



<h1 id="polkit-1-KDE代理验证程序"><a href="#polkit-1-KDE代理验证程序" class="headerlink" title="polkit-1 KDE代理验证程序"></a>polkit-1 KDE 代理验证程序</h1><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo vim /etc/pam.d/polkit-1</span><br></pre></td></tr></tbody></table></figure>





<h1 id="取消拍照"><a href="#取消拍照" class="headerlink" title="取消拍照"></a>取消拍照</h1><p>Howdy 会在识别用户时拍照，然后保存到 <code>/lib/security/howdy/snapshots</code>。</p>
<p><code>sudo vim /lib/security/howdy/config.ini</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[snapshots]</span><br><span class="line">capture_failed = false</span><br><span class="line">capture_successful = false</span><br></pre></td></tr></tbody></table></figure>



<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="终端里有-GStreamer-warnings"><a href="#终端里有-GStreamer-warnings" class="headerlink" title="终端里有 GStreamer warnings"></a>终端里有 GStreamer warnings</h2><p>已经让 Howdy 正常工作，但是在终端里收到警告：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[ WARN:0@0.234] global /build/opencv/src/opencv-4.5.5/modules/videoio/src/cap_gstreamer.cpp (2401) handleMessage OpenCV | GStreamer warning: Embedded video playback halted; module source reported: Could not read from resource.</span><br><span class="line">[ WARN:0@0.234] global /build/opencv/src/opencv-4.5.5/modules/videoio/src/cap_gstreamer.cpp (1356) open OpenCV | GStreamer warning: unable to start pipeline</span><br><span class="line">[ WARN:0@0.234] global /build/opencv/src/opencv-4.5.5/modules/videoio/src/cap_gstreamer.cpp (862) isPipelinePlaying OpenCV | GStreamer warning: GStreamer: pipeline have not been created</span><br><span class="line">Identified face as likfees</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>添加 opencv log 日志等级环境变量 <code>sudo vim /etc/profile</code></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">export OPENCV_LOG_LEVEL=ERROR</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul 服务注册中心安装与配置</title>
    <url>/posts/3777199409.html</url>
    <content><![CDATA[<h1 id="Docker-安装-Consul"><a href="#Docker-安装-Consul" class="headerlink" title="Docker 安装 Consul"></a>Docker 安装 Consul</h1><blockquote>
<p>8500 HTTP 端口<br>8600 DNS 端口</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600/udp consul consul agent -dev -client=0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">docker container update --restart=always 容器名字/ID</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Consul-Web"><a href="#Consul-Web" class="headerlink" title="Consul Web"></a>Consul Web</h1><p>http:// [docker-ip]:8500</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220218132920968.png" alt="image-20220218132920968"></p>
<h1 id="Consul-DNS"><a href="#Consul-DNS" class="headerlink" title="Consul DNS"></a>Consul DNS</h1><blockquote>
<p>  Consul 提供 DNS 功能，可以让我们通过， 可以通过 dig 命令行来测试，consul 默认的 dns 端口是 8600</p>
</blockquote>
<p><strong>Linux</strong></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yay -S bind</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Windows</strong></p>
<p><a href="https://www.isc.org/download/">https://www.isc.org/download/</a></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">dig @172.17.0.1 -p 8600 consul.service.consul SRV</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220218134750247.png" alt="image-20220218134750247"></p>
<h1 id="Consul-APi"><a href="#Consul-APi" class="headerlink" title="Consul APi"></a>Consul APi</h1><h2 id="注册服务与健康检查"><a href="#注册服务与健康检查" class="headerlink" title="注册服务与健康检查"></a>注册服务与健康检查</h2><h3 id="HTTP-Golang"><a href="#HTTP-Golang" class="headerlink" title="HTTP Golang"></a>HTTP Golang</h3><blockquote>
<p>   服务注册 <a href="https://www.consul.io/api-docs/agent/service#register-service">https://www.consul.io/api-docs/agent/service#register-service</a><br>   健康检查 <a href="https://www.consul.io/api-docs/agent/check">https://www.consul.io/api-docs/agent/check</a></p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/hashicorp/consul/api"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 注册服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(id, name, address <span class="type">string</span>, port <span class="type">int</span>)</span></span> {</span><br><span class="line">	<span class="comment">// 默认配置</span></span><br><span class="line">	cfg := api.DefaultConfig()</span><br><span class="line">	cfg.Address = <span class="string">"172.17.0.1:8500"</span></span><br><span class="line"></span><br><span class="line">	client, err := api.NewClient(cfg)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 生成服务注册对象</span></span><br><span class="line">	registation := &amp;api.AgentServiceRegistration{</span><br><span class="line">		ID:      id,</span><br><span class="line">		Name:    name,</span><br><span class="line">		Address: address,</span><br><span class="line">		Port:    port,</span><br><span class="line">		Check: &amp;api.AgentServiceCheck{</span><br><span class="line">			<span class="comment">// 每个服务都要提供一个GET接口返回{code:200,success:true}</span></span><br><span class="line">			HTTP:   <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	<span class="comment">// 不能使用 127.0.0.1 因为 Consul 已经部署到 docker 不能识别</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//deregister("mirco-shop-web")</span></span><br><span class="line">}                        fmt.Sprintf(<span class="string">"http://%s:%d/health"</span>, address, port),</span><br><span class="line">			Interval:                       <span class="string">"5s"</span>, <span class="comment">// 定时检查</span></span><br><span class="line">			Timeout:                        <span class="string">"5s"</span>, <span class="comment">// 超时时间</span></span><br><span class="line">			DeregisterCriticalServiceAfter: <span class="string">"1m"</span>, <span class="comment">// 服务失效多少秒后注销</span></span><br><span class="line">		},</span><br><span class="line">	}</span><br><span class="line">	err = client.Agent().ServiceRegister(registation)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	fmt.Println(<span class="string">"注册成功"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">// 不能使用 127.0.0.1 因为 Consul 已经部署到 docker 不能识别</span></span><br><span class="line">    .Register(<span class="string">"mirco-shop-api"</span>, <span class="string">"mirco-shop-api"</span>, <span class="string">"192.168.200.110"</span>, <span class="number">8021</span>)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="gRPC-Python"><a href="#gRPC-Python" class="headerlink" title="gRPC Python"></a>gRPC Python</h3><blockquote>
<p>  Protobuf  <a href="https://github.com/grpc/grpc/blob/master/doc/health-checking.md">https://github.com/grpc/grpc/blob/master/doc/health-checking.md</a></p>
<p>  Health.py <a href="https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html">https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html</a></p>
</blockquote>
<p><strong>protobuf</strong> health.proto</p>
<blockquote>
<p>  不要修改任何内容</p>
</blockquote>
<figure class="highlight protobuf"><table><tbody><tr><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> grpc.health.v1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HealthCheckRequest</span> {</span><br><span class="line">  <span class="type">string</span> service = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HealthCheckResponse</span> {</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">ServingStatus</span> {</span><br><span class="line">    UNKNOWN = <span class="number">0</span>;</span><br><span class="line">    SERVING = <span class="number">1</span>;</span><br><span class="line">    NOT_SERVING = <span class="number">2</span>;</span><br><span class="line">    SERVICE_UNKNOWN = <span class="number">3</span>;  <span class="comment">// Used only by the Watch method.</span></span><br><span class="line">  }</span><br><span class="line">  ServingStatus status = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Health</span> {</span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Check(HealthCheckRequest) <span class="keyword">returns</span> (HealthCheckResponse)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> Watch(HealthCheckRequest) <span class="keyword">returns</span> (stream HealthCheckResponse)</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>生成代码</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I.  health.proto</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>实现 Check 和 Watch 方法  health.py  复制进去即可 </li>
</ol>
<p> <a href="https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html">https://grpc.github.io/grpc/python/_modules/grpc_health/v1/health.html</a></p>
<ol start="2">
<li> 新建<code>_async.py</code> 复制以下内容 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Copyright 2020 The gRPC Authors</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="string">"""Reference implementation for health checking in gRPC Python."""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> MutableMapping</span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> common.grpc_health.v1 <span class="keyword">import</span> health_pb2 <span class="keyword">as</span> _health_pb2</span><br><span class="line"><span class="keyword">from</span> common.grpc_health.v1 <span class="keyword">import</span> health_pb2_grpc <span class="keyword">as</span> _health_pb2_grpc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HealthServicer</span>(_health_pb2_grpc.HealthServicer):</span><br><span class="line">    <span class="string">"""An AsyncIO implementation of health checking servicer."""</span></span><br><span class="line">    _server_status: MutableMapping[</span><br><span class="line">        <span class="built_in">str</span>, <span class="string">'_health_pb2.HealthCheckResponse.ServingStatus'</span>]</span><br><span class="line">    _server_watchers: MutableMapping[<span class="built_in">str</span>, asyncio.Condition]</span><br><span class="line">    _gracefully_shutting_down: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>._server_status = {<span class="string">""</span>: _health_pb2.HealthCheckResponse.SERVING}</span><br><span class="line">        <span class="variable language_">self</span>._server_watchers = collections.defaultdict(asyncio.Condition)</span><br><span class="line">        <span class="variable language_">self</span>._gracefully_shutting_down = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">Check</span>(<span class="params">self, request: _health_pb2.HealthCheckRequest,</span></span><br><span class="line"><span class="params">                    context</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        status = <span class="variable language_">self</span>._server_status.get(request.service)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> status <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">await</span> context.abort(grpc.StatusCode.NOT_FOUND)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> _health_pb2.HealthCheckResponse(status=status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">Watch</span>(<span class="params">self, request: _health_pb2.HealthCheckRequest,</span></span><br><span class="line"><span class="params">                    context</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        condition = <span class="variable language_">self</span>._server_watchers[request.service]</span><br><span class="line">        last_status = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> condition:</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    status = <span class="variable language_">self</span>._server_status.get(</span><br><span class="line">                        request.service,</span><br><span class="line">                        _health_pb2.HealthCheckResponse.SERVICE_UNKNOWN)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># NOTE(lidiz) If the observed status is the same, it means</span></span><br><span class="line">                    <span class="comment"># there are missing intermediate statuses. It's considered</span></span><br><span class="line">                    <span class="comment"># acceptable since peer only interested in eventual status.</span></span><br><span class="line">                    <span class="keyword">if</span> status != last_status:</span><br><span class="line">                        <span class="comment"># Responds with current health state</span></span><br><span class="line">                        <span class="keyword">await</span> context.write(</span><br><span class="line">                            _health_pb2.HealthCheckResponse(status=status))</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Records the last sent status</span></span><br><span class="line">                    last_status = status</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># Polling on health state changes</span></span><br><span class="line">                    <span class="keyword">await</span> condition.wait()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">if</span> request.service <span class="keyword">in</span> <span class="variable language_">self</span>._server_watchers:</span><br><span class="line">                <span class="keyword">del</span> <span class="variable language_">self</span>._server_watchers[request.service]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_set</span>(<span class="params">self, service: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                   status: _health_pb2.HealthCheckResponse.ServingStatus</span></span><br><span class="line"><span class="params">                  </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> service <span class="keyword">in</span> <span class="variable language_">self</span>._server_watchers:</span><br><span class="line">            condition = <span class="variable language_">self</span>._server_watchers.get(service)</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> condition:</span><br><span class="line">                <span class="variable language_">self</span>._server_status[service] = status</span><br><span class="line">                condition.notify_all()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._server_status[service] = status</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, service: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">                  status: _health_pb2.HealthCheckResponse.ServingStatus</span></span><br><span class="line"><span class="params">                 </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">"""Sets the status of a service.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">          service: string, the name of the service.</span></span><br><span class="line"><span class="string">          status: HealthCheckResponse.status enum value indicating the status of</span></span><br><span class="line"><span class="string">            the service</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._gracefully_shutting_down:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">self</span>._<span class="built_in">set</span>(service, status)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">enter_graceful_shutdown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">"""Permanently sets the status of all services to NOT_SERVING.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This should be invoked when the server is entering a graceful shutdown</span></span><br><span class="line"><span class="string">        period. After this method is invoked, future attempts to set the status</span></span><br><span class="line"><span class="string">        of a service will be ignored.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._gracefully_shutting_down:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>._gracefully_shutting_down = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> service <span class="keyword">in</span> <span class="variable language_">self</span>._server_status:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">self</span>._<span class="built_in">set</span>(service,</span><br><span class="line">                                _health_pb2.HealthCheckResponse.NOT_SERVING)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>注册健康检查服务</p>
<p><strong>请确使用 Consul 能访问的 IP，特别是 Consul 使用 Docker 部署</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">name, <span class="built_in">id</span>, address, port</span>):</span><br><span class="line">    url = <span class="string">"http://172.17.0.1:8500/v1/agent/service/register"</span></span><br><span class="line">    rsp = requests.put(url, headers=headers, json={</span><br><span class="line">        <span class="string">"ID"</span>: <span class="built_in">id</span>,  <span class="comment"># ID 如果不设置则和Name保持一致</span></span><br><span class="line">        <span class="string">"Name"</span>: name,</span><br><span class="line">        <span class="string">"Address"</span>: address,</span><br><span class="line">        <span class="string">"Port"</span>: port,</span><br><span class="line">        <span class="string">"Tags"</span>: [<span class="string">"micro-shop"</span>, <span class="string">"likfees"</span>, <span class="string">"web"</span>],  <span class="comment"># 标签</span></span><br><span class="line">        <span class="string">"Check"</span>: {  <span class="comment"># 健康检查</span></span><br><span class="line">            <span class="string">"GRPC"</span>: <span class="string">f"<span class="subst">{address}</span>:<span class="subst">{port}</span>"</span>,</span><br><span class="line">            <span class="string">"GRPCUseTLS"</span>: <span class="literal">False</span>,</span><br><span class="line">            <span class="string">"Timeout"</span>: <span class="string">"10s"</span>,</span><br><span class="line">            <span class="string">"Interval"</span>: <span class="string">"10s"</span>,</span><br><span class="line">            <span class="string">"DeregisterCriticalServiceAfter"</span>: <span class="string">"1m"</span>,</span><br><span class="line">        },</span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">if</span> rsp.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"注册失败:<span class="subst">{rsp.status_code}</span>"</span>)</span><br><span class="line">        <span class="built_in">print</span>(rsp.text)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"注册成功"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    register(<span class="string">"micro-shop-srv"</span>, <span class="string">"micro-shop-srv"</span>, <span class="string">"192.168.200.110"</span>, <span class="number">50051</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220220140820786.png" alt="image-20220220140820786"></p>
<h2 id="注销服务"><a href="#注销服务" class="headerlink" title="注销服务"></a>注销服务</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Deregister</span><span class="params">(id <span class="type">string</span>)</span></span> {</span><br><span class="line">	<span class="comment">// 默认配置</span></span><br><span class="line">	cfg := api.DefaultConfig()</span><br><span class="line">	cfg.Address = <span class="string">"172.17.0.1:8500"</span></span><br><span class="line"></span><br><span class="line">	client, err := api.NewClient(cfg)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	err = client.Agent().ServiceDeregister(id)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	fmt.Println(<span class="string">"注销服务成功"</span>)</span><br><span class="line">}<span class="comment">// 注销服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deregister</span><span class="params">(id <span class="type">string</span>)</span></span> {</span><br><span class="line">	url := <span class="string">"http://172.17.0.1:8500/v1/agent/service/deregister/"</span> + id</span><br><span class="line">	data := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>{</span><br><span class="line">		<span class="string">"service_id"</span>: id,</span><br><span class="line">	}</span><br><span class="line">	dataJson, err := json.Marshal(data)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	body := bytes.NewReader(dataJson)</span><br><span class="line">	rsq, err := http.NewRequest(<span class="string">"PUT"</span>, url, body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">defer</span> rsq.Body.Close()</span><br><span class="line">	rsq.Header.Add(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">	rsp, err := http.DefaultClient.Do(rsq)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span> rsp.StatusCode != <span class="number">200</span> {</span><br><span class="line">		fmt.Println(<span class="string">"注销失败"</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	}</span><br><span class="line">	fmt.Println(<span class="string">"注销成功"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="获取服务"><a href="#获取服务" class="headerlink" title="获取服务"></a>获取服务</h2><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取所有服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AllServices</span><span class="params">()</span></span> {</span><br><span class="line">   <span class="comment">// 默认配置</span></span><br><span class="line">   cfg := api.DefaultConfig()</span><br><span class="line">   cfg.Address = <span class="string">"172.17.0.1:8500"</span></span><br><span class="line"></span><br><span class="line">   client, err := api.NewClient(cfg)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   }</span><br><span class="line">   services, err := client.Agent().Services()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   }</span><br><span class="line">   fmt.Println(services)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过滤服务名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FilterService</span><span class="params">(name <span class="type">string</span>)</span></span> {</span><br><span class="line">   <span class="comment">// 默认配置</span></span><br><span class="line">   cfg := api.DefaultConfig()</span><br><span class="line">   cfg.Address = <span class="string">"172.17.0.1:8500"</span></span><br><span class="line"></span><br><span class="line">   client, err := api.NewClient(cfg)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   }</span><br><span class="line">   services, err := client.Agent().ServicesWithFilter(fmt.Sprintf(<span class="string">`Service == "%s"`</span>, name))</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   }</span><br><span class="line">   fmt.Println(services)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON Web Token 详解</title>
    <url>/posts/3077708436.html</url>
    <content><![CDATA[<h1 id="Jwt-是什么？"><a href="#Jwt-是什么？" class="headerlink" title="Jwt 是什么？"></a>Jwt 是什么？</h1><p>JSON Web Token (JWT) 是一个开放标准 (RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为 JSON 对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。</p>
<h1 id="什么时候应该用Jwt"><a href="#什么时候应该用Jwt" class="headerlink" title="什么时候应该用Jwt"></a>什么时候应该用 Jwt</h1><p><strong>下列场景中使用 JSON Web Token 是很有用的：</strong></p>
<p><strong>Authorization (授权) :</strong> 这是使用 JWT 的最常见场景。一旦用户登录，后续每个请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的 JWT 的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</p>
<p><strong>Information Exchange (信息交换) :</strong> 对于安全的在各方之间传输信息而言，JSON Web Tokens 无疑是一种很好的方式。因为 JWTs 可以被签名，例如，用公钥 / 私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</p>
<h1 id="Jwt-的结构是什么样的"><a href="#Jwt-的结构是什么样的" class="headerlink" title="Jwt 的结构是什么样的"></a>Jwt 的结构是什么样的</h1><p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/1600657255888-e5bde279-5581-4b0f-b308-33bc9b445d5e.png" alt="image.png"></p>
<p>JSON Web Token 由三部分组成，它们之间用圆点 (.) 连接。这三部分分别是：</p>
<ul>
<li>Header</li>
<li>Payload</li>
<li>Signature</li>
</ul>
<p>因此，一个典型的 JWT 看起来是这个样子的：</p>
<blockquote>
<p>  xxxxx.yyyyy.zzzzz</p>
</blockquote>
<p>接下来，具体看一下每一部分：</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>header 典型的由两部分组成：token 的类型（“JWT”）和算法名称（比如：HMAC SHA256 或者 RSA 等等）。</p>
<p>例如：<br><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/1600657280191-a926f50d-ef7c-4ec2-b88d-e4da6c4953d8.png" alt="image"></p>
<p>然后，用 Base64 对这个 JSON 编码就得到 JWT 的第一部分</p>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>JWT 的第二部分是 payload，它包含声明（要求）。声明是关于实体 (通常是用户) 和其他数据的声明。声明有三种类型: registered, public 和 private。</p>
<p><strong>Registered claims :</strong> 这里有一组预定义的声明，它们不是强制的，但是推荐。比如：iss (issuer), exp (expiration time), sub (subject), aud (audience) 等。</p>
<p><strong>Public claims :</strong> 可以随意定义。</p>
<p><strong>Private claims :</strong> 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明。</p>
<p>下面是一个例子：<br><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/1600657280217-5916e359-a52e-438e-ba9b-f13032054db6.png" alt="image"></p>
<p>对 payload 进行 Base64 编码就得到 JWT 的第二部分</p>
<blockquote>
<p>  注意，不要在 JWT 的 payload 或 header 中放置敏感信息，除非它们是加密的。</p>
</blockquote>
<h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>为了得到签名部分，你必须有编码过的 header、编码过的 payload、一个秘钥，签名算法是 header 中指定的那个，然对它们签名即可。</p>
<p>例如：</p>
<blockquote>
<p>  HMACSHA256(base64UrlEncode(header) + “.” + base64UrlEncode(payload), secret)</p>
</blockquote>
<p>签名是用于验证消息在传递过程中有没有被更改，并且，对于使用私钥签名的 token，它还可以验证 JWT 的发送方是否为它所称的发送方。</p>
<p>看一张<a href="https://jwt.io/">官网</a>的图就明白了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/1600657319902-ab12f7cd-cb45-48ae-983b-ea0461d7d757.png" alt="image.png"></p>
<h1 id="Jwt-是如何工作的"><a href="#Jwt-是如何工作的" class="headerlink" title="Jwt 是如何工作的"></a>Jwt 是如何工作的</h1><p>在认证的时候，当用户用他们的凭证成功登录以后，一个 JSON Web Token 将会被返回。此后，token 就是用户凭证了，你必须非常小心以防止出现安全问题。一般而言，你保存令牌的时候不应该超过你所需要它的时间。</p>
<p>无论何时用户想要访问受保护的路由或者资源的时候，用户代理（通常是浏览器）都应该带上 JWT，典型的，通常放在 Authorization header 中，用 Bearer schema。</p>
<p>header 应该看起来是这样的：</p>
<blockquote>
<p>  Authorization: Bearer</p>
</blockquote>
<p>服务器上的受保护的路由将会检查 Authorization header 中的 JWT 是否有效，如果有效，则用户可以访问受保护的资源。如果 JWT 包含足够多的必需的数据，那么就可以减少对某些操作的数据库查询的需要，尽管可能并不总是如此。</p>
<p>如果 token 是在授权头（Authorization header）中发送的，那么跨源资源共享 (CORS) 将不会成为问题，因为它不使用 cookie。</p>
<p>下面这张图显示了如何获取 JWT 以及使用它来访问 APIs 或者资源：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/1600657375506-8ae6b4b0-2f15-46ff-951c-2033ab508464.png" alt="image.png"></p>
<ul>
<li>应用（或者客户端）想授权服务器请求授权。例如，如果用授权码流程的话，就是 /oauth/authorize</li>
<li> 当授权被许可以后，授权服务器返回一个 access token 给应用</li>
<li>应用使用 access token 访问受保护的资源（比如：API）</li>
</ul>
<h1 id="基于Token的身份认证-与-基于服务器的身份认证"><a href="#基于Token的身份认证-与-基于服务器的身份认证" class="headerlink" title="基于Token的身份认证 与 基于服务器的身份认证"></a>基于 Token 的身份认证 与 基于服务器的身份认证</h1><h2 id="基于服务器的身份认证"><a href="#基于服务器的身份认证" class="headerlink" title="基于服务器的身份认证"></a>基于服务器的身份认证</h2><p>在讨论基于 Token 的身份认证是如何工作的以及它的好处之前，我们先来看一下以前我们是怎么做的：</p>
<p>HTTP 协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证</p>
<p>传统的做法是将已经认证过的用户信息存储在服务器上，比如 Session。用户下次请求的时候带着 Session ID，然后服务器以此检查用户是否认证过。</p>
<p>这种基于服务器的身份认证方式存在一些问题：</p>
<p><strong>Sessions :</strong> 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。</p>
<p><strong>Scalability :</strong> 由于 Session 是在内存中的，这就带来一些扩展性的问题。</p>
<p><strong>CORS :</strong> 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用 AJAX 调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。</p>
<p><strong>CSRF :</strong> 用户很容易受到 CSRF 攻击。</p>
<h2 id="JWT与Session的差异"><a href="#JWT与Session的差异" class="headerlink" title="JWT与Session的差异"></a>JWT 与 Session 的差异</h2><p>相同点是，它们都是存储用户信息；然而，Session 是在服务器端的，而 JWT 是在客户端的。</p>
<p>Session 方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。</p>
<p><strong>而 JWT 方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</strong></p>
<p>Session 的状态是存储在服务器端，客户端只有 session id；而 Token 的状态是存储在客户端。</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/1600657412534-490e62c9-7d00-4a99-9deb-39a37c1ba740.png" alt="image.png"></p>
<h2 id="基于Token的身份认证是如何工作的"><a href="#基于Token的身份认证是如何工作的" class="headerlink" title="基于Token的身份认证是如何工作的"></a>基于 Token 的身份认证是如何工作的</h2><p>基于 Token 的身份认证是无状态的，服务器或者 Session 中不会存储任何用户信息。</p>
<blockquote>
<p>  没有会话信息意味着应用程序可以根据需要扩展和添加更多的机器，而不必担心用户登录的位置。</p>
</blockquote>
<p>虽然这一实现可能会有所不同，但其主要流程如下：</p>
<ul>
<li><ul>
<li>用户携带用户名和密码请求访问</li>
<li>服务器校验用户凭据</li>
<li>应用提供一个 token 给客户端</li>
<li>客户端存储 token，并且在随后的每一次请求中都带着它</li>
<li>服务器校验 token 并返回数据</li>
</ul>
</li>
</ul>
<p>注意：</p>
<ul>
<li><ul>
<li>每一次请求都需要 token</li>
<li>Token 应该放在请求 header 中</li>
<li>我们还需要将服务器设置为接受来自所有域的请求，用 <code>Access-Control-Allow-Origin: *</code></li>
</ul>
</li>
</ul>
<h2 id="用Token的好处"><a href="#用Token的好处" class="headerlink" title="用Token的好处**"></a>用 Token 的好处 **</h2><p><strong>无状态和可扩展性：</strong>Tokens 存储在客户端。完全无状态，可扩展。我们的负载均衡器可以将用户传递到任意服务器，因为在任何地方都没有状态或会话信息。</p>
<p><strong>安全：</strong>Token 不是 Cookie。（The token, not a cookie.）每次请求的时候 Token 都会被发送。而且，由于没有 Cookie 被发送，还有助于防止 CSRF 攻击。即使在你的实现中将 token 存储到客户端的 Cookie 中，这个 Cookie 也只是一种存储机制，而非身份认证机制。没有基于会话的信息可以操作，因为我们没有会话！</p>
<p>还有一点，token 在一段时间以后会过期，这个时候用户需要重新登录。这有助于我们保持安全。还有一个概念叫 token 撤销，它允许我们根据相同的授权许可使特定的 token 甚至一组 token 无效。</p>
<h2 id="JWT与OAuth的区别"><a href="#JWT与OAuth的区别" class="headerlink" title="JWT与OAuth的区别"></a>JWT 与 OAuth 的区别</h2><ul>
<li><ul>
<li>OAuth2 是一种授权框架 ，JWT 是一种认证协议</li>
<li>无论使用哪种方式切记用 HTTPS 来保证数据的安全性</li>
<li> OAuth2 用在使用第三方账号登录的情况 (比如使用 weibo, qq, github 登录某个 app)，而 JWT 是用在前后端分离，需要简单的对后台 API 进行保护时使用。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 广度优先搜索算法走迷宫</title>
    <url>/posts/141103848.html</url>
    <content><![CDATA[<blockquote>
<p>从 0 开始按上左下右的顺序一层一层往外探索</p>
</blockquote>
<p><img src="https://minio.kl.do/picture/images/typora/cf50ad682a4b251d3df4e74c2a529d00.jpg" alt="https://minio.kl.do/picture/images/typora/cf50ad682a4b251d3df4e74c2a529d00.jpg"></p>
<p><img src="https://minio.kl.do/picture/images/typora/5aa14ccb6da5e71d668a4e36fe7d6176.jpg" alt="https://minio.kl.do/picture/images/typora/5aa14ccb6da5e71d668a4e36fe7d6176.jpg"></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    "fmt"</span><br><span class="line">    "os"</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// ReadMaze 读取迷宫</span><br><span class="line">func ReadMaze(filename string) [][]int {</span><br><span class="line">    var row, col int               // 行，列</span><br><span class="line">    file, err := os.Open(filename) // 打开文件</span><br><span class="line">    if err != nil {</span><br><span class="line">        panic(err)</span><br><span class="line">    }</span><br><span class="line">    defer file.Close()</span><br><span class="line">    // 读取文件头部获取行列 6行5列</span><br><span class="line">    fmt.Fscanf(file, "%d %d", &amp;row, &amp;col)</span><br><span class="line">    //  为每行创建空间</span><br><span class="line">    maze := make([][]int, row)</span><br><span class="line">    for i := range maze {</span><br><span class="line">        // 为列创建空间</span><br><span class="line">        maze[i] = make([]int, col)</span><br><span class="line">        fmt.Fscanf(file, "%v") // 把每行最后的 \n 读取出来，避免数据错误</span><br><span class="line">        // 将每列的数据读取到 slice中</span><br><span class="line">        for j := range maze[i] {</span><br><span class="line">            fmt.Fscanf(file, "%d", &amp;maze[i][j])</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return maze</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 点结构体 用于存放点为</span><br><span class="line">type point struct {</span><br><span class="line">    // i 行; j 列</span><br><span class="line">    i, j int</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var directions = [4]point{</span><br><span class="line">    // 上左下右的顺序</span><br><span class="line">    {-1, 0},</span><br><span class="line">    {0, -1},</span><br><span class="line">    {1, 0},</span><br><span class="line">    {0, 1},</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 两个point 相加</span><br><span class="line">func (p point) add(r point) point {</span><br><span class="line">    return point{p.i + r.i, p.j + r.j}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// 向某个地方探索新点是否合法</span><br><span class="line">// 返回探索到的元素值，是否有值</span><br><span class="line">func (p point) at(grid [][]int) (int, bool) {</span><br><span class="line">    // 判断 point 点是否越界，是否走出了 grid 之外</span><br><span class="line">    // 判断 行是否越界</span><br><span class="line">    if p.i &lt; 0 || p.i &gt;= len(grid) {</span><br><span class="line">        return 0, false</span><br><span class="line">    }</span><br><span class="line">    // 判断列是否越界</span><br><span class="line">    if p.j &lt; 0 || p.j &gt;= len(grid[p.i]) {</span><br><span class="line">        return 0, false</span><br><span class="line">    }</span><br><span class="line">    return grid[p.i][p.j], true</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// Walk</span><br><span class="line">// start 从那个点开始</span><br><span class="line">// end 到那个点结束</span><br><span class="line">func Walk(maze [][]int, start, end point) [][]int {</span><br><span class="line">    // 维护一个和 maze 一样大小的 slice 存放走过的路径</span><br><span class="line">    steps := make([][]int, len(maze))</span><br><span class="line">    for i := range steps {</span><br><span class="line">        steps[i] = make([]int, len(maze[i]))</span><br><span class="line">    }</span><br><span class="line">    queue := []point{start} // 将起点放入队列里</span><br><span class="line">    // 当队列为空时退出</span><br><span class="line">    for len(queue) &gt; 0 {</span><br><span class="line">        // pop 队列中第一个元素</span><br><span class="line">        current := queue[0]</span><br><span class="line">        queue = queue[1:]</span><br><span class="line">        if current == end { // 发现终点-结束</span><br><span class="line">            break</span><br><span class="line">        }</span><br><span class="line">        for _, dir := range directions { // 按上左下右的顺序查找</span><br><span class="line">            next := dir.add(current) // 新点的点位</span><br><span class="line">            // 走迷宫 越界的，或者遇到 1 (撞墙)</span><br><span class="line">            at, ok := next.at(maze)</span><br><span class="line">            if !ok || at == 1 {</span><br><span class="line">                continue</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            // 如果 steps 不等于 0 则说明走过了</span><br><span class="line">            at, ok = next.at(steps)</span><br><span class="line">            if !ok || at != 0 {</span><br><span class="line">                continue</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            // 新的点不能是start(回到原点)</span><br><span class="line">            if next == start {</span><br><span class="line">                continue</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            // 使用新点去探索 steps 获取走的步骤数</span><br><span class="line">            curStep, _ := current.at(steps)</span><br><span class="line">            steps[next.i][next.j] = curStep + 1</span><br><span class="line">            // 将当前探索到的点 加入队列中</span><br><span class="line">            queue = append(queue, next)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    return steps</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func main() {</span><br><span class="line"></span><br><span class="line">    // 读取迷宫文本</span><br><span class="line">    maze := ReadMaze("maze/maze.in")</span><br><span class="line"></span><br><span class="line">    // 设置迷宫开始位置和结束位置</span><br><span class="line">    steps := Walk(maze, point{0, 0}, point{len(maze) - 1, len(maze[0]) - 1})</span><br><span class="line">    for _, row := range steps {</span><br><span class="line">        for _, col := range row {</span><br><span class="line">            fmt.Printf("%3d", col)</span><br><span class="line">        }</span><br><span class="line">        fmt.Println()</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装 Maven 私服</title>
    <url>/posts/2868604331.html</url>
    <content><![CDATA[<h1 id="为何需要-Maven-私服？"><a href="#为何需要-Maven-私服？" class="headerlink" title="为何需要 Maven 私服？"></a>为何需要 Maven 私服？</h1><p>我们从项目实际开发来看：</p>
<ol>
<li><p>一些无法从外部仓库下载的构件，例如内部的项目还能部署到私服上，以便供其他依赖项目使用。</p>
</li>
<li><p>为了节省带宽和时间，在局域网内架设一个私有的仓库服务器，用其代理所有外部的远程仓库。当本地 Maven 项目需要下载构件时，先去私服请求，如果私服没有，则再去远程仓库请求，从远程仓库下载构件后，把构件缓存在私服上。这样，及时暂时没有 Internet 链接，由于私服已经缓存了大量构件，整个项目还是可以正常使用的。同时，也降低了中央仓库的符合。</p>
</li>
</ol>
<h1 id="Nexus"><a href="#Nexus" class="headerlink" title="Nexus"></a>Nexus</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>Nexus 是用来搭建 Maven 私服的可以说是唯一的工具，它的官网上是这样说的：“世界上第一个也是唯一的免费使用的仓库解决方案”。目前的最新版本是 OSS 3.x。提供了针对 Windows、Unix、OS X 三种系统的版本。</p>
</blockquote>
<p>这里只简单说明 Docker 下的安装方式</p>
<ol>
<li><p>拉取 Nexus3 镜像</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull sonatype/nexus3</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>启动镜像并将容器内部 <code>/nexus-data</code> 挂载到主机 <code>/root/nexus-data</code> 目录</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-p 8081:8081 \</span><br><span class="line">--name nexus \</span><br><span class="line">-v /root/nexus-data:/nexus-data \</span><br><span class="line">--restart=always \</span><br><span class="line">-d sonatype/nexus3</span><br></pre></td></tr></tbody></table></figure>
</li>
<li><p>通过 <code>docker ps -a</code> 查看容器启动情况</p>
</li>
<li><p>访问 <code>ip:8081</code></p>
</li>
</ol>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220405190620647.png" alt="image-20220405190620647"></p>
<p><strong>至此，私服搭建成功。</strong></p>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>默认登陆账号 <strong>admin admin123</strong> </p>
<p>注意，这个时候你可能会遇到如下这个错误：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Incorrect username or password, or no permission to use the application.</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220405190954338.png" alt="image-20220405190954338"></p>
<p>maven 私服登录的时候默认是不能使用明文密码，要使用密文密码，一般在你创建容器的目录</p>
<ol>
<li><p>查看密文</p>
<p>宿住机中执行</p>
</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cat /root/nexus-data/admin.password</span><br><span class="line">d62fa667-a22b-41db-a14a-6aa6f793f4fb</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>重新登陆后，会提示你重设密码</li>
</ol>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220405191757774.png" alt="image-20220405191757774"></p>
<h1 id="创建-Maven-仓库"><a href="#创建-Maven-仓库" class="headerlink" title="创建 Maven 仓库"></a>创建 Maven 仓库</h1><p><img src="https://minio.kl.do/picture/images/typora/image-20220405192112470.png" alt="image-20220405192112470"></p>
<p>选择 maven2（hosted）</p>
<ul>
<li><p>proxy：这是代理方式，它是用来代理中央仓库的，例如我们依赖的包在本地仓库没有，就会到私服获取，私服没有的话，会到中央仓库先把包下载到这里，然后再下载到本地仓库；</p>
</li>
<li><p>hosted：指的是我们公司或团队内部的包，并且 hosted 类型的仓库会分为 releases 和 snapshots 两个，前者是正式版，后者一般是开发测试版；</p>
</li>
<li><p>group：它的目的就是把多个仓库组合起来，然后我们项目中只需要配置上这个类型的仓库地址，就可以把它里面组合的几个仓库都关联上。</p>
</li>
</ul>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220405192149963.png" alt="image-20220405192149963"></p>
<p>填写仓库名称 (其他配置按需配置)</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220405192515896.png" alt="image-20220405192515896"></p>
<h1 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h1><p><img src="https://minio.kl.do/picture/images/typora/image-20220405193645805.png" alt="image-20220405193645805"></p>
<p>创建好账户后就可以在右上角切换账户了。</p>
<h1 id="配置-Maven"><a href="#配置-Maven" class="headerlink" title="配置 Maven"></a>配置 Maven</h1><p>接着就是配置本地 maven &gt; conf 了，找到自己本机的 maven conf 下的 setting.xml 文件，添加如下信息：</p>
<p>注意是 services 节点下：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>likfees<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>likfees<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>



<h1 id="发布-Maven-插件到仓库"><a href="#发布-Maven-插件到仓库" class="headerlink" title="发布 Maven 插件到仓库"></a>发布 Maven 插件到仓库</h1><p>创建一个普通的 maven 项目，配置 pom.xml 如下：</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.likfees<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>likfees-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注意 &lt;version&gt;1.0-RELEASE&lt;/version&gt; 限定版本一定为RELEASE,因为上传的对应仓库的存储类型为RELEASE --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定仓库地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--此名称要和.m2/settings.xml中设置的ID一致 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>likfees<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://kl.do081/repository/maven-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发布代码Jar插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发布源码插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>发布插件	</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mvn deploy</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220405194811789.png" alt="image-20220405194811789"></p>
<p>查看发布的 Maven</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220405194955318.png" alt="image-20220405194955318"></p>
<h1 id="项目引入私服中依赖"><a href="#项目引入私服中依赖" class="headerlink" title="项目引入私服中依赖"></a>项目引入私服中依赖</h1><p><code>pom.xml</code></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.likfees<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>likfees-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>likfees<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://kl.do:8081/repository/maven-repo/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220405195510486.png" alt="image-20220405195510486"></p>
]]></content>
      <categories>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 Minio2024 + picgo + typora 图床</title>
    <url>/posts/4289372700.html</url>
    <content><![CDATA[<blockquote>
<p>中文文档 <a href="http://docs.minio.org.cn/docs/">http://docs.minio.org.cn/docs/</a></p>
</blockquote>
<h1 id="Minio-Docker-单节点单磁盘"><a href="#Minio-Docker-单节点单磁盘" class="headerlink" title="Minio Docker 单节点单磁盘"></a>Minio Docker 单节点单磁盘</h1><blockquote>
<p><a href="https://docs.min.io/docs/minio-docker-quickstart-guide.html">https://docs.min.io/docs/minio-docker-quickstart-guide.html</a></p>
<p>单节点部署又分为单磁盘、多磁盘部署，这里不推荐使用单磁盘，因为 minio 的纠删码 &gt;  算法要求至少 4 块磁盘，否则应用不了纠删码，保证不了数据安全以及高可用。</p>
</blockquote>
<p><a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/migrate-fs-gateway.html">https://min.io/docs/minio/linux/operations/install-deploy-manage/migrate-fs-gateway.html</a></p>
<p>从 <a href="https://github.com/minio/minio/releases/tag/RELEASE.2022-10-29T06-21-33Z">RELEASE.2022-10-29T06-21-33Z</a> 开始，MinIO 网关和相关的文件系统模式代码已被删除。仍在使用独立或文件系统 MinIO 模式升级到 <a href="https://github.com/minio/minio/releases/tag/RELEASE.2022-10-29T06-21-33Z">RELEASE.2022-10-29T06-21-33Z</a> 或更高版本的部署在尝试启动 MinIO 时收到错误。</p>
<p>错误信息为:</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ERROR Unable to use the drive /data: Drive /data: found backend type fs, expected xl or xl-single - to migrate to a supported backend visit https://min.io/docs/minio/linux/operations/install-deploy-manage/migrate-fs-gateway.html: Invalid arguments specified</span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意:</strong> <code>RELEASE.2022-10-24T18-35-07Z</code> 之前的版本升级需要迁移数据</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">wget http://dl.minio.org.cn/client/mc/release/linux-amd64/mc</span><br><span class="line"></span><br><span class="line">chmod +x ./mc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置minio2019的<span class="built_in">alias</span></span></span><br><span class="line">./mc alias set minio2019 http://localhost:9000 likfees UU65D4ec62JusfyW9y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置minio2023的<span class="built_in">alias</span></span></span><br><span class="line">./mc alias set minio2023 http://localhost:19000 justfongs UU65D4ec62JusfyW9y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">全量迁移</span></span><br><span class="line">./mc mirror minio2019 minio2023</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p ~/minio/data</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>-v /data/minio/data:/data \   持久化数据文件到本地 <code>/data/minio/data</code><br>-v /data/minio/config:/root/.minio \  映射配置目录到本地 <code>/data/minio/config</code>, 配置 HTTPS 需要<br>MINIO_ROOT_USER = 用户名 /accessKey<br>MINIO_ROOT_PASSWORD = 密码 /secretKey<br>MINIO_SERVER_URL=API 域名，通过 Web 管理域名登陆创建文件分享时会调用此 API 域名<br>–console-address ‘0.0.0.0:19001’: Minio 控制后台地址<br>–address ‘:19000’:Minio 的 API 地址端口</p>
</blockquote>
<p><strong>MINIO_DOMAIN</strong> 配置 MinIO 来支持自定义域名访问对象</p>
<ul>
<li>确保你的 SSL 证书支持 *.minio.<your-domain>。你可能需要一个通配符 SSL 证书。</your-domain></li>
<li>在 DNS 设置中，确保 *.minio.<your-domain> 指向你的服务器 IP。</your-domain></li>
<li>MinIO 的虚拟主机样式 URL 要求存储桶名称必须是域名的第一部分。例如，picture.<your-domain> 对应的是 “picture” 存储桶。</your-domain></li>
</ul>
<p>** HTTP 方式，HTTPS 请看 HTTPS 章节，我尝试使用 nginx 进行反向代理配置 HTTPS 失败了。。。 **</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name minio \</span><br><span class="line">  -p 19000:19000 \</span><br><span class="line">  -p 19001:19001 \</span><br><span class="line">  -v /data/minio:/data \</span><br><span class="line">  -v /data/minio/config:/root/.minio \</span><br><span class="line">  -e MINIO_ROOT_USER=&lt;username&gt; \</span><br><span class="line">  -e MINIO_ROOT_PASSWORD=&lt;password&gt; \</span><br><span class="line">  -e MINIO_SERVER_URL=http://127.0.0.1:19000 \</span><br><span class="line">  -e MINIO_BROWSER_REDIRECT_URL=http://&lt;your-domain&gt;:19001 \</span><br><span class="line">  -e MINIO_DOMAIN=&lt;your-domain&gt; \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  --restart always \</span><br><span class="line">  minio/minio:RELEASE.2024-07-16T23-46-41Z \</span><br><span class="line">  server /data --address ":19000" --console-address ":19001"</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><code>docker ps -a</code> 查看容器是否正常启动</li>
</ol>
<p>启动完成后 访问  <a href="http://ip:19000/">http://ip:19000</a>  即可进入 Minio</p>
<p><img src="https://minio.kl.do/picture/blog/100bf644d6ee557037794b1bca921d93.png" alt="https://minio.kl.do/picture/blog/100bf644d6ee557037794b1bca921d93.png"></p>
<h1 id="Docker-compose-搭建-HTTPS-节点"><a href="#Docker-compose-搭建-HTTPS-节点" class="headerlink" title="Docker-compose 搭建 HTTPS 节点"></a>Docker-compose 搭建 HTTPS 节点</h1><blockquote>
<p>条件为安装 docker-compose</p>
</blockquote>
<h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:RELEASE.2024-07-16T23-46-41Z</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">minio</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"19000:19000"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"19001:19001"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/minio:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/minio/config:/root/.minio</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_USER=&lt;username&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_ROOT_PASSWORD=&lt;password&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_SERVER_URL=https://127.0.0.1:19000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_BROWSER_REDIRECT_URL=https://&lt;your-domain&gt;:19000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MINIO_DOMAIN=&lt;your-domain&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">--address</span> <span class="string">":19000"</span> <span class="string">--console-address</span> <span class="string">":19001"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>修改 docker-compose.yaml 配置</li>
</ol>
<blockquote>
<p>MINIO_ROOT_USER = 用户名 /accessKey<br>MINIO_ROOT_PASSWORD = 密码 /secretKey<br>MINIO_SERVER_URL=API 域名<br>MINIO_BROWSER_REDIRECT_URL = 控制台访问地址</p>
</blockquote>
<p><strong>MINIO_DOMAIN</strong> 配置 MinIO 来支持自定义域名访问对象</p>
<ul>
<li>确保你的 SSL 证书支持 *.minio.<your-domain>。你可能需要一个通配符 SSL 证书。</your-domain></li>
<li>在 DNS 设置中，确保 *.minio.<your-domain> 指向你的服务器 IP。</your-domain></li>
<li>MinIO 的虚拟主机样式 URL 要求存储桶名称必须是域名的第一部分。例如，picture.<your-domain> 对应的是 “picture” 存储桶。</your-domain></li>
</ul>
<ol start="3">
<li>执行安装 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose pull</span><br><span class="line">docker-compose up</span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置-HTTPS-证书"><a href="#配置-HTTPS-证书" class="headerlink" title="配置 HTTPS 证书"></a>配置 HTTPS 证书</h2><blockquote>
<p>本教程使用宝塔面板进行配置，你也可以使用 Let’s Encrypt 申请免费证书</p>
</blockquote>
<ol>
<li>创建 minio 站点</li>
<li>添加主域名和桶泛域名</li>
</ol>
<p><img src="https://minio.kl.do/picture/blog/dd52ad0deb91667112e56a510bfce0e8.png" alt="https://minio.kl.do/picture/blog/dd52ad0deb91667112e56a510bfce0e8.png"></p>
<ol start="3">
<li><p>申请 Let’s Encrypt</p>
<p><img src="https://minio.kl.do/picture/blog/69a4e21b73d3a8843a9725b7b55e42ca.png" alt="https://minio.kl.do/picture/blog/69a4e21b73d3a8843a9725b7b55e42ca.png"></p>
<ol start="4">
<li><p>将证书部署到 minio</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd /data/minio/config/certs</span><br><span class="line">touch private.key</span><br><span class="line">touch public.crt</span><br></pre></td></tr></tbody></table></figure>

<p>分别将申请证书的 <strong>密钥 (KEY) <strong>和</strong>证书 (PEM 格式) <strong>填入</strong> private.key</strong> 和 <strong>public.crt</strong></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></tbody></table></figure>

<ol start="5">
<li><p>访问 MINIO</p>
<p>https://<your-domain></your-domain></p>
<p><img src="https://minio.kl.do/picture/blog/100bf644d6ee557037794b1bca921d93.png" alt="https://minio.kl.do/picture/blog/100bf644d6ee557037794b1bca921d93.png"></p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="新建-Bucket-并设为公共访问"><a href="#新建-Bucket-并设为公共访问" class="headerlink" title="新建 Bucket 并设为公共访问"></a>新建 Bucket 并设为公共访问</h1><p>PS: 如果部署的是单节点单磁盘 Minio 提示以下内容，并不影响使用但会丢失<strong>高可用</strong>特性。如果需要可以使用 docker-compose  安装分布式节点</p>
<p>默认情况下新建的 Buckets 是私有权限，文件也可以直接分享带有效期的临时链接。如果需要当图床使用，可以将 Buckets 修改为公开权限，就可以直接用 <a href="https://kl.do/test/abc.jpg%E5%BD%93%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8">https://kl.do/test/abc.jpg 当图床使用</a>.</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220330012912194.png" alt="image-20220330012912194"></p>
<p><strong>设为公共访问 Public</strong></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220330013131001.png" alt="image-20220330013131001"></p>
<h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p>官方文档 <a href="http://docs.minio.org.cn/docs/master/setup-nginx-proxy-with-minio">http://docs.minio.org.cn/docs/master/setup-nginx-proxy-with-minio</a></p>
<h2 id="标准的Root配置"><a href="#标准的Root配置" class="headerlink" title="标准的Root配置"></a>标准的 Root 配置</h2><p><strong>在文件 <code>/etc/nginx/sites-enabled</code> 中添加下面的内容，同时删除同一个目录中现有的 <code>default</code> 文件。</strong></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">server <span class="punctuation">{</span></span><br><span class="line"> listen <span class="number">80</span>;</span><br><span class="line"> server_name example.com;</span><br><span class="line"> location / <span class="punctuation">{</span></span><br><span class="line">   proxy_set_header Host $http_host;</span><br><span class="line">   proxy_pass http<span class="punctuation">:</span><span class="comment">//127.0.0.1:19000;</span></span><br><span class="line"> <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="非Root配置"><a href="#非Root配置" class="headerlink" title="非Root配置"></a>非 Root 配置</h2><p>注意:</p>
<ul>
<li>用你自己的服务名替换 <code>http://localhost:9000</code>。</li>
<li>用所需的路径替换 <code>files</code>。这不能是 <code>~^/minio</code>, 因为 <code>minio</code> 是 minio 中的保留字。</li>
<li>所使用的路径 (在本例中为 <code>files</code>) 按照惯例，应设置为 minio 所使用的存储桶的名称。</li>
<li>可以通过添加更多类似于上面定义的 location 定义来访问其他存储桶。</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">location ~^/files <span class="punctuation">{</span></span><br><span class="line">   proxy_buffering off;</span><br><span class="line">   proxy_set_header Host $http_host;</span><br><span class="line">   proxy_pass http<span class="punctuation">:</span><span class="comment">//127.0.0.1:19000;</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="宝塔面板"><a href="#宝塔面板" class="headerlink" title="宝塔面板"></a>宝塔面板</h2><p><strong>与非 Root 配置一样的</strong></p>
<p><img src="https://minio.kl.do/picture/blog/96b5c64d7a06512ffc3e558d4e5dca2d.png" alt="https://minio.kl.do/picture/blog/96b5c64d7a06512ffc3e558d4e5dca2d.png"></p>
<p>保存即可使用，后点击修改，将以下内容粘贴</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">location / <span class="punctuation">{</span></span><br><span class="line">    proxy_set_header Host $http_host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    proxy_set_header Origin $http_origin;</span><br><span class="line">    proxy_set_header Access-Control-Allow-Origin *;</span><br><span class="line"></span><br><span class="line">    proxy_connect_timeout <span class="number">300</span>;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line">    chunked_transfer_encoding off;</span><br><span class="line"></span><br><span class="line">    proxy_pass https<span class="punctuation">:</span><span class="comment">//127.0.0.1:19000;</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><a href="https://minio.kl.do/picture/images/avatar-y.png%EF%BC%9A">https://minio.kl.do/picture/images/avatar-y.png：</a> Minio 平台图片访问地址示例 </li>
<li><a href="https://picture.minio.kl.do/images/avatar.png%EF%BC%9A">https://picture.minio.kl.do/images/avatar.png：</a> 使用自定义域名访问 Minio 平台图片示例</li>
</ul>
<h1 id="PicGO"><a href="#PicGO" class="headerlink" title="PicGO"></a>PicGO</h1><h2 id="PicGo-App"><a href="#PicGo-App" class="headerlink" title="PicGo App"></a>PicGo App</h2><ol>
<li>下载 PicGo</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yay -S picgo-appimage</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装 minio 插件<br>可以在 picgo 中安装 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">https://github.com/Herbertzz/picgo-plugin-minio</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>设置图床参数</li>
</ol>
<p>测试上传即可</p>
<h2 id="PicGO-Core"><a href="#PicGO-Core" class="headerlink" title="PicGO-Core"></a>PicGO-Core</h2><p><img src="https://minio.kl.do/picture/images/typora/image-20230209092349035.png" alt="image-20230209092349035"></p>
<p>安装 minio 插件 </p>
<p>picgo 默认路径 <code>C:\Users\&lt;用户名&gt;\AppData\Roaming\Typora\picgo\win64\picgo.exe</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\&lt;用户名&gt;\AppData\Roaming\Typora\picgo\win64\picgo.exe install minio</span><br><span class="line">C:\Users\&lt;用户名&gt;\AppData\Roaming\Typora\picgo\win64\picgo.exe use uploader</span><br></pre></td></tr></tbody></table></figure>


<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"picBed"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"uploader"</span><span class="punctuation">:</span> <span class="string">"minio"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"current"</span><span class="punctuation">:</span> <span class="string">"minio"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"minio"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"endPoint"</span><span class="punctuation">:</span> <span class="string">"minio.kl.do"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"port"</span><span class="punctuation">:</span> <span class="string">"19000"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"useSSL"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"accessKey"</span><span class="punctuation">:</span> <span class="string">"用户名"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"secretKey"</span><span class="punctuation">:</span> <span class="string">"密码"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"bucket"</span><span class="punctuation">:</span> <span class="string">"picture"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"sameNameFileProcessingMode"</span><span class="punctuation">:</span> <span class="string">"覆盖"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"baseDir"</span><span class="punctuation">:</span> <span class="string">"files"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"customDomain"</span><span class="punctuation">:</span> <span class="string">"https://minio.kl.do"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"isAutoArchive"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"transformer"</span><span class="punctuation">:</span> <span class="string">"path"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"picgoPlugins"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"picgo-plugin-minio"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="PicGo-Cli-推荐使用"><a href="#PicGo-Cli-推荐使用" class="headerlink" title="PicGo-Cli 推荐使用"></a>PicGo-Cli 推荐使用</h2><blockquote>
<p>Linux 需要使用 Cli 工具，Windonws 则不需要</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install -g picgo</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>设置图床信息 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li>
<li>设定分支名:【 main 】 2021 年后 master 改为 main</li>
<li> 设定 Token: 粘贴上述生成的【 Token 】</li>
<li>指定存储路径：如【 images/ 】, 这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中</li>
<li>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，</li>
</ul>
<ol>
<li>安装插件 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">picgo install minio</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>配置 minio 参数 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">picgo set uploader</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220330020543381.png" alt="image-20220330020543381"></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220508112322393.png" alt="image-20220508112322393"></p>
<ol start="3">
<li>选择默认图床 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">picgo use uploader</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p><img src="https://minio.kl.do/picture/images/typora/image-20220330020916960.png" alt="image-20220330020916960"></p>
]]></content>
      <categories>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Minio</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 容器如何优雅地访问宿主机网络</title>
    <url>/posts/8604.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有时，我们需要在容器内访问宿主机上的某个服务，例如 MySQL。</p>
<h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>使用 host 模式启动服务。</p>
<p>在默认情况下，Docker 服务会采用桥接模式启动。这意味着 Docker 容器会使用 Docker 自建的虚拟网络，容器之间可以进行通信，但无法直接访问宿主机的网络服务。如果想要让宿主机或其他网络主机访问，Docker 容器需要暴露自身服务的端口映射。</p>
<p>然而，如果采用 host 模式启动，Docker 容器将与宿主机共享同一网络命名空间，即直接使用宿主机的网络。这样，Docker 容器就能使用宿主机的 IP 地址和端口，直接访问宿主机的网络服务。但是，host 模式也有其局限性，比如 Docker 容器之间无法直接通信，且 Docker 容器的网络性能可能会受到影响。</p>
<p>所以此时启动命令可以改成下边这样：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name one-api -d  \</span><br><span class="line">    --restart always \</span><br><span class="line">   --network host \</span><br><span class="line">    -e SQL_DSN="root:xxx@tcp(127.0.0.1:13306)/oneapi" \</span><br><span class="line">    -e TZ=Asia/Shanghai \</span><br><span class="line">    -v /data/one-api:/data \</span><br><span class="line">    justsong/one-api</span><br></pre></td></tr></tbody></table></figure>

<p>这样容器就能直接访问到宿主机的 3000 了。</p>
<p>然而，由于这种模式的限制，实际生产中很少有人使用，因此不建议采用这种方式。相反，我们更推荐采用第二种方案。</p>
<h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>docker 官方提供了一种支持方案，可通过指向 <code>host.docker.internal</code> 来指向宿主机的 IP。参见文档：<a href="https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host">从容器连接到主机上的服务</a></p>
<p><img src="https://minio.kl.do/picture/images/typora/2b3d76594d9c640972dc7d057c906ecf.png" alt="https://minio.kl.do/picture/images/typora/2b3d76594d9c640972dc7d057c906ecf.png"></p>
<p>但请注意，该方案存在一个局限性：它仅支持 Mac 和 Windows 桌面环境，并不适用于 Linux 系统，因此无法直接在 Linux 中使用。</p>
<p>于是，有人在官方提交了这个 issue：<a href="https://github.com/docker/for-linux/issues/264">Support host.docker.internal DNS name to host <strong>(opens new window)</strong></a>。</p>
<p>在其中的一个回答里，找到了一种可行方案：</p>
<p><img src="https://minio.kl.do/picture/images/typora/32b2895a2f667f7d33407ec0a30ae4d6.png" alt="https://minio.kl.do/picture/images/typora/32b2895a2f667f7d33407ec0a30ae4d6.png"></p>
<p>按照如上说明，可以使用如下命令进行启动：</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">docker run --name one-api -d  \</span><br><span class="line">    --restart always \</span><br><span class="line">    --add-host=<span class="string">"host.docker.internal:host-gateway"</span> \</span><br><span class="line">    -p 3000:3000 \</span><br><span class="line">    -e SQL_DSN=<span class="string">"root:xxx@tcp(localhost:13306)/oneapi"</span> \</span><br><span class="line">    -e TZ=Asia/Shanghai \</span><br><span class="line">    -v /data/one-api:/data \</span><br><span class="line">    justsong/one-api</span><br></pre></td></tr></tbody></table></figure>

<p>于是我在自己的 Mac 以及 Linux 都使用这种方案做了测试，发现是可以的。</p>
<p>需要注意的是，这个功能在 docker 版本过低的时候，可能支持的有问题，所以你的 docker 版本最好不低于 20。</p>
<p>如果使用的是 docker-compose，则通过添加如下内容进行配置：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extra_hosts:</span><br><span class="line">  - 'host.docker.internal:host-gateway'</span><br></pre></td></tr></tbody></table></figure>

<p>比如上边的项目改成 docker-compose 部署，就变成下边这样：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">version: '3.9'</span><br><span class="line">services:</span><br><span class="line">  one-api:</span><br><span class="line">    image: justsong/one-api</span><br><span class="line">    container_name: one-api</span><br><span class="line">    environment:</span><br><span class="line">      - SQL_DSN=root:xxx@tcp(localhost:13306)/oneapi</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    ports:</span><br><span class="line">      - "3000:3000"</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/one-api:/data</span><br><span class="line">    restart: always</span><br><span class="line">    extra_hosts:</span><br><span class="line">      - host.docker.internal:host-gateway</span><br></pre></td></tr></tbody></table></figure>



<p>现在，你可以在容器内使用 <code>host.docker.internal</code> 这个主机名来访问宿主机。例如，如果你想从容器中访问宿主机上的一个服务，可以使用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl http://host.docker.internal:PORT</span><br></pre></td></tr></tbody></table></figure>

<p>其中 <code>PORT</code> 是宿主机上运行的服务的端口。</p>
]]></content>
      <categories>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 安装 Bitwarden 密码管理器</title>
    <url>/posts/188783210.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随之各大密码管理工具都开始订阅制付费，很多伙伴都转移到 Bitwarden</p>
<p>当然，密码敏感数据放在自己手上才是最安全的。</p>
<p>本教程不使用官方 Bitwarden 镜像，官方对服务器要求较高，这里使用到了 <code>vaultwarden/server</code> 非官方的镜像，更加的轻量。</p>
<p>docker hub:<a href="https://hub.docker.com/r/vaultwarden/server">https://hub.docker.com/r/vaultwarden/server</a></p>
<p>github wik:<a href="https://github.com/dani-garcia/vaultwarden/wiki">https://github.com/dani-garcia/vaultwarden/wiki</a></p>
<h1 id="什么是-Vaultwarden"><a href="#什么是-Vaultwarden" class="headerlink" title="什么是 Vaultwarden"></a>什么是 Vaultwarden</h1><blockquote>
<p>2021 年 4 月 27 日:bitwarden_rs 项目更名为 Vaultwarden</p>
</blockquote>
<p>Vaultwarden 是一个用于本地搭建 Bitwarden 服务器的第三方 Docker 项目。兼容 Bitwarden 官方客户端，仅在部署的时候使用 Vaultwarden 镜像，桌面端、移动端、浏览器扩展等客户端均使用 Bitwarden 官方的客户端。</p>
<p>Vaultwarden 很轻量，对于不希望使用官方的占用大量资源的自托管部署而言，它是理想的选择。</p>
<p>docker compose 在 Github 的地址:<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a></p>
<p>vaultwarden 在 Github 的地址:<a href="https://github.com/dani-garcia/vaultwarden">https://github.com/dani-garcia/vaultwarden</a></p>
<p>vaultwarden 在 docker hub 的地址:<a href="https://hub.docker.com/r/vaultwarden/server">https://hub.docker.com/r/vaultwarden/server</a></p>
<p>vaulwarden 官方文档:<a href="https://github.com/dani-garcia/vaultwarden/wiki">https://github.com/dani-garcia/vaultwarden/wiki</a></p>
<p>vaultwarden 官方文档中文翻译版:<a href="https://rs.ppgg.in/">https://rs.ppgg.in/</a></p>
<h1 id="申请-SSL-证书"><a href="#申请-SSL-证书" class="headerlink" title="申请 SSL 证书"></a>申请 SSL 证书</h1><p>具体查看:<a href="https://blog.kl.do/posts/167770507.html">https://blog.kl.do/posts/167770507.html</a></p>
<h1 id="安装-Bitwarden"><a href="#安装-Bitwarden" class="headerlink" title="安装 Bitwarden"></a>安装 Bitwarden</h1><blockquote>
<p>自定义一些参数，加入 HTTPS 支持等</p>
<p>SIGNUPS_ALLOWED=false  不允许用户注册<br>INVITATIONS_ALLOWED=true 开启邀请注册<br>ADMIN_TOKEN 启用管理页面，需要设置一组身份验证令牌，运行 <code>openssl rand -base64 48</code><br>LOG_FILE 日志文件路径<br>LOG_LEVEL=warn -e EXTENDED_LOGGING=true  日志等级<br>TZ=Asia/Shanghai: 设置时区<br>-v /data/bitwarden/data:/data  持久化数据<br>-p 8443:80: 指定容器的 80 端口暴露在宿主机的 8443 端口上<br>-p 3012:3012 指定容器的 3012 端口暴露在宿主机的 3012 端口上 用于 websocket 通知</p>
</blockquote>
<ol>
<li>创建持久化目录 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /data/bitwarden/data  /data/bitwarden/logs</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>拉取镜像 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker pull vaultwarden/server</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>生成 Admin Token</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">`docker run --rm -it vaultwarden/server /vaultwarden hash`</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>启动镜像 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name bitwarden \</span><br><span class="line">    -e SIGNUPS_ALLOWED=false \</span><br><span class="line">    -e INVITATIONS_ALLOWED=true \</span><br><span class="line">    -e ADMIN_TOKEN=生成的加密 AdminToken \</span><br><span class="line">    -e DOMAIN=https://bitwarden.kl.do \</span><br><span class="line">    -e WEBSOCKET_ENABLED=true \</span><br><span class="line">    -e LOG_FILE=/data/vaultwarden.log \</span><br><span class="line">    -e LOG_LEVEL=warn -e EXTENDED_LOGGING=true \</span><br><span class="line">    -e TZ=Asia/Shanghai \</span><br><span class="line">    -v /data/bitwarden/data:/data \</span><br><span class="line">    -p 8443:80 \</span><br><span class="line">    -p 3012:3012 \</span><br><span class="line">    vaultwarden/server:latest</span><br></pre></td></tr></tbody></table></figure>

<h1 id="配置-Nginx-Https-反向代理"><a href="#配置-Nginx-Https-反向代理" class="headerlink" title="配置 Nginx Https 反向代理"></a>配置 Nginx Https 反向代理</h1><p>使用宝塔面板添加反向代理，创建成功后在点击配置文件，添加 websockt 3012 端口的反向代理</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">location ^~ /notifications/hub {</span><br><span class="line">      proxy_pass http://1.14.160.174:3012;</span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_set_header Connection "upgrade";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location ^~ /notifications/hub/negotiate {</span><br><span class="line">      proxy_pass http://1.14.160.174:8443;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p>参考宝塔生成的配置文件:</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PROXY-START/</span></span><br><span class="line"></span><br><span class="line">location ^~ /</span><br><span class="line">{</span><br><span class="line">    proxy_pass http://1.14.160.174:8443;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"></span><br><span class="line">    add_header X-Cache $upstream_cache_status;</span><br><span class="line"></span><br><span class="line">    #Set Nginx Cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    set $static_filepV79EK8X 0;</span><br><span class="line">    if ( $uri ~* "\.(gif|png|jpg|css|js|woff|woff2)$" )</span><br><span class="line">    {</span><br><span class="line">        set $static_filepV79EK8X 1;</span><br><span class="line">        expires 12h;</span><br><span class="line">        }</span><br><span class="line">    if ( $static_filepV79EK8X = 0 )</span><br><span class="line">    {</span><br><span class="line">    add_header Cache-Control no-cache;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location ^~ /notifications/hub {</span><br><span class="line">      proxy_pass http://1.14.160.174:3012;</span><br><span class="line">      proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">      proxy_set_header Connection "upgrade";</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    location ^~ /notifications/hub/negotiate {</span><br><span class="line">      proxy_pass http://1.14.160.174:8443;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">                                                                                                                                                                         1,1           Top</span><br></pre></td></tr></tbody></table></figure>

<p><strong>重启 Nginx 服务器！！！</strong></p>
<p>访问 Bitwarden Admin:<a href="https://bitwarden.kl.do/admin">https://bitwarden.kl.do/admin</a></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809155420890.png" alt="image-20220809155420890"></p>
<p>输入之前创建的 ADMIN_TOKEN 即可登录</p>
<h1 id="配置-Bitwarden"><a href="#配置-Bitwarden" class="headerlink" title="配置 Bitwarden"></a>配置 Bitwarden</h1><h2 id="配置-SMTP-服务器"><a href="#配置-SMTP-服务器" class="headerlink" title="配置 SMTP 服务器"></a>配置 SMTP 服务器</h2><p>填写好 SMTP 参数后点击保存，然后使用测试功能测试邮件是否发送成功。</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809160351499.png" alt="image-20220809160351499"></p>
<h1 id="发送邀请邮件"><a href="#发送邀请邮件" class="headerlink" title="发送邀请邮件"></a>发送邀请邮件</h1><p><img src="https://minio.kl.do/picture/images/typora/image-20220809160642496.png" alt="image-20220809160642496"></p>
<p>通过邮件的链接进行用户注册</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809160939788.png" alt="image-20220809160939788"></p>
<h1 id="chrome-插件使用"><a href="#chrome-插件使用" class="headerlink" title="chrome 插件使用"></a>chrome 插件使用</h1><p><a href="https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb">https://chrome.google.com/webstore/detail/bitwarden-free-password-m/nngceckbapebfimnlniiiahkandclblb</a></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809161037235.png" alt="image-20220809161037235"></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809161102038.png" alt="image-20220809161102038"></p>
<h1 id="检查-WebSocket-通知是否正常"><a href="#检查-WebSocket-通知是否正常" class="headerlink" title="检查 WebSocket 通知是否正常"></a>检查 WebSocket 通知是否正常</h1><p>websocket 状态 101 即正常，此时在其他端修改数据会自动同步到所有平台</p>
<p>如果状态在等待中，请检查 3012 端口的反向代理配置，放行 3012 端口，重启 Nginx</p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809165043302.png" alt="image-20220809165043302"></p>
]]></content>
      <categories>
        <category>Container</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos 分布式配置中心配置</title>
    <url>/posts/4218605846.html</url>
    <content><![CDATA[<h1 id="Docker-安装-Nacos"><a href="#Docker-安装-Nacos" class="headerlink" title="Docker 安装 Nacos"></a>Docker 安装 Nacos</h1><p><code>JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m</code> 如果你的内存足够大则不需要设置，使用默认即可</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name nacos-standalone -p 8848:8848 -e MODE=standalone -e JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m -d nacos/nacos-server:latest</span><br></pre></td></tr></tbody></table></figure>

<h1 id="访问Nacos"><a href="#访问Nacos" class="headerlink" title="访问Nacos"></a>访问 Nacos</h1><blockquote>
<p>  如果访问失败 可尝试重启系统！</p>
</blockquote>
<p>http:// 你的 docker ip:8848/nacos</p>
<p>账号：nacos</p>
<p>密码：nacos</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220225190826837.png" alt="image-20220225190826837"></p>
<h1 id="持久化的-Mysql-中"><a href="#持久化的-Mysql-中" class="headerlink" title="持久化的 Mysql 中"></a>持久化的 Mysql 中</h1><blockquote>
<p>  简单使用不需要配置，在生产环境中需要配置</p>
</blockquote>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>Mysql 5.7 以上</li>
</ul>
<p><strong>注意，mysql5.6 版本会报错：Specified key was too long; max key length is 767 bytes，原因是 mysql5.6 最长的索引是 767，要用 Mysql5.7 以上版本解决该问题。</strong></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<p>目前 docker Nacos 版本为 2.3.0</p>
<ol>
<li><p>下载 对应版本的 Nacos 获得配置文件中的 <code>conf/nacos-mysql.sql</code></p>
<p> <img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220327172804381.png" alt="image-20220327172804381"></p>
</li>
</ol>
<p>２．创建数据库 <code>nacos_config</code> 并到导入 <code>nacos-mysql.sql</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220327180728038.png" alt="image-20220327180728038"></p>
<ol start="3">
<li>进入容器中修改配置文件 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br><span class="line">sudo docker exec -it 0d8 /bin/bash</span><br><span class="line">vim conf/application.properties</span><br></pre></td></tr></tbody></table></figure>
<p>修改以下内容</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://likfees.cn:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220327182744186.png" alt="image-20220327182744186"></p>
<p>登录 Nacos 新建命名空间查看数据库是否成功！ </p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220327182910811.png" alt="image-20220327182910811"></p>
<h1 id="Nacos-的使用"><a href="#Nacos-的使用" class="headerlink" title="Nacos 的使用"></a>Nacos 的使用</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>可以隔离配置集，将某些配置集放到某一个命名空间之下。</p>
<p>命名空间我们一般用来区分 微服务</p>
<h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><p>抛出一个问题： 你现在确实能够隔离微服务，但是不同的微服务的开发、测试、生产环境如何区别，</p>
<p>组可以用来区别区别开发、测试、生产环境</p>
<h2 id="dataid-配置集"><a href="#dataid-配置集" class="headerlink" title="dataid - 配置集"></a>dataid - 配置集</h2><p>一个配置集就是一个配置文件， 实际上可以更灵活</p>
<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><blockquote>
<p>  <strong><a href="https://github.com/nacos-group/nacos-sdk-python">https://github.com/nacos-group/nacos-sdk-python</a></strong></p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_cfg</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"配置发生了变化"</span>)</span><br><span class="line">    <span class="keyword">global</span> config</span><br><span class="line">    config = json.dumps(args)</span><br><span class="line">    <span class="built_in">print</span>(config)</span><br><span class="line"> </span><br><span class="line">NACOS = {</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"172.17.0.1"</span>,</span><br><span class="line">    <span class="string">"port"</span>: <span class="number">8848</span>,</span><br><span class="line">    <span class="string">"user"</span>: <span class="string">"nacos"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"000"</span>,</span><br><span class="line">    <span class="string">"name_space"</span>: <span class="string">"7319546d-df6f-4366-b1cc-005c41f3e054"</span>,  <span class="comment"># 命名空间</span></span><br><span class="line">    <span class="string">"group"</span>: <span class="string">"dev"</span>,</span><br><span class="line">    <span class="string">"user_srv_data_id"</span>: <span class="string">"user-srv"</span>, <span class="comment"># 数据集id</span></span><br><span class="line">    <span class="string">"db_data_id"</span>: <span class="string">"db"</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">nacos_client = nacos.NacosClient(<span class="string">f'<span class="subst">{NACOS[<span class="string">"host"</span>]}</span>:<span class="subst">{NACOS[<span class="string">"port"</span>]}</span>'</span>, namespace=NACOS[<span class="string">"name_space"</span>])</span><br><span class="line"><span class="comment"># nacos 返回的是字符串，需要使用json.loads加载</span></span><br><span class="line">config = json.loads(nacos_client.get_config(NACOS[<span class="string">"user_srv_data_id"</span>], NACOS[<span class="string">"group"</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听配置文件修改  PS：如果是Window系统可能会出现错误，需要在 main方法中调用</span></span><br><span class="line">nacos_client.add_config_watcher(NACOS[<span class="string">"user_srv_data_id"</span>], NACOS[<span class="string">"group"</span>], update_cfg)</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><blockquote>
<p>   <a href="https://github.com/nacos-group/nacos-sdk-go">https://github.com/nacos-group/nacos-sdk-go</a></p>
</blockquote>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 从 Nacos 中获取配置信息</span></span><br><span class="line">	<span class="comment">//create clientConfig</span></span><br><span class="line">	clientConfig := constant.ClientConfig{</span><br><span class="line">		NamespaceId:        命名空间ID,</span><br><span class="line">		TimeoutMs:           <span class="number">5000</span>,</span><br><span class="line">		NotLoadCacheAtStart: <span class="literal">true</span>,</span><br><span class="line">		LogDir:              <span class="string">"tmp/nacos/log"</span>,</span><br><span class="line">		CacheDir:            <span class="string">"tmp/nacos/cache"</span>,</span><br><span class="line">		LogLevel:            <span class="string">"debug"</span>,</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// At least one ServerConfig</span></span><br><span class="line">	serverConfigs := []constant.ServerConfig{</span><br><span class="line">		{</span><br><span class="line">			IpAddr: global.NacosConfig.Host, <span class="comment">// nacos服务地址</span></span><br><span class="line">			Port:   global.NacosConfig.Port, <span class="comment">// nacos服务端口</span></span><br><span class="line">		},</span><br><span class="line">	}</span><br><span class="line">	configClient, err := clients.CreateConfigClient(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>{}{</span><br><span class="line">		<span class="string">"serverConfigs"</span>: serverConfigs,</span><br><span class="line">		<span class="string">"clientConfig"</span>:  clientConfig,</span><br><span class="line">	})</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	content, err := configClient.GetConfig(vo.ConfigParam{</span><br><span class="line">		DataId: global.NacosConfig.UserApiDataId, <span class="comment">// 数据集ID</span></span><br><span class="line">		Group:  global.NacosConfig.Group, <span class="comment">// 组</span></span><br><span class="line">	})</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		zap.S().Fatalw(<span class="string">"获取 Nacos 配置信息失败"</span>, err.Error())</span><br><span class="line">	}</span><br><span class="line">	<span class="comment">// 解析获取到的Json文本</span></span><br><span class="line">	<span class="comment">// &amp;global.Config 为配置文件结构体</span></span><br><span class="line">	err = json.Unmarshal([]<span class="type">byte</span>(content), &amp;global.Config)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		zap.S().Fatalw(<span class="string">"解析 Nacos 配置信息失败"</span>, err.Error())</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听配置文件</span></span><br><span class="line">	err = configClient.ListenConfig(vo.ConfigParam{</span><br><span class="line">		DataId: global.NacosConfig.UserApiDataId,</span><br><span class="line">		Group:  global.NacosConfig.Group,</span><br><span class="line">		OnChange: <span class="function"><span class="keyword">func</span><span class="params">(namespace, group, dataId, data <span class="type">string</span>)</span></span> {</span><br><span class="line">			fmt.Println(global.Config.Services.UserSrvName)</span><br><span class="line">			err = json.Unmarshal([]<span class="type">byte</span>(data), &amp;global.Config)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">				zap.S().Fatalw(<span class="string">"文件发生变化，解析 Nacos 配置信息失败"</span>, err.Error())</span><br><span class="line">			}</span><br><span class="line">			fmt.Println(global.Config.Services.UserSrvName)</span><br><span class="line">		},</span><br><span class="line">	})</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		zap.S().Fatalw(<span class="string">"监听配置文件出现异常"</span>, err.Error())</span><br><span class="line">	}</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>gRPC Golang Python 优雅中断服务</title>
    <url>/posts/4202137968.html</url>
    <content><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 将服务启动放入协程中，当接收到终止信号后，主进程销毁，协称也会随着销毁</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">	zap.S().Infof(<span class="string">"%s 服务启动！ http://%s:%d"</span>, global.Config.Name, global.Config.Host, global.Config.Port)</span><br><span class="line">	<span class="keyword">if</span> err := r.Run(fmt.Sprintf(<span class="string">":%d"</span>, global.Config.Port)); err != <span class="literal">nil</span> {</span><br><span class="line">		zap.S().Panicf(<span class="string">"服务启动失败, port:%d,err:%s"</span>, global.Config.Port, err.Error())</span><br><span class="line">	}</span><br><span class="line">}()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务</span></span><br><span class="line">registerClient := consul.NewRegistryClient(global.Config.Consul.Host, global.Config.Consul.Port)</span><br><span class="line">sc := global.Config</span><br><span class="line">serviceId := fmt.Sprintf(<span class="string">"%s"</span>, uuid.NewV4())</span><br><span class="line">err := registerClient.Register(sc.Host, sc.Port, sc.Name, serviceId, sc.Consul.Tags)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">	zap.S().Fatalw(<span class="string">"服务注册失败"</span>, err.Error())</span><br><span class="line">}</span><br><span class="line">zap.S().Infow(<span class="string">"服务注册成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优雅的退出程序</span></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)</span><br><span class="line">&lt;-quit</span><br><span class="line">zap.S().Infow(<span class="string">"服务注销中..."</span>)</span><br><span class="line"><span class="comment">// 等待信号，如果接受到信号执行以下内容</span></span><br><span class="line">err = registerClient.DeRegister(serviceId)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">	zap.S().Fatalw(<span class="string">"服务注销失败"</span>, err.Error())</span><br><span class="line">}</span><br><span class="line">zap.S().Infow(<span class="string">"服务注销成功"</span>)</span><br></pre></td></tr></tbody></table></figure>



<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"><span class="keyword">from</span> loguru <span class="keyword">import</span> logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为在终端上运行会找不到根目录所以需要指明项目根目录</span></span><br><span class="line">BASE_PATH = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))</span><br><span class="line">sys.path.insert(<span class="number">0</span>, BASE_PATH)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> user_srv.proto <span class="keyword">import</span> user_pb2, user_pb2_grpc</span><br><span class="line"><span class="keyword">from</span> user_srv.handler.user <span class="keyword">import</span> UserService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理中断函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_exit</span>(<span class="params">signal, frame</span>):</span><br><span class="line">    logger.info(<span class="string">"grpc server exit"</span>)</span><br><span class="line">   </span><br><span class="line">   	<span class="comment"># 服务注销逻辑.......</span></span><br><span class="line">    </span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serve</span>():</span><br><span class="line">    logger.add(<span class="string">"logs/user_srv_{time}.log"</span>)</span><br><span class="line">    <span class="comment"># 多线程启动</span></span><br><span class="line">    server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class="number">10</span>))</span><br><span class="line">    <span class="comment"># 注册服务</span></span><br><span class="line">    user_pb2_grpc.add_UserServicer_to_server(UserService(), server)</span><br><span class="line">    <span class="comment"># 端口</span></span><br><span class="line">    server.add_insecure_port(<span class="string">"[::]:50051"</span>)</span><br><span class="line">    <span class="comment"># 监听退出信号</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        windows下支持的信号是有限的：</span></span><br><span class="line"><span class="string">            SIGINT ctrl+C终端</span></span><br><span class="line"><span class="string">            SIGTERM kill发出的软件终止</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    signal.signal(signal.SIGINT, on_exit)</span><br><span class="line">    signal.signal(signal.SIGTERM, on_exit)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">f"启动服务：http://127.0.0.1:50051"</span>)</span><br><span class="line">    server.start()</span><br><span class="line">    server.wait_for_termination()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    logging.basicConfig()</span><br><span class="line">    serve()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务之 gRpc 负载均衡</title>
    <url>/posts/4248709937.html</url>
    <content><![CDATA[<h1 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h1><h2 id="集中式load-balance"><a href="#集中式load-balance" class="headerlink" title="集中式load balance"></a>集中式 load balance</h2><p>集中式 LB 方案，如下图。首先，服务的消费方和提供方不直接耦合，而是在服务消费者和服务提供者之间有一个独立的 LB（LB 通常是专门的硬件设备如 F5，或者基于软件如 LVS，HAproxy 等实现）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220222151158046.png" alt="image-20220222151158046"></p>
<p>LB 上有所有服务的地址映射表，通常由运维配置注册，当服务消费方调用某个目标服务时，它向 LB 发起请求，由 LB 以某种策略（比如 Round-Robin）做负载均衡后将请求转发到目标服务。</p>
<p>LB 一般具备健康检查能力，能自动摘除不健康的服务实例。</p>
<p>服务消费方如何发现 LB 呢？通常的做法是通过 DNS，运维人员为服务配置一个 DNS 域名，这个域名指向 LB。</p>
<p>这种方案基本可以否决，因为它有致命的缺点：所有服务调用流量都经过 load balance 服务器，所以 load balance 服务器成了系统的单点，一旦 LB 发生故障对整个系统的影响是灾难性的。为了解决这个问题，必然需要对这个 load balance 部件做分布式处理（部署多个实例，冗余，然后解决一致性问题等全家桶解决方案），但这样做会徒增非常多的复杂度。</p>
<h2 id="进程内load-balance"><a href="#进程内load-balance" class="headerlink" title="进程内load balance"></a>进程内 load balance</h2><p>进程内 load balance。将 load balance 的功能和算法以 sdk 的方式实现在客户端进程内。先看架构图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220222151145350.png" alt="image-20220222151145350"></p>
<p>可看到引入了第三方：服务注册中心。它做两件事：</p>
<ol>
<li><ol>
<li>维护服务提供方的节点列表，并检测这些节点的健康度。检测的方式是：每个节点部署成功，都通知服务注册中心；然后一直和注册中心保持心跳。</li>
<li>允许服务调用方注册感兴趣的事件，把服务提供方的变化情况推送到服务调用方。</li>
</ol>
</li>
</ol>
<p>这种方案下，整个 load balance 的过程是这样的：</p>
<ol>
<li><ol>
<li>服务注册中心维护所有节点的情况。</li>
<li>任何一个节点想要订阅其他服务提供方的节点列表，向服务注册中心注册。</li>
<li>服务注册中心将服务提供方的列表（以长连接的方式）推送到消费方。</li>
<li>消费方接收到消息后，在本地维护一份这个列表，并自己做 load balance。</li>
</ol>
</li>
</ol>
<p>可见，服务注册中心充当什么角色？它是唯一一个知道整个集群内部所有的节点情况的中心。所以对它的可用性要求会非常高，这个组件可以用 Zookeeper 实现。</p>
<p>这种方案的缺点是：每个语言都要研究一套 sdk，如果公司内的服务使用的语言五花八门的话，这方案的成本会很高。第二点是：后续如果要对客户库进行升级，势必要求服务调用方修改代码并重新发布，所以该方案的升级推广有不小的阻力。</p>
<h2 id="独立进程load-balance"><a href="#独立进程load-balance" class="headerlink" title="独立进程load balance"></a>独立进程 load balance</h2><p>该方案是针对第二种方案的不足而提出的一种折中方案，原理和第二种方案基本类似，不同之处是，他将 LB 和服务发现功能从进程内移出来，变成主机上的一个独立进程，主机上的一个或者多个服务要访问目标服务时，他们都通过同一主机上的独立 LB 进程做服务发现和负载均衡。如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220222151119510.png" alt="image-20220222151119510"></p>
<p>这个方案解决了上一种方案的问题，不需要为不同语言开发客户库，LB 的升级不需要服务调用方改代码。</p>
<p>但新引入的问题是：这个组件本身的可用性谁来维护？还要再写一个 watchdog 去监控这个组件？另外，多了一个环节，就多了一个出错的可能，线上出问题了，也多了一个需要排查的环节。</p>
<h1 id="常见的负载均衡算法"><a href="#常见的负载均衡算法" class="headerlink" title="常见的负载均衡算法"></a>常见的负载均衡算法</h1><p>在分布式系统中，多台服务器同时提供一个服务，并统一到服务配置中心进行管理，消费者通过查询服务配置中心，获取到服务到地址列表，需要选取其中一台来发起 RPC 远程调用。如何选择，则取决于具体的负载均衡算法，对应于不同的场景，选择的负载均衡算法也不尽相同。负载均衡算法的种类有很多种，常见的负载均衡算法包括轮询法、随机法、源地址哈希法、加权轮询法、加权随机法、最小连接法等，应根据具体的使用场景选取对应的算法。</p>
<h2 id="轮询（Round-Robin）法"><a href="#轮询（Round-Robin）法" class="headerlink" title="轮询（Round Robin）法"></a>轮询（Round Robin）法</h2><p>轮询很容易实现，将请求按顺序轮流分配到后台服务器上，均衡的对待每一台服务器，而不关心服务器实际的连接数和当前的系统负载。</p>
<h2 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h2><p>通过系统随机函数，根据后台服务器列表的大小值来随机选取其中一台进行访问。由概率概率统计理论可以得知，随着调用量的增大，其实际效果越来越接近于平均分配流量到后台的每一台服务器，也就是轮询法的效果。</p>
<h2 id="源地址哈希法"><a href="#源地址哈希法" class="headerlink" title="源地址哈希法"></a>源地址哈希法</h2><p>源地址哈希法的思想是根据服务消费者请求客户端的 IP 地址，通过哈希函数计算得到一个哈希值，将此哈希值和服务器列表的大小进行取模运算，得到的结果便是要访问的服务器地址的序号。采用源地址哈希法进行负载均衡，相同的 IP 客户端，如果服务器列表不变，将映射到同一个后台服务器进行访问。</p>
<h2 id="加权轮询（Weight-Round-Robin）法"><a href="#加权轮询（Weight-Round-Robin）法" class="headerlink" title="加权轮询（Weight Round Robin）法"></a>加权轮询（Weight Round Robin）法</h2><p>不同的后台服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不一样。跟配置高、负载低的机器分配更高的权重，使其能处理更多的请求，而配置低、负载高的机器，则给其分配较低的权重，降低其系统负载，加权轮询很好的处理了这一问题，并将请求按照顺序且根据权重分配给后端。</p>
<h2 id="加权随机（Weight-Random）法"><a href="#加权随机（Weight-Random）法" class="headerlink" title="加权随机（Weight Random）法"></a>加权随机（Weight Random）法</h2><p>加权随机法跟加权轮询法类似，根据后台服务器不同的配置和负载情况，配置不同的权重。不同的是，它是按照权重来随机选取服务器的，而非顺序。</p>
<h2 id="最小连接数法"><a href="#最小连接数法" class="headerlink" title="最小连接数法"></a>最小连接数法</h2><p>前面我们费尽心思来实现服务消费者请求次数分配的均衡，我们知道这样做是没错的，可以为后端的多台服务器平均分配工作量，最大程度地提高服务器的利用率，但是，实际上，请求次数的均衡并不代表负载的均衡。因此我们需要介绍最小连接数法，最小连接数法比较灵活和智能，由于后台服务器的配置不尽相同，对请求的处理有快有慢，它正是根据后端服务器当前的连接情况，动态的选取其中当前积压连接数最少的一台服务器来处理当前请求，尽可能的提高后台服务器利用率，将负载合理的分流到每一台服务器。</p>
<h1 id="gRpc-负载均衡"><a href="#gRpc-负载均衡" class="headerlink" title="gRpc 负载均衡"></a>gRpc 负载均衡</h1><blockquote>
<p><a href="https://github.com/grpc/grpc/blob/master/doc/load-balancing.md">https://github.com/grpc/grpc/blob/master/doc/load-balancing.md</a></p>
</blockquote>
<h2 id="Go-Web-使用负载均衡"><a href="#Go-Web-使用负载均衡" class="headerlink" title="Go Web 使用负载均衡"></a>Go Web 使用负载均衡</h2><blockquote>
<p><a href="https://github.com/mbobakov/grpc-consul-resolver">https://github.com/mbobakov/grpc-consul-resolver</a></p>
</blockquote>
<p>注册两个用户 gRpc 服务实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220222161039288.png" alt="image-20220222161039288"></p>
<p><strong>一定要引入</strong></p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line">_ <span class="string">"github.com/mbobakov/grpc-consul-resolver"</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"context"</span></span><br><span class="line">	<span class="string">"demo1/grpc_resolve/proto"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	_ <span class="string">"github.com/mbobakov/grpc-consul-resolver"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc"</span></span><br><span class="line">	<span class="string">"google.golang.org/grpc/credentials/insecure"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">	conn, err := grpc.Dial(<span class="string">"consul://172.17.0.1:8500/user-srv?wait=15s"</span>,</span><br><span class="line">		grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">		grpc.WithDefaultServiceConfig(<span class="string">`{"loadBalancingPolicy": "round_robin"}`</span>),</span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	}</span><br><span class="line">	client := proto.NewUserClient(conn)</span><br><span class="line">	<span class="comment">// 因为负载均衡实现是进程中的，必须要进程结束前发起请求才被内负载均衡</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ {</span><br><span class="line">		list, err := client.GetUserList(context.Background(), &amp;proto.PageInfo{Page: <span class="number">1</span>, Limit: <span class="number">2</span>})</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">			<span class="built_in">panic</span>(err)</span><br><span class="line">		}</span><br><span class="line">		fmt.Println(list)</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>负载均衡完成</p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220222161339730.png" alt="image-20220222161339730"></p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 下配置多台服务器时间同步</title>
    <url>/posts/2458075637.html</url>
    <content><![CDATA[<blockquote>
<p>现有三台虚拟机，如果虚拟机之间实间差距太大就会导致一些服务异常 t</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">192.168.139.121 master</span><br><span class="line">192.168.139.122 slave1</span><br><span class="line">192.168.139.123 slave2</span><br></pre></td></tr></tbody></table></figure>

<h1 id="安装-NTP"><a href="#安装-NTP" class="headerlink" title="安装 NTP"></a>安装 NTP</h1><p>先查看 ntp 是否已经安装：<code>rpm -qa | grep ntp</code><br>如果没有 <code>yum -y install ntp</code></p>
<p>安装完成后设置 ntp 开机启动并启动 ntp，如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">systemctl enable ntpd</span><br><span class="line"></span><br><span class="line">systemctl start ntpd</span><br></pre></td></tr></tbody></table></figure>

<h1 id="主服务器均能连接外网"><a href="#主服务器均能连接外网" class="headerlink" title="主服务器均能连接外网"></a>主服务器均能连接外网</h1><blockquote>
<p>所有机器都能够访问外网的话，我们可以使用 ntpdate 来进行时间同步<br>前提是我们服务器上面有 ntp ，如果没有的话可以使用 yum 安装</p>
</blockquote>
<h2 id="同步网络时间"><a href="#同步网络时间" class="headerlink" title="同步网络时间"></a>同步网络时间</h2><blockquote>
<p>其中 ntp 一种网络时间协议，ntpdate 是时间同步软件的命令， ntp.api.bz 是个稳定的 ntp 时间同步服务器集群。</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ntpdate -u ntp.api.bz</span><br><span class="line"># 或</span><br><span class="line">ntpdate -u us.pool.ntp.org</span><br></pre></td></tr></tbody></table></figure>

<h2 id="编辑定时任务"><a href="#编辑定时任务" class="headerlink" title="编辑定时任务"></a>编辑定时任务</h2><blockquote>
<p>当然你可以使用 linux 系统的定时任务来设置每隔多长时间同步一次，使用 linux 系统下使用 crontab -e 可以编辑任务。<br>这里我是用 crontab -e 添加了一个定时每分钟同步时间的任务 ，然后将执行日志写到了 /tmp/dateSync.log 下面</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"># 将以下内容写入 &gt;&gt; 将日志写入到 /tmp/dateSync.log</span><br><span class="line">*/1 * * * * /usr/sbin/ntpdate -u us.pool.ntp.org</span><br></pre></td></tr></tbody></table></figure>

<p>crontab 规则在线生成：<a href="https://www.bejson.com/othertools/cron/">https://www.bejson.com/othertools/cron/</a><br><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211009181102094-2071744300.png" alt="image"></p>
<h1 id="NTP-服务器"><a href="#NTP-服务器" class="headerlink" title="NTP 服务器"></a>NTP 服务器</h1><blockquote>
<p>我们把这台能连接外网的服务器当作时间服务器，整个集群服务器向该时间服务器同步时间，然后咱们内网的这台时间服务器向公网时间服务器同步时间，然后内网时间服务器不能联网，则自己设置时间，所有的集群服务器以它的时间为准。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211009192159028-1293487193.png" alt="image"></p>
<h2 id="配置-NTP-服务器"><a href="#配置-NTP-服务器" class="headerlink" title="配置 NTP 服务器"></a>配置 NTP 服务器</h2><blockquote>
<p>使用 master 作为 NTP 服务器</p>
</blockquote>
<ol>
<li>修改 NTP 配置文件 <code>vim /etc/ntp.conf</code></li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># For more information about this file, see the man pages</span><br><span class="line"># ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class="line"></span><br><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line"></span><br><span class="line"># Permit time synchronization with our time source, but do not</span><br><span class="line"># permit the source to query or modify the service on this system.</span><br><span class="line">restrict default nomodify notrap nopeer noquery</span><br><span class="line"></span><br><span class="line"># Permit all access over the loopback interface.  This could</span><br><span class="line"># be tightened as well, but to do so would effect some of</span><br><span class="line"># the administrative functions.</span><br><span class="line">restrict 127.0.0.1 </span><br><span class="line">restrict ::1</span><br><span class="line"></span><br><span class="line"># Hosts on local network are less restricted.</span><br><span class="line">#restrict 192.168.139.2 mask 255.255.255.0 nomodify notrap</span><br><span class="line"></span><br><span class="line"># Use public servers from the pool.ntp.org project.</span><br><span class="line"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span><br><span class="line">#server 0.centos.pool.ntp.org iburst</span><br><span class="line">#server 1.centos.pool.ntp.org iburst</span><br><span class="line">#server 2.centos.pool.ntp.org iburst</span><br><span class="line">#server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line">server 0.cn.pool.ntp.org</span><br><span class="line">server 1.cn.pool.ntp.org</span><br><span class="line">server 2.cn.pool.ntp.org</span><br><span class="line">server 3.cn.pool.ntp.org</span><br><span class="line"></span><br><span class="line">restrict 0.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line">restrict 1.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line">restrict 2.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line">restrict 3.cn.pool.ntp.org nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server 127.0.0.1 # local clock</span><br><span class="line">Fudge 127.0.0.1 stratum 10</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>重启 NTP 服务器 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"># 检查是否启动成功</span><br><span class="line">systemctl status ntpd</span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置-NTP-客户端"><a href="#配置-NTP-客户端" class="headerlink" title="配置 NTP 客户端"></a>配置 NTP 客户端</h2><ol>
<li>安装 NTP</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>修改 <code>/etc/ntp.conf</code> 配置文件<br>注释以下内容 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># server 0.centos.pool.ntp.org iburst</span><br><span class="line"># server 1.centos.pool.ntp.org iburst</span><br><span class="line"># server 2.centos.pool.ntp.org iburst</span><br><span class="line"># server 3.centos.pool.ntp.org iburst</span><br></pre></td></tr></tbody></table></figure>
新增以下内容 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">server 192.168.139.121</span><br><span class="line">restrict 192.168.139.121 nomodify notrap noquery</span><br><span class="line"></span><br><span class="line">server 127.127.1.0 # local clock</span><br><span class="line">Fudge 127.127.1.0 stratum 10</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<p>修改后重启 ntpd 服务 </p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart ntpd</span><br><span class="line">systemctl enable ntpd</span><br><span class="line"># 检查是否启动成功</span><br><span class="line">systemctl status ntpd</span><br></pre></td></tr></tbody></table></figure>

<p>使用 <code>ntpq -p</code> 查看网络中的 NTP 服务器，同时显示客户端和每个服务器的关系</p>
<p>使用 ntpstat 命令查看时间同步状态，这个一般需要 5-10 分钟后才能成功连接和同步。所以，服务器启动后需要稍等下：<br>刚启动的时候，执行 <code>ntpstat</code> 一般会提示以下信息：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">unsynchronised</span><br><span class="line">time server re-starting</span><br><span class="line">polling server every 64 s</span><br></pre></td></tr></tbody></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol>
<li>防火墙是否关闭</li>
<li> 123 端口是否开发 (如果防火墙已关闭请忽略)</li>
<li> 关闭 Selinux</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian12 安装 zsh 及 配置 Oh my zsh</title>
    <url>/posts/2752050206.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p><strong>Debian 最小化安装环境</strong></p>
<h1 id="安装ZSH"><a href="#安装ZSH" class="headerlink" title="安装ZSH"></a>安装 ZSH</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apt install zsh -y</span><br></pre></td></tr></tbody></table></figure>

<h1 id="更改默认终端"><a href="#更改默认终端" class="headerlink" title="更改默认终端"></a>更改默认终端</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br><span class="line">zsh</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>这时候打开终端软件，应该就会默认进入 zsh 了。</p>
<p>如果 shell 连接进入 bash 则需要重启一下系统</p>
</blockquote>
<h1 id="配置-oh-my-zsh"><a href="#配置-oh-my-zsh" class="headerlink" title="配置 oh-my-zsh"></a>配置 oh-my-zsh</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 官方 推荐！</span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 国内镜像源(每日更新一次)</span><br><span class="line">git clone https://gitee.com/mirrors/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"># 默认配置</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="zsh-syntax-highlighting-命令高亮插件"><a href="#zsh-syntax-highlighting-命令高亮插件" class="headerlink" title="zsh-syntax-highlighting 命令高亮插件"></a>zsh-syntax-highlighting 命令高亮插件</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apt install zsh-syntax-highlighting -y</span><br></pre></td></tr></tbody></table></figure>

<h2 id="zsh-autosuggestions-自动建议补全"><a href="#zsh-autosuggestions-自动建议补全" class="headerlink" title="zsh-autosuggestions 自动建议补全"></a>zsh-autosuggestions 自动建议补全</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apt install zsh-autosuggestions -y</span><br></pre></td></tr></tbody></table></figure>

<h2 id="安装-autojump-目录跳转"><a href="#安装-autojump-目录跳转" class="headerlink" title="安装 autojump 目录跳转"></a>安装 autojump 目录跳转</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apt install autojump -y</span><br></pre></td></tr></tbody></table></figure>

<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>同样是打开.zshrc 文件，找到 plugins=(git)，在这里增加自己想要的插件即可，多个插件名称之间使用空格或者换行分开（不能使用逗号）。<br><code>vim ~/.zshrc</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">        git</span><br><span class="line">        sudo</span><br><span class="line">        autojump</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></tbody></table></figure>

<p>每次修改完 .zshrc 都需要</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>

<h1 id="其他配置"><a href="#其他配置" class="headerlink" title="# 其他配置"></a># 其他配置</h1><p>.zshrc</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 防止通配符报错</span><br><span class="line">setopt no_nomatch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置别名</span><br><span class="line">alias la="ls -la"</span><br></pre></td></tr></tbody></table></figure>

<h2 id="source-etc-profile"><a href="#source-etc-profile" class="headerlink" title="source /etc/profile"></a>source /etc/profile</h2><p>如果将 <code>source /etc/profile</code> 放入 .zshrc 中，会覆盖 zsh 的样式。因此，需要对代码进行修改。(也就是删除中间一段代码)</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">root at feng in ~ </span><br><span class="line">$ cat /etc/profile                                    </span><br><span class="line"># /etc/profile: system-wide .profile file for the Bourne shell (sh(1))</span><br><span class="line"># and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).</span><br><span class="line"></span><br><span class="line">if [ "$(id -u)" -eq 0 ]; then</span><br><span class="line">  PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><br><span class="line">else</span><br><span class="line">  PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games"</span><br><span class="line">fi</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">if [ -d /etc/profile.d ]; then</span><br><span class="line">  for i in /etc/profile.d/*.sh; do</span><br><span class="line">    if [ -r $i ]; then</span><br><span class="line">      . $i</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">  unset i</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure>

<h1 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h1><p>默认 <code>robbyrussell</code></p>
<p>简约 <code>steeef</code></p>
<p><img src="https://minio.kl.do/picture/images/blog/6a401e38d1ad71581625915c3c09dc9b.png" alt="https://minio.kl.do/picture/images/blog/6a401e38d1ad71581625915c3c09dc9b.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 安装 JDK11</title>
    <url>/posts/2537014801.html</url>
    <content><![CDATA[<ol>
<li><p>切换到 root 用户并进入 <code>/usr</code> 目录</p>
</li>
<li><p>创建 java 文件夹</p>
</li>
<li><p>将 <code>jdk-11.0.12_linux-x64_bin.tar.gz</code> 复制到 java 目录中</p>
</li>
<li><p>解压 <code>tar -zxvf jdk-11.0.12_linux-x64_bin.tar.gz</code></p>
</li>
<li><p>配置环境变量，在 <code>/etc/profile</code> 文件末尾</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/java/jdk-11.0.12</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211003220111396-876264646.png" alt="image"></p>
</li>
<li><p>输入 <code>java -version</code> 测试是否安装成功</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/2354934-20211003215649878-786679310.png" alt="image"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 集群文件分发脚本与执行命令脚本</title>
    <url>/posts/2193637219.html</url>
    <content><![CDATA[<h1 id="Linux-集群分发脚本"><a href="#Linux-集群分发脚本" class="headerlink" title="Linux 集群分发脚本"></a>Linux 集群分发脚本</h1><blockquote>
<p>期望：脚本 + 要同步的文件名称<br>说明：/usr/local/bin 中存在脚本，root 用户可以在任意地方执行</p>
</blockquote>
<p>编写脚本</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/local/bin/rsync-script</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本说明：将指定的文件或目录同步到集群的所有或指定节点。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常量定义</span></span><br><span class="line">MASTER_NUM=3  # master 节点数量</span><br><span class="line">NODE_NUM=2   # node 节点数量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数：使用颜色输出文本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数1：颜色代码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数2：要输出的文本</span></span><br><span class="line">colorPrint() {</span><br><span class="line">  local colorCode="$1"</span><br><span class="line">  local text="$2"</span><br><span class="line">  echo -e "\e[1;${colorCode}m${text}\e[0m"</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">函数：同步文件或目录到指定的节点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数1：主机名前缀</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数2：主机数量</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数3：文件或目录的路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数4：用户名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数5：目标目录路径</span></span><br><span class="line">syncFiles() {</span><br><span class="line">  local hostPrefix="$1"</span><br><span class="line">  local hostCount="$2"</span><br><span class="line">  local filePath="$3"</span><br><span class="line">  local username="$4"</span><br><span class="line">  local targetDir="$5"</span><br><span class="line"></span><br><span class="line">  for ((i = 1; i &lt;= $hostCount; i++)); do</span><br><span class="line">    formattedIndex=$(printf "%02d" $i)</span><br><span class="line">    colorPrint "36" "Synchronizing to ${hostPrefix}${formattedIndex}, path: $filePath ..."</span><br><span class="line">    rsync -ravz "$filePath" "${username}@${hostPrefix}${formattedIndex}:${targetDir}"</span><br><span class="line">    colorPrint "32" "excute to rsync -Ravz $filePath ${username}@${hostPrefix}${formattedIndex}:${targetDir} finished.\n\n"</span><br><span class="line">  done</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否提供了脚本参数</span></span><br><span class="line">if (($# == 0)); then</span><br><span class="line">  colorPrint "31" "Error: No input provided!"</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">localPath="$1"</span><br><span class="line">dstHost="$2"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查路径是否为绝对路径，如果不是，则转换为绝对路径</span></span><br><span class="line">if [[ "$localPath" != /* ]]; then</span><br><span class="line">  dirName=$(dirname "$localPath")</span><br><span class="line">  cd -P "$dirName"</span><br><span class="line">  dirName=$(pwd)</span><br><span class="line">  path="$dirName/$localPath"</span><br><span class="line">else</span><br><span class="line">  dirName=$(dirname "$localPath")</span><br><span class="line">  path="$localPath"</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证文件或目录是否存在</span></span><br><span class="line">if [ ! -f "$path" ] &amp;&amp; [ ! -d "$path" ]; then</span><br><span class="line">  colorPrint "31" "Error: Invalid file or directory!"</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前用户名</span></span><br><span class="line">username=$(whoami)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果指定了特定的节点或节点组，则只同步到指定的节点或节点组</span></span><br><span class="line">if [ "$dstHost" ]; then</span><br><span class="line">  if [ "$dstHost" == "k8s-master" ]; then</span><br><span class="line">    syncFiles "k8s-master-" $MASTER_NUM "$path" "$username" "$path"</span><br><span class="line">  elif [ "$dstHost" == "k8s-node" ]; then</span><br><span class="line">    syncFiles "k8s-node-" $NODE_NUM "$path" "$username" "$path"</span><br><span class="line">  else</span><br><span class="line">    colorPrint "36" "Synchronizing to ${dstHost}, path: $path ..."</span><br><span class="line">    rsync -rvl "$path" "${username}@${dstHost}:${path}"</span><br><span class="line">    colorPrint "32" "Synchronization to ${dstHost} finished."</span><br><span class="line">  fi</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有指定特定的节点或节点组，则同步到所有节点</span></span><br><span class="line">syncFiles "k8s-master-" $MASTER_NUM "$path" "$username" "$path"</span><br><span class="line">syncFiles "k8s-node-" $NODE_NUM "$path" "$username" "$path"</span><br><span class="line"></span><br><span class="line">colorPrint "32" "Success: Synchronized to all hosts!"</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>设置执行权限 </li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">chmod 777 /usr/local/bin/rsync-script</span><br></pre></td></tr></tbody></table></figure>

<h2 id="命令示例"><a href="#命令示例" class="headerlink" title="命令示例"></a>命令示例</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">touch test</span><br><span class="line">rsync-script test # 分发全部主机</span><br><span class="line">rsync-script test k8s-master # 分发分组主机</span><br><span class="line">rsync-script test k8s-masrer-01 # 分发指定主机</span><br></pre></td></tr></tbody></table></figure>

<h1 id="Linux-集群执行命令脚本"><a href="#Linux-集群执行命令脚本" class="headerlink" title="Linux 集群执行命令脚本"></a>Linux 集群执行命令脚本</h1><blockquote>
<p>期望：脚本 + 要执行的命令<br>说明：/usr/local/bin 中存在脚本，root 用户可以在任意地方执行</p>
</blockquote>
<p>编写脚本</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">vim /usr/local/bin/ssh-script</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">说明：循环发送命令到集群所有节点并获取结果</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常量 默认节点数量</span></span><br><span class="line">MASTER_NUM=3</span><br><span class="line">NODE_NUM=2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">彩色 <span class="built_in">echo</span></span></span><br><span class="line">colorPrint() {</span><br><span class="line">  local colorCode=$1</span><br><span class="line">  local text=$2</span><br><span class="line">  echo -e "\\e[1;${colorCode}m${text}\\e[0m"</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取传入的参数，参数个数</span></span><br><span class="line">paramNum=$#</span><br><span class="line">if ((paramNum == 0)); then</span><br><span class="line">  colorPrint "31" "failed: No command provided!" </span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取要执行的命令</span></span><br><span class="line">commandToExecute=$1</span><br><span class="line">dstHost=$2 # 第二个参数 执行某个节点</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令</span></span><br><span class="line">executeCommand() {</span><br><span class="line">  local hostPrefix=$1    # 主机名称前缀</span><br><span class="line">  local hostNum=$2       # 有多少个主机 编号从01开始</span><br><span class="line">  local command=$3       # 要执行的命令</span><br><span class="line">  local username=$4      # 默认用户名为root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">循环执行命令</span></span><br><span class="line">  for ((i = 1; i &lt;= $hostNum; i++)); do</span><br><span class="line">    formattedIndex=$(printf "%02d" $i)  # 格式化 i</span><br><span class="line">    colorPrint "36" "---- executing command on ${hostPrefix}${formattedIndex}..."</span><br><span class="line">    ssh ${username}@${hostPrefix}${formattedIndex} "${command}"</span><br><span class="line">    colorPrint "32" "command executed on ${hostPrefix}${formattedIndex}\n\n" </span><br><span class="line">  done</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认用户名为root</span></span><br><span class="line">username="root"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果指定了节点或分组</span></span><br><span class="line">if [ $dstHost ]; then</span><br><span class="line">  if [ $dstHost = "k8s-master" ]; then</span><br><span class="line">    executeCommand "k8s-master-" $MASTER_NUM "$commandToExecute" $username</span><br><span class="line">    exit</span><br><span class="line">  elif [ $dstHost = "k8s-node" ]; then</span><br><span class="line">    executeCommand "k8s-node-" $NODE_NUM "$commandToExecute" $username </span><br><span class="line">    exit</span><br><span class="line">  else</span><br><span class="line">    colorPrint "36" "---- executing command on ${dstHost}..."</span><br><span class="line">    ssh ${username}@${dstHost} "${commandToExecute}"</span><br><span class="line">    colorPrint "32" "command executed on ${dstHost}" </span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行命令</span></span><br><span class="line">executeCommand "k8s-master-" $MASTER_NUM "$commandToExecute" $username</span><br><span class="line">executeCommand "k8s-node-" $NODE_NUM "$commandToExecute" $username </span><br><span class="line"></span><br><span class="line">colorPrint "32" "success: command executed on all hosts!"</span><br></pre></td></tr></tbody></table></figure>

<h2 id="命令示例-1"><a href="#命令示例-1" class="headerlink" title="命令示例"></a>命令示例</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">touch test</span><br><span class="line">rsync-script "ls -l" # 执行全部主机</span><br><span class="line">rsync-script "ls -l" k8s-master # 执行分组主机</span><br><span class="line">rsync-script "ls -l" k8s-masrer-01 # 执行指定主机</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux SSH 配置多台免密登录</title>
    <url>/posts/243424817.html</url>
    <content><![CDATA[<h1 id="SSH-安全级别"><a href="#SSH-安全级别" class="headerlink" title="SSH 安全级别"></a>SSH 安全级别</h1><p>SSH 提供两种级别的安全验证</p>
<h2 id="第一种级别（基于口令的安全验证）"><a href="#第一种级别（基于口令的安全验证）" class="headerlink" title="第一种级别（基于口令的安全验证）"></a>第一种级别（基于口令的安全验证）</h2><blockquote>
<p>只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的服务器。可能会有别的服务器在冒充真正的服务器，也就是受到 “中间人” 这种方式的攻击。</p>
</blockquote>
<h2 id="第二种级别（基于密匙的安全验证）"><a href="#第二种级别（基于密匙的安全验证）" class="headerlink" title="第二种级别（基于密匙的安全验证）"></a>第二种级别（基于密匙的安全验证）</h2><blockquote>
<p>需要依靠密匙，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到 SSH 服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。</p>
</blockquote>
<h1 id="ssh-基于秘钥实现免密登录"><a href="#ssh-基于秘钥实现免密登录" class="headerlink" title="ssh 基于秘钥实现免密登录"></a>ssh 基于秘钥实现免密登录</h1><h2 id="配置-hostname-与-IP-映射"><a href="#配置-hostname-与-IP-映射" class="headerlink" title="配置 hostname 与 IP 映射"></a>配置 hostname 与 IP 映射</h2><p>各每一台机器设置 hostname</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"># 主节点</span><br><span class="line">hostnamectl set-hostname master</span><br><span class="line"># 副节点</span><br><span class="line">hostnamectl set-hostname slave1</span><br><span class="line"># 副节点</span><br><span class="line">hostnamectl set-hostname slave2</span><br></pre></td></tr></tbody></table></figure>

<p>在三台机器中都添加上 hosts 映射 <code>vim /etc/hosts</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">192.168.139.121 master</span><br><span class="line">192.168.139.122 slave1</span><br><span class="line">192.168.139.123 slave2</span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置公钥与私钥"><a href="#配置公钥与私钥" class="headerlink" title="配置公钥与私钥"></a>配置公钥与私钥</h2><ol>
<li><p>在三台机器器执行行以下命令，生成公钥与私钥<br><code>ssh-keygen -t rsa</code> 在 master 和 slave1 和 slave2 上面都要执行，产生<strong>公钥和私钥</strong><br>PS: 如果提示输入，连续按三次 Enter 即可</p>
</li>
<li><p>将 slave1 和 slave2 的公钥拷贝到 master<br>在 slave1 和 slave2 再到 master 上执行 <code>ssh-copy-id master</code> 将公钥拷贝到 master 上面去</p>
</li>
</ol>
<p>执行完毕后在～/.ssh 目录下会产生一个 authorized_keys 文件<br>如果有三台机器的 id 则成功</p>
<ol start="3">
<li>再将 master 的公钥分发给 slave1 和 slave2</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">scp authorized_keys slave1:$PWD</span><br><span class="line">scp authorized_keys slave2:$PWD</span><br></pre></td></tr></tbody></table></figure>

<p>执行完毕后子节点在～/.ssh 目录下会有 authorized_keys 文件</p>
<h1 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h1><p>配置完成，尝试 SSH 免密登录！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA Goland 等 2024.x 高版本配合 ja-netfilter 永久破解激活方法详细图文教程</title>
    <url>/posts/1312502623.html</url>
    <content><![CDATA[<h1 id="ja-netfilter-2024-07"><a href="#ja-netfilter-2024-07" class="headerlink" title="ja-netfilter 2024.07"></a>ja-netfilter 2024.07</h1><p>我们通常会使用防火墙来阻断这些软件的恶意访问。但防火墙也不是万能的，比如：跨平台问题、https 下无法精准阻断某个 url 访问、部分防火墙不能阻断 dns 访问。<br>于是就有了我今天开源的这个项目：ja-netfilter！</p>
<h2 id="下载-ja-netfilter"><a href="#下载-ja-netfilter" class="headerlink" title="下载 ja-netfilter"></a>下载 ja-netfilter</h2><p>链接: <a href="https://pan.baidu.com/s/1KzUcaVboBSFu_s-SMDFp-g?pwd=nsmq">https://pan.baidu.com/s/1KzUcaVboBSFu_s-SMDFp-g?pwd=nsmq</a> 提取码: nsmq</p>
<p>解压至放到自己喜欢的位置</p>
<p><strong>Window 同样可用，操作步骤一致</strong><br>比如我的是: <code>D:\Software\jetbra</code></p>
<blockquote>
<p>需要一个过期的激活码<br>现在不能进入到软件界面，我们激活码也是失效的</p>
</blockquote>
<h2 id="加载-ja-natfilter-插件"><a href="#加载-ja-natfilter-插件" class="headerlink" title="加载 ja-natfilter 插件"></a>加载 ja-natfilter 插件</h2><ol>
<li>进入到 Idea 软件安装目录找到 <code>bin/idea64.vmoptions</code></li>
<li>编辑 <code>bin/idea64.vmoptions</code> 文件，在末尾增加下面三行代码<br><strong>D:\Software\jetbra 替换为你自己的插件路径 </strong></li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">-javaagent:D:\Software\jetbra\ja-netfilter.jar=jetbrains</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED</span><br><span class="line">--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>重新打开 idea 输入过期的激活码，就可以激活了。 <strong>尽量断网操作</strong><br><img src="https://minio.kl.do/picture/images/typora/2354934-20220102214643692-244555316.png" alt="image"><br><img src="https://minio.kl.do/picture/images/typora/2354934-20220102215526043-2071143580.png" alt="image"></li>
</ol>
<h1 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h1><h2 id="IDEA-2024-x"><a href="#IDEA-2024-x" class="headerlink" title="IDEA 2024.x"></a>IDEA 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FV8EM46DQYC5AW9-eyJsaWNlbnNlSWQiOiJGVjhFTTQ2RFFZQzVBVzkiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUlIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNJIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9XSwibWV0YWRhdGEiOiIwMjIwMjQwNzAyUFNBWDAwMDAwNVgiLCJoYXNoIjoiMTIzNDU2NzgvMC01NDE4MTY2MjkiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwidHJpYWwiOmZhbHNlLCJhaUFsbG93ZWQiOnRydWV9-cH8qBniG31nF8954hthJJuzF6Fk4RQ9T03IfNxsFkuxUcwaAGHKOcRudvBZIAbLwDDFw63q2QZsnpwthBb/6IqBYnJrjRC83a8wkYKGN8HqAyDtbqdLOxLjcaiAiSKzektfAXn6nGNfDeygcFr/WzMfI0on/43ByuwxmSrjwYc4M8SCR0nkDAi0XwXNnFp3vSp0gJQd+lJtkSHO2KR7gUyNDZOPVduljJGbdLJUK6UcUjrlAd6NrTNqpu5P7hcYRaNzjoJ0KeIx5k9KmMCdcfQBia/zSHUbwZiecFsyjxqtIU0C3TDaX1OM4siJVDpgrXi+ocY86hiiYE79ygJf2IA==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Goland-2024-x"><a href="#Goland-2024-x" class="headerlink" title="Goland 2024.x"></a>Goland 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">BPTY4JK1CO0P29R-eyJsaWNlbnNlSWQiOiJCUFRZNEpLMUNPMFAyOVIiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAyMjAyNDA3MDJQU0FYMDAwMDA1WCIsImhhc2giOiIxMjM0NTY3OC8wLTIxMzg4MjAwMjAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwidHJpYWwiOmZhbHNlLCJhaUFsbG93ZWQiOnRydWV9-OhYvoISC/Bq2JPS8zO7RMvG6+V3z3Cw2tIhUfU0rpcWF5H8LimtMCO4Vdw69OYo3VfeBJkoDm0Lu4fwPOllxlx5gbpwerW2pJCubD/TnfDlxK+gt9rUSihL2mCU4k66VB+8NOLdYSH7zukG8ghtbNoeE4BuAiFP6BLTSEipOy2SKKybEzQ1JArnqJyXa66SrxTegCkz8QSwqaBAtJHaBIJ+1MmnQ8y5wjBXXQJ/+9W8AyaxKM14dKvqYxxcf71PDfgzl12taubbpyL4DzGYUiu5cAdjfpqdx2ZEoalj+IW3M3FWB+2eTzHZ+wvgFMqPt1+GiaC2kZwFbeyD9bDF62Q==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>

<h2 id="PyCharm-2024-x"><a href="#PyCharm-2024-x" class="headerlink" title="PyCharm 2024.x"></a>PyCharm 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GAJWL09BT5RSXDR-eyJsaWNlbnNlSWQiOiJHQUpXTDA5QlQ1UlNYRFIiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQQyIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAyMjAyNDA3MDJQU0FYMDAwMDA1WCIsImhhc2giOiIxMjM0NTY3OC8wLTQ2MTc4NjQwOSIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJ0cmlhbCI6ZmFsc2UsImFpQWxsb3dlZCI6dHJ1ZX0=-UeOCCiS72PGvOIS9go0yIhDFVmPBvbKM56D9w0adVaGcYLtC7YxNr/5MQ/3+Mr05tQQAhMz12vBTb9sjJAXBo+HBzCv1o9IFZnJK2rf3pCXl83ulriBUQ6M0H6GUUy+Mc1fl0EGWquoNExZMujCkReWoeabxwwKPNCvHqHqkW1rU/+cwiVKjVfbIgQW9aChIwyYwexzSlM0TlHvQGfncEzI0+uYNxjRQUjemLlGJooYD0ycSMMTyTvM95QHi25DZjmQRkdzIhDA2l4uPp+C+XEAIdIST2rjEPolvJGcVu7P/DI77LDDqZwLtD8mFXh9lFqMEw9titvy4mYFlYp/xaw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>

<h2 id="PHPStorm-2024-x"><a href="#PHPStorm-2024-x" class="headerlink" title="PHPStorm 2024.x"></a>PHPStorm 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">H31FX7UKDS-eyJsaWNlbnNlSWQiOiJIMzFGWDdVS0RTIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwMTIxUFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDotMjAzNDcyODUzMSIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ==-hy3rwI8FFAcvim4JsfvqAcSWGSIwWc40UUhMVw1/9ma1F0pzQVqvj1nBA6tT8IKKnBcGgbs7FS43rIMHMVfLpwN6a1jii3SuzAAOnDO9p6UaBbjsgeG6c2mCk/Mlc07IhthBGlg2agF7bMf7PVB/m4zfuFnltmHSGeMx1h1mgHxGDlhCT+jEAFHZukT+MAucG8TzMP1C3alkv7ocx+fbqC/GIPhQP3QhWbf0GA0VBkoVKiL20kU/LAM/jZrvHCNMOrPF6pZOKKp5/qZAL6tU9VoOnEbKjtok5byzyD0XgnCy2gWhwAR3RWiYJmHFZvnzf+XJVS/vdr922blhGnpM4w==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>

<h2 id="WebStorm-2024-x"><a href="#WebStorm-2024-x" class="headerlink" title="WebStorm 2024.x"></a>WebStorm 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1Z9RTLFFQRXP923-eyJsaWNlbnNlSWQiOiIxWjlSVExGRlFSWFA5MjMiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJXUyIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6ZmFsc2V9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX1dLCJtZXRhZGF0YSI6IjAyMjAyNDA3MDJQU0FYMDAwMDA1WCIsImhhc2giOiIxMjM0NTY3OC8wNzY0Njg1NzM3IiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsInRyaWFsIjpmYWxzZSwiYWlBbGxvd2VkIjp0cnVlfQ==-bDIQ6Ihy8nWMd6+TEQxRYY2FDAO5yhA1knCEpdqRbstNWI78rmC/WTYm8PFmDK2QEEE7uawIblm6c2FAXLrLzkA7R+V3G+q/xZyYPGftNp4n7mW+VT35+t131R5UvTIoQNzf3dCJDFBD2fiJwDNgUzdwEKEjagjNLlSk5HQam3wZh8+x8aao2yEzgoBHgGrs+8Y8BHKecS9eZImboDJ+e8cT+JI92nNCx1IhPgVJDieNKlbYbCxJ9HgvHFUMSrkh0MPORn9IxmKLt6ssMU2kEMWR4HqcQjUgGRzt8cWJh0nihrqBlDFZwfKQj25oK07vAu22ysN4CkcNRyMcJBBP9A==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>

<h2 id="RubyMine-2024-x"><a href="#RubyMine-2024-x" class="headerlink" title="RubyMine 2024.x"></a>RubyMine 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">3PZMNOLHULXID52-eyJsaWNlbnNlSWQiOiIzUFpNTk9MSFVMWElENTIiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjAyNi0wOS0xNCIsInBhaWRVcFRvIjoiMjAyNi0wOS0xNCIsImV4dGVuZGVkIjpmYWxzZX1dLCJtZXRhZGF0YSI6IjAyMjAyNDA3MDJQU0FYMDAwMDA1WCIsImhhc2giOiIxMjM0NTY3OC8wODg1OTA3NTUiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwidHJpYWwiOmZhbHNlLCJhaUFsbG93ZWQiOnRydWV9-Gw4PbXUwvDcHyuCc3xGpt3BRpRRCxGCmOS4rQIJ/N0Aj0aHsf56ne8oMF593cz4KnDAgeacqGSi9+BrIXTEW52BOiogh5xukZSxHhd8FoKmuaBBYsM3ydaZPWhYL1rp65c0AZ5niIULRbb1hReiz1khjdkiGJqs9VHaR6/rF7HGmU1oagPhCw1u8+3nQM1oMiwl/2lxefZGAAk+/+7kRM/uZjg7TsF6a7UCvjYCAoCLxso58r45WWCIVU7Ofec2rFAIFjwflojDv3HjUdjw7ehSS529fJ4c7wqf6Z2o9o+G//po4eco5Sd5xw3dhocj6XX1Q7phz0VeL97UjwLQ8VQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>

<h2 id="DataGrip-2024-x"><a href="#DataGrip-2024-x" class="headerlink" title="DataGrip 2024.x"></a>DataGrip 2024.x</h2><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">54H0PAD972IO7OS-eyJsaWNlbnNlSWQiOiI1NEgwUEFEOTcySU83T1MiLCJsaWNlbnNlZU5hbWUiOiJtZW5vcmFoIHBhcmFwZXQiLCJsaWNlbnNlZVR5cGUiOiJQRVJTT05BTCIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBEQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjYtMDktMTQiLCJwYWlkVXBUbyI6IjIwMjYtMDktMTQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOmZhbHNlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDI2LTA5LTE0IiwicGFpZFVwVG8iOiIyMDI2LTA5LTE0IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMjIwMjQwNzAyUFNBWDAwMDAwNVgiLCJoYXNoIjoiMTIzNDU2NzgvMC00MTI3ODYxMTYiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwidHJpYWwiOmZhbHNlLCJhaUFsbG93ZWQiOnRydWV9-kOcI3r7/OB1foH2R44HwHoAZJfdfTo0y7c1AZF/I9SBxiyNErjzyyFslUgkOD7XqHzhBgy53J2edgvSVy0DhmNswVK8V5YSXO+SLQc0RrQkZy43fb1fbLK26+LHj8gUUkFZuUwlDaXIb3D6SWyWx6tXAFet0ot6O7+lwZ/vGrRDXVdpaL/LBuCVt1pz2a77orzxWKbtgLNmVLVRGi7sFpUgv5syvGDgWG0gClSZHiAyEDzvoGdAJ3e8Y4LDBInHxrGwZYx7uY50lRBewjLvitbfzFm9dVz5bM9+3g+jSlXzKF5aZ9x2TyeGiOy9snk0QpnyGkudLECvI5vM8drRIIw==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBABKaDfYJk51mtYwUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>IntelliJ</tag>
        <tag>热门</tag>
      </tags>
  </entry>
  <entry>
    <title>让我们使用 Override 给傲慢的 GitHub Copilot 撅到飞起。</title>
    <url>/posts/616570609.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>override 项目：<a href="https://github.com/linux-do/override">https://github.com/linux-do/override</a></p>
</blockquote>
<p>新玩具，将 Github Copilot 的代码生成和对话转到我们自己的服务。</p>
<p>实现灵活计费，用就花钱，不用就不花。还可团队共享。还可以 chat2api 接入使用对话。</p>
<p>字少事大。更多的，自己体会吧。</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><ol>
<li>理论上，Chat 部分可以使用 <code>chat2api</code> ，而 Codex 代码生成部分则不太适合使用 <code>chat2api</code> 。</li>
<li>代码生成部分做过延时生成和客户端 Cancel 处理，很有效节省你的 Token。</li>
<li>有什么问题，请在论坛 <a href="https://linux.do/">https://linux.do</a> 讨论</li>
</ol>
<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><p>本文使用的模型为：<strong>DeepSeek Coder</strong></p>
<p>之前没像大家推荐是因为 CloseAI 的 补全模型 <code>gpt-3.5-turbo-instruct</code> 实在是不好用，还没性价比。</p>
<p>近期 DeepSeek API 升级，支持续写、FIM、Function Calling、JSON Output</p>
<p>DeepSeek FIM 能支持 8K 以上输入，生成代码质量也不错。</p>
<h2 id="关于-DeepSeek-Coder"><a href="#关于-DeepSeek-Coder" class="headerlink" title="关于 DeepSeek Coder"></a>关于 DeepSeek Coder</h2><p>文档：<a href="https://platform.deepseek.com/api-docs/zh-cn/">快速开始 | DeepSeek API Docs</a></p>
<p>如何购买：</p>
<p><a href="https://platform.deepseek.com/">https://platform.deepseek.com/</a> 在这里创建账号（使用国外 IP 打开，可以邮箱注册，无需实名认证。否则只有手机号注册）<br>购买额度可以支付宝等方式，很方便。拿到 key 开搞。</p>
<p><img src="https://minio.kl.do/picture/images/blog/9d32da1c57b2344092c3cf7f5371e19c.png" alt="https://minio.kl.do/picture/images/blog/9d32da1c57b2344092c3cf7f5371e19c.png"></p>
<h1 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h1><ol>
<li><p>克隆项目</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linux-do/override.git</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>新建配置文件</p>
<p>路径可自定义，我的路径是 <code>/data/override/config.json</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /data/override/config.json</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line"> <span class="attr">"bind"</span><span class="punctuation">:</span> <span class="string">"0.0.0.0:8181"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"proxy_url"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"timeout"</span><span class="punctuation">:</span> <span class="number">600</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"codex_api_base"</span><span class="punctuation">:</span> <span class="string">"https://api.deepseek.com/beta/v1"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"codex_api_key"</span><span class="punctuation">:</span> <span class="string">"sk-8cxxxx"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"codex_api_organization"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"codex_api_project"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"codex_max_tokens"</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"code_instruct_model"</span><span class="punctuation">:</span> <span class="string">"deepseek-coder"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_api_base"</span><span class="punctuation">:</span> <span class="string">"https://api.kl.do/v1"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_api_key"</span><span class="punctuation">:</span> <span class="string">"sk-xxx"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_api_organization"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_api_project"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_max_tokens"</span><span class="punctuation">:</span> <span class="number">4096</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_model_default"</span><span class="punctuation">:</span> <span class="string">"gpt-4o"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_model_map"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"chat_locale"</span><span class="punctuation">:</span> <span class="string">"zh_CN"</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">"auth_token"</span><span class="punctuation">:</span> <span class="string">""</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>修改项目的 docker-compose.yaml<br>我这里修改了端口映射 <code>18181</code> 和配置文件映射</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">override-app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linux-do/override:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">override-app</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">        <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">        <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/override/config.json:/app/config.json</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">"18181:8181"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>部署项目</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line">docker compose ps</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/blog/e52d2610bba16888b760fb8dd1fb517c.png" alt="https://minio.kl.do/picture/images/blog/e52d2610bba16888b760fb8dd1fb517c.png"></p>
</li>
</ol>
<h1 id="Vscode-使用"><a href="#Vscode-使用" class="headerlink" title="Vscode 使用"></a>Vscode 使用</h1><ol>
<li><p>安装 Github Copilot</p>
<p><img src="https://minio.kl.do/picture/images/blog/5f54323b4896544a60af815b575135c8.png" alt="https://minio.kl.do/picture/images/blog/5f54323b4896544a60af815b575135c8.png"></p>
</li>
<li><p>编辑配置文件<br>使用快捷键 <code>ctrl+shift+p</code> 唤出指令输出栏</p>
<p><img src="https://minio.kl.do/picture/images/blog/d27ce75226b1e8243c21e19d065932a5.png" alt="https://minio.kl.do/picture/images/blog/d27ce75226b1e8243c21e19d065932a5.png"></p>
</li>
<li><p>编辑 Github Copilot 配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"github.copilot.advanced"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">		<span class="attr">"debug.overrideCAPIUrl"</span><span class="punctuation">:</span> <span class="string">"http://你的ip:18181/v1"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"debug.overrideProxyUrl"</span><span class="punctuation">:</span> <span class="string">"http://你的ip:18181"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"debug.chatOverrideProxyUrl"</span><span class="punctuation">:</span> <span class="string">"http://你的ip:18181/v1/chat/completions"</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">"authProvider"</span><span class="punctuation">:</span> <span class="string">"github-enterprise"</span></span><br><span class="line">	<span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">"github-enterprise.uri"</span><span class="punctuation">:</span> <span class="string">"https://cocopilot.org"</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>重启 vscode</p>
</li>
<li><p>使用 Github Copilot</p>
<p><strong>chat</strong></p>
<p><img src="https://minio.kl.do/picture/images/blog/018cc18cb09ea0432e1135e3c8f458a3.png" alt="https://minio.kl.do/picture/images/blog/018cc18cb09ea0432e1135e3c8f458a3.png"></p>
<p><strong>代码补全</strong></p>
<p>首次使用延迟可能会比较高，使用一会就好一些。</p>
<p><img src="https://minio.kl.do/picture/images/blog/48ffee806bb97c5b6d134d0043833b42.png" alt="https://minio.kl.do/picture/images/blog/48ffee806bb97c5b6d134d0043833b42.png"></p>
</li>
<li><p><code>codex_max_tokens</code> 脚本 Patch</p>
<p><code>codex_max_tokens</code> 工作并不完美，已经移除。<strong>JetBrains IDE 完美工作</strong>，<code>VSCode</code> 需要执行以下脚本 Patch 之：</p>
<ul>
<li>macOS<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sed -i '' -E 's/\.maxPromptCompletionTokens\(([a-zA-Z0-9_]+),([0-9]+)\)/.maxPromptCompletionTokens(\1,2048)/' ~/.vscode/extensions/github.copilot-*/dist/extension.js</span><br></pre></td></tr></tbody></table></figure></li>
<li>Linux <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sed -E 's/\.maxPromptCompletionTokens\(([a-zA-Z0-9_]+),([0-9]+)\)/.maxPromptCompletionTokens(\1,2048)/' ~/.vscode/extensions/github.copilot-*/dist/extension.js</span><br></pre></td></tr></tbody></table></figure></li>
<li>Windows 可以用如下的 python 脚本进行替换</li>
<li>因为是 Patch，所以：<strong>Copilot 每次升级都要执行一次</strong>。</li>
<li>具体原因是客户端需要根据 <code>max_tokens</code> 精密计算 prompt，后台删减会有问题。</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># github copilot extention replace script</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_paths = glob.glob(os.getenv(<span class="string">"USERPROFILE"</span>) + <span class="string">r'\.vscode\extensions\github.copilot-*\dist\extension.js'</span>)</span><br><span class="line"><span class="keyword">if</span> file_paths == <span class="built_in">list</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"no copilot extension found"</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r'\.maxPromptCompletionTokens\(([a-zA-Z0-9_]+),([0-9]+)\)'</span>)</span><br><span class="line">replacement = <span class="string">r'.maxPromptCompletionTokens(\1,2048)'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file_path <span class="keyword">in</span> file_paths:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">'r'</span>, encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> file:</span><br><span class="line">        content = file.read()</span><br><span class="line">  </span><br><span class="line">    new_content = pattern.sub(replacement, content)</span><br><span class="line">    <span class="keyword">if</span> new_content == content:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"no match found in "</span> + file_path)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"replaced "</span> + file_path)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(new_content)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"replace finish"</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="JetBrains等使用"><a href="#JetBrains等使用" class="headerlink" title="JetBrains等使用"></a>JetBrains 等使用</h1><blockquote>
<p>注意：Github Copilot 插件的最高版本为 <strong>1.5.8.5775</strong><br>如果已升级的佬友，在这里回滚至 1.5.8.5775<br>历史版本下载地址: <a href="https://plugins.jetbrains.com/plugin/17718-github-copilot/versions/stable">https://plugins.jetbrains.com/plugin/17718-github-copilot/versions/stable</a></p>
</blockquote>
<h2 id="ja-netfilter-搭配-plugin-env-jar-设置环境变量（推荐）"><a href="#ja-netfilter-搭配-plugin-env-jar-设置环境变量（推荐）" class="headerlink" title="ja-netfilter 搭配 plugin-env.jar 设置环境变量（推荐）"></a>ja-netfilter 搭配 plugin-env.jar 设置环境变量（推荐）</h2><blockquote>
<p>项目地址: <a href="https://gitee.com/ja-netfilter/plugin-env">https://gitee.com/ja-netfilter/plugin-env</a></p>
</blockquote>
<p>由于 JetBrains 系列 IDE 需要设置环境变量，而使用脚本设置根据平台不同还有所区别。总之非常麻烦还可能没生效。<br>所以就有了这个 <code>ja-netfilter</code> 插件：<code>plugin-env</code><br>这下使用 <code>ja-netfilter</code> 的佬友再也不用为环境变量发愁了。具体使用可以查看插件的 README.md，理论上能做更多的事情。</p>
<p>先从<a href="https://gitee.com/ja-netfilter/plugin-env/releases">这里下载发行版</a>，丢进你的 <code>plugins-jetbrains</code> 文件夹。<br>然后在你的 <code>config-jetbrains</code> 目录新建 <code>env.conf</code> 文件。</p>
<p>以下是一个替代 <code>CoCopilot</code> 脚本的 <code>env.conf</code> 配置：</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[ENV]</span></span><br><span class="line">PREFIX,<span class="attr">AGENT_DEBUG_OVERRIDE_CAPI_URL</span>=http://你的ip:<span class="number">18181</span>/v1</span><br><span class="line">PREFIX,<span class="attr">AGENT_DEBUG_OVERRIDE_PROXY_URL</span>=http://你的ip:<span class="number">18181</span></span><br><span class="line">PREFIX,<span class="attr">GITHUB_COPILOT_OVERRIDE_CAPI_URL</span>=http://你的ip:<span class="number">18181</span>/v1</span><br><span class="line">PREFIX,<span class="attr">GITHUB_COPILOT_OVERRIDE_PROXY_URL</span>=http://你的ip:<span class="number">18181</span></span><br></pre></td></tr></tbody></table></figure>

<p><strong>重启 IDE 即可</strong></p>
<h2 id="配置环境变量（不支持高版本，不推荐）"><a href="#配置环境变量（不支持高版本，不推荐）" class="headerlink" title="配置环境变量（不支持高版本，不推荐）"></a>配置环境变量（不支持高版本，不推荐）</h2><p>将 <code>override\scripts</code> 所有脚本中的 127.0.0.1:8181 替换为你的 <code>ip:端口</code></p>
<p>按照 <a href="https://cocopilot.org/dash">Cocopilot Dashboard (cocopilot.org)</a> 页面截图配置后，执行对应系统的脚本后重启 IDE：</p>
<ul>
<li><code>scripts/install.sh</code> 适用于 <code>macOS</code> 和 <code>Linux</code></li>
<li><code>scripts/install-all-users.vbs</code> 适用于 <code>Windows</code>，为电脑上所有用户配置，需要有管理员权限。</li>
<li><code>scripts/install-current-user.vbs</code> 适用于 <code>Windows</code>，为当前用户配置，无需管理员权限。</li>
<li><code>scripts/uninstall</code> 相关脚本与之对应，为卸载配置。</li>
</ul>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>教程</tag>
        <tag>热门</tag>
        <tag>AI</tag>
        <tag>Copilot</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Koishi + Lagrange.OneBot 部署 QQ ChatGPT 机器人</title>
    <url>/posts/1569894275.html</url>
    <content><![CDATA[<h1 id="Koishi"><a href="#Koishi" class="headerlink" title="Koishi"></a>Koishi</h1><p>官网：<a href="https://koishi.chat/"></a><a href="/zh-CN/">Koishi</a></p>
<p><strong>Koishi</strong> 是一个跨平台、高性能的聊天机器人框架，灵感来自东方 Project 中的角色 <strong>古明地恋</strong>。</p>
<p><strong>Koishi</strong> 拥有庞大的插件生态，无论是日常娱乐还是实用功能，你都能在这里找到。</p>
<p><strong>特点</strong>:</p>
<ul>
<li><strong>开箱即用</strong>: 提供控制台，支持主流聊天平台（如 QQ、Telegram、Discord），用户可快速搭建聊天机器人。</li>
<li><strong>生态丰富</strong>: 拥有超过 1000 个插件，适合构建大型应用或轻量级辅助机器人。</li>
<li><strong>专为开发者打造</strong>: 提供 TypeScript 支持、单元测试和模块热重载等功能，简化插件开发过程。</li>
</ul>
<h2 id="部署-Koishi"><a href="#部署-Koishi" class="headerlink" title="部署 Koishi"></a>部署 Koishi</h2><p><strong>Docker</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line">docker network create koishi</span><br><span class="line">docker run -d \</span><br><span class="line">  --name koishi \</span><br><span class="line">  -p 15140:5140 \</span><br><span class="line">  -v /data/koishi:/koishi \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  --restart always \</span><br><span class="line">  --network koishi \</span><br><span class="line">  --add-host host.docker.internal:host-gateway \</span><br><span class="line">  koishijs/koishi:latest</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Docker Compose</strong></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">koishi:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">koishijs/koishi:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">koishi</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"15140:5140"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/koishi:/koishi</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">koishi</span></span><br><span class="line">    <span class="attr">extra_hosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">host.docker.internal:host-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">koishi:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">koishi</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/blog/39d93142641cea5fd32cfd0ce75bdec9.png" alt="https://minio.kl.do/picture/images/blog/39d93142641cea5fd32cfd0ce75bdec9.png"></p>
<h2 id="登录-Koish-控制台"><a href="#登录-Koish-控制台" class="headerlink" title="登录 Koish 控制台"></a>登录 Koish 控制台</h2><p>地址：<code>你的IP:15140</code></p>
<p><img src="https://minio.kl.do/picture/images/blog/00c1e710313e7400d103158960009e83.png" alt="https://minio.kl.do/picture/images/blog/00c1e710313e7400d103158960009e83.png"></p>
<h2 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h2><p>先点击左侧边栏的 <code>依赖管理</code>，然后右上角先点 <code>小火箭</code> 在点 <code>✔</code> 更新全部依赖</p>
<p><img src="https://minio.kl.do/picture/images/blog/fdb5c186af0c5599522ba2d07e55969f.png" alt="https://minio.kl.do/picture/images/blog/fdb5c186af0c5599522ba2d07e55969f.png"></p>
<h1 id="Lagrange-OneBot-消息平台"><a href="#Lagrange-OneBot-消息平台" class="headerlink" title="Lagrange.OneBot  消息平台"></a>Lagrange.OneBot  消息平台</h1><h2 id="Lagrange介绍"><a href="#Lagrange介绍" class="headerlink" title="Lagrange介绍"></a>Lagrange 介绍</h2><p>Lagrange 是一个 QQNT 协议逆向工程框架，比 Shamrock 或 Mirai 更加轻便，在目前也较为稳定。通过 OneBot 11 协议接入，需选择使用 <code>aiocqhttp</code> 作为适配器，填写配置时可参考 Shamrock 的方式。</p>
<p>可选平台（需要.NET 8 or 7 支持）：</p>
<ul>
<li>Mac OS 也可使用</li>
<li> Linux Ubuntu 22.04，Debian 12 应该都可以</li>
<li> Windows 10,11,Server2019 及以上</li>
</ul>
<blockquote>
<p>注意： 要使用 NT QQ 发信息，旧版 QQ 无法正常使用</p>
</blockquote>
<p>项目地址：<a href="https://github.com/LagrangeDev/Lagrange.Core">LagrangeDev/Lagrange.Core: An Implementation of NTQQ Protocol, with Pure C#, Derived from Konata.Core (github.com)</a></p>
<p>Docker 镜像地址：<a href="https://github.com/LagrangeDev/Lagrange.Core/pkgs/container/lagrange.onebot">Package lagrange.onebot docker images</a></p>
<p>使用版本：2024-07-30 版本</p>
<h2 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h2><p><strong>Docker</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name lagrange-onebot \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -v /data/lagrange-onebot:/app/data \</span><br><span class="line">  --restart always \</span><br><span class="line">  --network koishi \</span><br><span class="line">  ghcr.io/lagrangedev/lagrange.onebot:sha-69c7b62</span><br></pre></td></tr></tbody></table></figure>

<p><strong>Docker Compose</strong></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lagrange-onebot:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/lagrangedev/lagrange.onebot:sha-69c7b62</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lagrange-onebot</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/lagrange-onebot:/app/data</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">koishi</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">koishi:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">koishi</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></tbody></table></figure>

<h2 id="二进制文件启动"><a href="#二进制文件启动" class="headerlink" title="二进制文件启动"></a>二进制文件启动</h2><blockquote>
<p>Releases 地址：<a href="https://github.com/LagrangeDev/Lagrange.Core/releases">Releases · LagrangeDev/Lagrange.Core (github.com)</a></p>
<p>请根据系统环境下载对应的不要带 musl 的压缩包</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://github.com/LagrangeDev/Lagrange.Core/releases/download/nightly/Lagrange.OneBot_linux-x64_net8.0_SelfContained.tar.gz</span><br><span class="line">tar zvxf Lagrange.OneBot_linux-x64_net8.0_SelfContained.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line"><span class="built_in">cd</span> Lagrange.OneBot</span><br><span class="line"><span class="built_in">mv</span> ./bin/Release/net8.0/linux-x64/publish/Lagrange.OneBot ./</span><br><span class="line"><span class="built_in">rm</span> -r ./bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="built_in">chmod</span> +x Lagrange.OneBot</span><br><span class="line">./Lagrange.OneBot</span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>首次运行时，程序会在同级目录下自动生成默认的 <code>appsettings.json</code> 配置文件。请正确修改该文件以设置 Lagrange。</p>
<p>完成配置文件修改后（建议使用扫码登录），在命令行中按任意键启动 Lagrange。随后，同一文件夹下会生成一张名为 <code>qr-0.png</code> 的登录二维码图片。请在二维码过期前，尽快使用手机 QQ 扫码连接。</p>
<p>需要配置 Lagrange 以让其连接上 Koishi，请编辑 Lagrange 的配置文件 appsettings.json，确保 Implementations 中的连接配置符合下图内容：</p>
<ul>
<li>端口可自定义</li>
<li> AccessToken 验证密钥</li>
<li> Host 如果是二进制部署且 Lagrange 和 Koishi 都在同一台服务器上则看填 <code>127.0.0.1</code></li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"Type"</span><span class="punctuation">:</span> <span class="string">"ForwardWebSocket"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"Host"</span><span class="punctuation">:</span> <span class="string">"0.0.0.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"Port"</span><span class="punctuation">:</span> <span class="number">15141</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"HeartBeatInterval"</span><span class="punctuation">:</span> <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"Suffix"</span><span class="punctuation">:</span> <span class="string">"/ws"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"HeartBeatEnable"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"AccessToken"</span><span class="punctuation">:</span> <span class="string">"626s6uesGwCbQraXRsan"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<p>修改后文件：</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"Logging"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"LogLevel"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"Default"</span><span class="punctuation">:</span> <span class="string">"Information"</span><span class="punctuation">,</span>  <span class="comment">// 提 Issue 时请切换到 Trace</span></span><br><span class="line">      <span class="attr">"Microsoft"</span><span class="punctuation">:</span> <span class="string">"Warning"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span><span class="punctuation">:</span> <span class="string">"Information"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"SignServerUrl"</span><span class="punctuation">:</span> <span class="string">"https://sign.lagrangecore.org/api/sign"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"Account"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"Uin"</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span>  <span class="comment">// Uin 填写 0 以使用扫码连接</span></span><br><span class="line">    <span class="attr">"Password"</span><span class="punctuation">:</span> <span class="string">""</span><span class="punctuation">,</span>  <span class="comment">// 不填写密码以使用扫码连接</span></span><br><span class="line">    <span class="attr">"Protocol"</span><span class="punctuation">:</span> <span class="string">"Linux"</span><span class="punctuation">,</span>  <span class="comment">// 使用 Linux 协议</span></span><br><span class="line">    <span class="attr">"AutoReconnect"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"GetOptimumServer"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"Message"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"IgnoreSelf"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 忽略 Bot 自身的消息</span></span><br><span class="line">    <span class="attr">"StringPost"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"QrCode"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ConsoleCompatibilityMode"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"Implementations"</span><span class="punctuation">:</span> <span class="punctuation">[</span>  <span class="comment">// 服务实现 支持多链接</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"Type"</span><span class="punctuation">:</span> <span class="string">"ForwardWebSocket"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"Host"</span><span class="punctuation">:</span> <span class="string">"0.0.0.0"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"Port"</span><span class="punctuation">:</span> <span class="number">15141</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"HeartBeatInterval"</span><span class="punctuation">:</span> <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"Suffix"</span><span class="punctuation">:</span> <span class="string">"/ws"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"HeartBeatEnable"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"AccessToken"</span><span class="punctuation">:</span> <span class="string">"626s6uesGwCbQraXRsan"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="QQ登录"><a href="#QQ登录" class="headerlink" title="QQ登录"></a>QQ 登录</h2><p>修改配置文件后需要重启  <code>Lagrange.OneBot</code></p>
<ul>
<li>二进制启动直接可能看到二维码或在本目录下 <code>qr-0.png</code> 的登录二维码图片</li>
<li>如果使用 docker 则 </li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker logs lagrange-onebot</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/blog/933ba4cc8b615ba3469c4a171a36c53a.png" alt="https://minio.kl.do/picture/images/blog/933ba4cc8b615ba3469c4a171a36c53a.png"></p>
<h1 id="配置QQ机器人"><a href="#配置QQ机器人" class="headerlink" title="配置QQ机器人"></a>配置 QQ 机器人</h1><h2 id="echo-插件"><a href="#echo-插件" class="headerlink" title="echo 插件"></a>echo 插件</h2><p>进入插件市场搜索 <code>echo</code> 插件，安装</p>
<p>左侧边栏进入沙盒，添加一个用户，发送 <code>帮助</code>，测试一下功能</p>
<p><img src="https://minio.kl.do/picture/images/blog/e3b74d2d1788e203d761cc11696588b6.png" alt="https://minio.kl.do/picture/images/blog/e3b74d2d1788e203d761cc11696588b6.png"></p>
<h2 id="adapter-onebot-插件"><a href="#adapter-onebot-插件" class="headerlink" title="adapter-onebot 插件"></a>adapter-onebot 插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>回到 koishi 的插件商店，搜索安装 adapter-onebot 插件<br>安装完成会自动进入插件管理页面，右键 adapter 分组，选择添加插件，找到刚刚安装的 adapter-onebot 插件，添加。</p>
<p><img src="https://minio.kl.do/picture/images/blog/80632f5f1e06ff46547f89b9716d74eb.png" alt="https://minio.kl.do/picture/images/blog/80632f5f1e06ff46547f89b9716d74eb.png"></p>
<p><img src="https://minio.kl.do/picture/images/blog/d2a93ebf5d561addc2cfc77eb3faa725.png" alt="https://minio.kl.do/picture/images/blog/d2a93ebf5d561addc2cfc77eb3faa725.png"></p>
<p><img src="https://minio.kl.do/picture/images/blog/a32da96f40239daa3bad6572653adb81.png" alt="https://minio.kl.do/picture/images/blog/a32da96f40239daa3bad6572653adb81.png"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>使用 Docker 部署 则 ws://lagrange-onebot:15141/ws</li>
<li> 本地部署则填写你的 ip: 端口 /ws</li>
</ul>
<p><img src="https://minio.kl.do/picture/images/blog/e7dbd6e78286cfea99389e78bb5edaa9.png" alt="https://minio.kl.do/picture/images/blog/e7dbd6e78286cfea99389e78bb5edaa9.png"></p>
<p><strong>日志信息中出现以下内容及服务连接成功</strong></p>
<p><img src="https://minio.kl.do/picture/images/blog/123978934547e411bc3a50aecfe632a1.png" alt="https://minio.kl.do/picture/images/blog/123978934547e411bc3a50aecfe632a1.png"></p>
<h2 id="chatluna-多平台模型"><a href="#chatluna-多平台模型" class="headerlink" title="chatluna 多平台模型"></a>chatluna 多平台模型</h2><p><strong>安装后，在插件管理中添加 chatluna 插件</strong></p>
<p><img src="https://minio.kl.do/picture/images/blog/3929c2a2390b075deb1b1c85ea299640.png" alt="https://minio.kl.do/picture/images/blog/3929c2a2390b075deb1b1c85ea299640.png"></p>
<p><strong>cache 安装一项即可</strong>，后按你的需求添加对应的插件</p>
<p><img src="https://minio.kl.do/picture/images/blog/daf5248ccc02048226d6d265fabf6ee1.png" alt="https://minio.kl.do/picture/images/blog/daf5248ccc02048226d6d265fabf6ee1.png"></p>
<p>安装 <strong>openai-like-adapter</strong> 插件</p>
<p>按要求填写你的 API 信息。 我的 API 平台是  <a href="https://api.kl.do/">https://api.kl.do</a> 支 ChatGPT、Claude、Deespeek 等主流大模型，欢迎使用！</p>
<p><img src="https://minio.kl.do/picture/images/blog/14111425b33de8b13bfb0c5d541cc633.png" alt="https://minio.kl.do/picture/images/blog/14111425b33de8b13bfb0c5d541cc633.png"></p>
<p><img src="https://minio.kl.do/picture/images/blog/52aad8edc9aa2d6b9dcaefe7b9246e1a.png" alt="https://minio.kl.do/picture/images/blog/52aad8edc9aa2d6b9dcaefe7b9246e1a.png"></p>
<h1 id="Koishi-控制台设置登录授权"><a href="#Koishi-控制台设置登录授权" class="headerlink" title="Koishi 控制台设置登录授权"></a>Koishi 控制台设置登录授权</h1><p><img src="https://minio.kl.do/picture/images/blog/b5ad7bae6c9ef6c494697bbbfb137a53.png" alt="https://minio.kl.do/picture/images/blog/b5ad7bae6c9ef6c494697bbbfb137a53.png"></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>ChatGPT</tag>
        <tag>Bot</tag>
      </tags>
  </entry>
  <entry>
    <title>ACME Shell 自动申请 SSL 证书</title>
    <url>/posts/167770507.html</url>
    <content><![CDATA[<h1 id="ACME-Shell"><a href="#ACME-Shell" class="headerlink" title="ACME Shell"></a>ACME Shell</h1><blockquote>
<p>自动颁发和更新免费证书的 shell 脚本。每 60 天自动更新证书</p>
<p>Github:<a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></p>
</blockquote>
<p>安装 socat</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">yum install socat -y</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>安装 acme.sh</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh -s email=likfees@gmail.com</span><br></pre></td></tr></tbody></table></figure>

<h1 id="普通申请-SSL-证书"><a href="#普通申请-SSL-证书" class="headerlink" title="普通申请 SSL 证书"></a>普通申请 SSL 证书</h1><blockquote>
<p>推荐使用自动 DNS API 集成申请证书 (支持通配符号)</p>
</blockquote>
<ol>
<li>申请证书</li>
</ol>
<ul>
<li> -d 是您要为其颁发证书的域名 </li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --issue -d bitwarden.kl.do -w /www/wwwroot/bitwarden.kl.do</span><br></pre></td></tr></tbody></table></figure>

<h1 id="自动-DNS-API-集成申请证书-推荐"><a href="#自动-DNS-API-集成申请证书-推荐" class="headerlink" title="自动 DNS API 集成申请证书(推荐)"></a>自动 DNS API 集成申请证书 (推荐)</h1><p>如果您的 DNS 提供商支持 API 访问，我们可以使用该 API 自动颁发证书。</p>
<p>您无需手动执行任何操作！</p>
<p><strong>目前 acme.sh 支持大多数 dns 提供者:</strong></p>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p>
<h2 id="DNSPod-cn"><a href="#DNSPod-cn" class="headerlink" title="DNSPod.cn"></a>DNSPod.cn</h2><ol>
<li><p>获取 DNSPod API 密钥和 ID。</p>
<p><a href="https://console.dnspod.cn/account/token/token">https://console.dnspod.cn/account/token/token</a></p>
<p><img src="https://minio.kl.do/picture/images/typora/image-20220809130340881.png" alt="image-20220809130340881"></p>
</li>
<li><p> 设置环境变量</p>
</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">export DP_Id="1234"</span><br><span class="line">export DP_Key="sADDsdasdgdsf"</span><br></pre></td></tr></tbody></table></figure>

<p><code>DP_Id</code>and 将 <code>DP_Key</code> 被保存 <code>~/.acme.sh/account.conf</code> 并在需要时被重用。</p>
<ol start="3">
<li>申请证书</li>
</ol>
<ul>
<li>单域证书 </li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp -d kl.do</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>通配符证书 </li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_dp -d kl.do -d '*.kl.do'</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220809130320412.png" alt="image-20220809130320412"></p>
<h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><blockquote>
<p><strong>请找到自己的 Nginx 证书路径</strong><br>acme.sh 每 60 天会自动更新一次<br>更新证书后，Apache/Nginx 服务将通过以下命令自动重新加载: <code>service nginx reload</code><br>所以请务必配置到安装的证书路径</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d example.com \</span><br><span class="line">--key-file       /path/to/keyfile/in/nginx/key.pem  \</span><br><span class="line">--fullchain-file /path/to/fullchain/nginx/cert.pem \</span><br><span class="line">--reloadcmd     "service nginx force-reload"</span><br></pre></td></tr></tbody></table></figure>

<h2 id="例-宝塔面板"><a href="#例-宝塔面板" class="headerlink" title="例:宝塔面板"></a>例：宝塔面板</h2><ul>
<li>/www/server/panel/vhost/cert/kl.do Nginx 站点 SSL 证书路径</li>
<li> /www/server/panel/vhost/ssl  宝塔 SSL 证书夹 - 用于可视化界面部署 </li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p /www/server/panel/vhost/ssl/kl.do</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装证书</span>  </span><br><span class="line">acme.sh --install-cert -d kl.do \</span><br><span class="line">--cert-file      /www/server/panel/vhost/cert/kl.do/cert.pem  \</span><br><span class="line">--key-file       /www/server/panel/vhost/cert/kl.do/privkey.pem  \</span><br><span class="line">--fullchain-file /www/server/panel/vhost/cert/kl.do/fullchain.pem \</span><br><span class="line">--reloadcmd     "service nginx reload"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">链接宝塔证书文件夹</span></span><br><span class="line">ln -s /www/server/panel/vhost/cert/kl.do/* /www/server/panel/vhost/ssl/kl.do</span><br></pre></td></tr></tbody></table></figure>

<h1 id="手动更新证书"><a href="#手动更新证书" class="headerlink" title="手动更新证书"></a>手动更新证书</h1><p>不，您不需要手动更新证书。所有证书将每 <strong>60</strong> 天自动更新一次。</p>
<p>但是，您也可以强制更新证书:</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh --renew -d example.com --force</span><br></pre></td></tr></tbody></table></figure>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>查看证书列表</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh list</span><br></pre></td></tr></tbody></table></figure>

<p>查看定时更新任务</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh cron</span><br></pre></td></tr></tbody></table></figure>

<p>撤销证书</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">acme.sh  --revoke  -d example.com</span><br></pre></td></tr></tbody></table></figure>

<h1 id="安装中间证书"><a href="#安装中间证书" class="headerlink" title="安装中间证书"></a>安装中间证书</h1><p>检测地址: <a href="https://www.myssl.cn/tools/check-server-cert.html">https://www.myssl.cn/tools/check-server-cert.html</a><br>获取中间证书: <a href="https://www.myssl.cn/tools/downloadchain.html">https://www.myssl.cn/tools/downloadchain.html</a></p>
<ol>
<li> 获取安装证书<br>将 <code>/www/server/panel/vhost/cert/kl.do/cert.pem</code> 内容复制到上面地址中获得中间证书</li>
<li>复制中间证书到 <code>/www/server/panel/vhost/cert/kl.do/fullchain.pem</code> 文件下</li>
<li>重启 nginx</li>
<li> 检测证书</li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+PicGo+jsDelivr+Typora 搭建免费图床</title>
    <url>/posts/4153064379.html</url>
    <content><![CDATA[<h1 id="Github-仓库"><a href="#Github-仓库" class="headerlink" title="Github 仓库"></a>Github 仓库</h1><ol>
<li><p>创建仓库<br> <img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112204447287.png" alt="image-20220112204447287"></p>
</li>
<li><p>创建密钥<br> 直接访问 <code>https://github.com/settings/tokens</code>， 点击 <code>Generate new token</code> 按照下图配置创建即可。</p>
</li>
</ol>
<p><strong>只需要勾选 repo</strong></p>
<p>  <img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112204633150.png" alt="image-20220112204633150"><br>3. 保存密钥<br><strong>创建成功后不要刷新页面，密钥只会出现一次请妥善保存！</strong><br><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112204547970.png" alt="image-20220112204547970"></p>
<h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><ul>
<li>windows&amp;Linux&amp;Mac<br><a href="https://github.com/Molunerfinn/picgo/releases">https://github.com/Molunerfinn/picgo/releases</a></li>
<li>ArchLinux<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">yay -S picgo-appimage</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="PicGO-Cli"><a href="#PicGO-Cli" class="headerlink" title="PicGO-Cli"></a>PicGO-Cli</h2><blockquote>
<p>  Linux 需要使用 Cli 工具，Windonws 则不需要</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install -g picgo</span><br></pre></td></tr></tbody></table></figure>
<ol>
<li>设置图床信息 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">picgo install minio</span><br><span class="line">picgo set uploader</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>设定仓库名：按照【用户名 / 图床仓库名】的格式填写</li>
<li>设定分支名：【 main 】 2021 年后 master 改为 main</li>
<li> 设定 Token：粘贴上述生成的【 Token 】</li>
<li>指定存储路径：如【 images/ 】，这样就会在仓库下创建一个名为 images 的文件夹，图片将会储存在此文件夹中</li>
<li>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照【 自定义域名 + 上传的图片名 】的方式生成访问链接，放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为 <a href="https://cdn.jsdelivr.net/gh/dalefengs/Picture">https://cdn.jsdelivr.net/gh/dalefengs/Picture</a></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112203726795.png" alt="image-20220112203726795"></p>
<ol start="2">
<li><p> 使用图床</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">picgo use uploader</span><br></pre></td></tr></tbody></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112203818797.png" alt="image-20220112203818797"></p>
</li>
<li><p>验证<br><strong>命令行</strong><br><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112203626864.png" alt="image-20220112203626864"></p>
</li>
</ol>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><blockquote>
<p>设置 -&gt; 图像 设置 PicGo 配置</p>
</blockquote>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">picgo upload</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112203557267.png" alt="image-20220112203557267"></p>
<p><img src="https://cdn.jsdelivr.net/gh/dalefengs/Picture/images/image-20220112203659848.png" alt="image-20220112203659848"></p>
]]></content>
      <categories>
        <category>Software</category>
      </categories>
      <tags>
        <tag>PicGO</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 代理 https ssh 速度起飞</title>
    <url>/posts/2503342765.html</url>
    <content><![CDATA[<p>很多时候我们在使用 github 的时候会出现下载很慢的情况。<br>如果你有代理，可以直接设置代理，来获取更快下载和上传资源的速度。</p>
<h1 id="HTTP-HTTPS-代理"><a href="#HTTP-HTTPS-代理" class="headerlink" title="HTTP &amp; HTTPS 代理"></a>HTTP &amp; HTTPS 代理</h1><p>端口号根据自己的代理端口进行修改，一般 ss 是 1080，Clash 是 7891</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git config --global http.proxy 'socks5://127.0.0.1:7891'</span><br><span class="line">git config --global https.proxy 'socks5://127.0.0.1:7891'</span><br></pre></td></tr></tbody></table></figure>

<p>也可以直接修改用户主目录下的 <code>.gitconfig</code> 文件</p>
<p>vim ~/.gitconfig</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">    proxy = socks5://127.0.0.1:7891</span><br><span class="line">[https]</span><br><span class="line">    proxy = socks5://127.0.0.1:7891</span><br></pre></td></tr></tbody></table></figure>

<h1 id="SSH-代理"><a href="#SSH-代理" class="headerlink" title="SSH 代理"></a>SSH 代理</h1><p>打开用户主目录下的 <code>.ssh/config</code> 文件，添加以下内容</p>
<p><code>vim ~/.ssh/config</code></p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line">   <span class="string">HostName</span> <span class="string">ssh.github.com</span></span><br><span class="line">   <span class="string">User</span> <span class="string">git</span></span><br><span class="line">   <span class="string">Port</span> <span class="number">443</span></span><br><span class="line">   <span class="comment"># socks5 代理（如 Clash） -x </span></span><br><span class="line">   <span class="comment"># -v 输出详情 可省略</span></span><br><span class="line">   <span class="string">ProxyCommand</span> <span class="string">nc</span> <span class="string">-v</span> <span class="string">-x</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:7891</span> <span class="string">%h</span> <span class="string">%p</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/images/typora/image-20220509125712706.png" alt="image-20220509125712706"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>ZooKeeper 和 Kafka 单节点部署并配置 SASL 认证</title>
    <url>/posts/592274152.html</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>ZooKeeper 和 Kafka 是常用的分布式系统组件，ZooKeeper 提供分布式协调服务，Kafka 则是一个高吞吐量的分布式消息队列系统。在生产环境中，为了保障数据安全，通常需要配置 SASL 认证机制。本文将详细介绍如何在单节点环境下部署 ZooKeeper 和 Kafka，并配置 SASL 认证，确保通信安全。</p>
<h1 id="SASL-认证"><a href="#SASL-认证" class="headerlink" title="SASL 认证"></a>SASL 认证</h1><p>简单认证和安全层 (Simple Authentication and Security Layer，SASL) 是一种用于在网络协议中提供认证和数据安全性的框架。它不定义具体的认证机制，而是提供了一个通用的框架，允许不同的认证机制 (如 Kerberos, GSSAPI, PLAIN 等) 插入到应用程序协议中，例如 LDAP, SMTP, IMAP 等。</p>
<p>SASL 的主要优点在于它的 灵活性和可扩展性 。通过将认证机制与应用程序协议分离，SASL 允许开发者根据需要选择和使用不同的认证机制，而无需修改应用程序协议本身。这使得应用程序能够支持多种认证方式，并更容易适应新的安全需求。</p>
<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p><strong>操作系统:</strong> Debian 12<br><strong>Java :</strong> JDK 17<br><strong>ZooKeeper:</strong> 3.8.4<br><strong>Kafka:</strong> 2.13-3.8.0</p>
<p><strong>软件安装目录:</strong> /root/software</p>
<h1 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h1><p>如果存在 JDK 就跳过这一步</p>
<ol>
<li><p>下载安装 jdk</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/software</span><br><span class="line">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz</span><br><span class="line">tar -zvxf jdk-17_linux-x64_bin.tar.gz</span><br><span class="line"><span class="built_in">mv</span> jdk-17.0.12 jdk17</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/software/jdk17</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>检查 JDK</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">java version <span class="string">"17.0.12"</span> 2024-07-16 LTS</span><br><span class="line">Java(TM) SE Runtime Environment (build 17.0.12+8-LTS-286)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 17.0.12+8-LTS-286, mixed mode, sharing)</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="Zookeeper-单机模式"><a href="#Zookeeper-单机模式" class="headerlink" title="Zookeeper 单机模式"></a>Zookeeper 单机模式</h1><h2 id="安装-Zookeeper"><a href="#安装-Zookeeper" class="headerlink" title="安装 Zookeeper"></a>安装 Zookeeper</h2><ol>
<li><p>下载安装 Zookeeper</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/zookeeper/zookeeper-3.8.4/apache-zookeeper-3.8.4-bin.tar.gz</span><br><span class="line">tar -zvxf apache-zookeeper-3.8.4-bin.tar.gz</span><br><span class="line"><span class="built_in">mv</span> zookeeper-3.8.4 zookeeper</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'3.8.4'</span> &gt; zookeeper/VERSION</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> ZOOKEEPER_HOME=/root/software/zookeeper</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ZOOKEEPER_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>修改配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper/config</span><br><span class="line"><span class="built_in">cp</span> zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></tbody></table></figure>

<p>修改以下信息，没有则添加</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dataDir=/root/software/zookeeper/zkData</span><br><span class="line">dataLogDir=/root/software/zookeeper/logs</span><br><span class="line">4lw.commands.whitelist=ruok,<span class="built_in">stat</span>,conf,isro</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>启动 zookeeper</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">zkServer.sh start</span><br></pre></td></tr></tbody></table></figure>

<p>查看运行状态</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">zkServer.sh status</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://minio.kl.do/picture/files/image-20240902105903227.png" alt="image-20240902105903227"></p>
</li>
<li><p>使用命令检测是否正常运行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ruok | nc 127.0.0.1 2181</span><br><span class="line">imok#</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="SASL-认证-1"><a href="#SASL-认证-1" class="headerlink" title="SASL 认证"></a>SASL 认证</h2><ol>
<li><p>修改配置文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zookeeper/config</span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></tbody></table></figure>

<p>末尾添加以下信息</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider</span><br><span class="line">jaasLoginRenew=3600000</span><br><span class="line">requireClientAuthScheme=sasl</span><br><span class="line">zookeeper.sasl.client=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>创建密码文件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Server {</span><br><span class="line">    org.apache.zookeeper.server.auth.DigestLoginModule required</span><br><span class="line">    username=<span class="string">"admin"</span></span><br><span class="line">   password=<span class="string">"zk-admin-password"</span></span><br><span class="line">   user_kafka=<span class="string">"zk-kafka-password"</span></span><br><span class="line">   user_ops=<span class="string">"zk-ops-password"</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Client {</span><br><span class="line">   org.apache.zookeeper.server.auth.DigestLoginModule required</span><br><span class="line">   username=<span class="string">"ops"</span></span><br><span class="line">   password=<span class="string">"zk-ops-password"</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>修改 zkEnv.sh<br>在 <code>export SERVER_JVMFLAGS</code> 末尾添加 <code>-Djava.security.auth.login.config=/root/software/zookeeper/conf/zk_server_jaas.conf</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim bin/zkEnv.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改以下内容</span></span><br><span class="line"><span class="built_in">export</span> SERVER_JVMFLAGS=<span class="string">"-Xmx<span class="variable">${ZK_SERVER_HEAP}</span>m <span class="variable">$SERVER_JVMFLAGS</span> -Djava.security.auth.login.config=/root/software/zookeeper/conf/zk_server_jaas.conf"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>重新启动 zzk</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">zkServer.sh restart</span><br><span class="line">zkServer.sh status</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>验证服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">zkCli.sh -server localhost:2181</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h1 id="Kafka-单机模式"><a href="#Kafka-单机模式" class="headerlink" title="Kafka 单机模式"></a>Kafka 单机模式</h1><h2 id="安装-Kafka"><a href="#安装-Kafka" class="headerlink" title="安装 Kafka"></a>安装 Kafka</h2><ol>
<li><p>下载安装 Kafka</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/kafka/3.8.0/kafka_2.13-3.8.0.tgz</span><br><span class="line">tar -zvxf kafka_2.13-3.8.0.tgz</span><br><span class="line"><span class="built_in">mv</span> kafka_2.13-3.8.0 kafka</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 2.13-3.8.0 &gt; kafka/VERSION</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>配置环境变量</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> KAFKA_HOME=/root/software/kafka</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$KAFKA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>zookeeper 配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志目录</span></span><br><span class="line">log.dirs=/root/software/kafka/kafka-logs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  zookeeper 连接配置</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>启动 kafka</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server.properties</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>查看进程</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ jps  </span><br><span class="line">3693896 Kafka</span><br><span class="line">1574625 QuorumPeerMain</span><br><span class="line">1576837 Jps</span><br></pre></td></tr></tbody></table></figure></li>
</ol>
<h2 id="SASL-认证-2"><a href="#SASL-认证-2" class="headerlink" title="SASL 认证"></a>SASL 认证</h2><ol>
<li>修改配置文件</li>
</ol>
<p><code>vim config/server.properties</code></p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">SASL_PLAINTEXT://:9092</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Listener name, hostname and port the broker will advertise to clients.</span></span><br><span class="line"><span class="comment"># If not set, it uses the value for "listeners".</span></span><br><span class="line"><span class="attr">advertised.listeners</span>=<span class="string">SASL_PLAINTEXT://localhost:9092</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details</span></span><br><span class="line"><span class="comment">#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL</span></span><br><span class="line"></span><br><span class="line"><span class="attr">security.inter.broker.protocol</span>=<span class="string">SASL_PLAINTEXT  </span></span><br><span class="line"><span class="attr">sasl.enabled.mechanisms</span>=<span class="string">PLAIN  </span></span><br><span class="line"><span class="attr">sasl.mechanism.inter.broker.protocol</span>=<span class="string">PLAIN  </span></span><br><span class="line"><span class="attr">authorizer.class.name</span>=<span class="string">kafka.security.authorizer.AclAuthorizer</span></span><br><span class="line"><span class="attr">allow.everyone.if.no.acl.found</span>=<span class="string">true</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li><p>服务端配置 server jaas 文件<br>Kafka 的用户认证基于 Java 的 JAAS 框架。因此，我们需要先添加 JAAS 服务端的配置文件。<br>在 <code>config/kafka_server_jaas.conf</code> 中添加以下配置信息</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$KAFKA_HOME</span>/config</span><br><span class="line">vim kafka_server_jaas.conf</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">KafkaServer {</span><br><span class="line">  org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">    username=<span class="string">"admin"</span></span><br><span class="line">    password=<span class="string">"your admin password"</span></span><br><span class="line">    user_admin=<span class="string">"your admin password"</span></span><br><span class="line">    user_producer=<span class="string">"your password"</span></span><br><span class="line">    user_consumer=<span class="string">"your password"</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Client {</span><br><span class="line">    org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">    username=<span class="string">"kafka"</span></span><br><span class="line">    password=<span class="string">"zk-kafka-passwrd"</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>容易引起疑惑的是 user_admin 和 user_producer 这两个属性。它们用于定义用户名和密码.<br>格式为：user_userName=password。这里定义了用户 admin 和用户 producer 的密码分别为”admin-secret” 和”producer-secret”。</p>
</li>
<li><p>客户端配置 client jaas 文件</p>
</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$KAFKA_HOME</span>/config</span><br><span class="line">vim kafka_client_jaas.conf</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">KafkaClient {</span><br><span class="line">	org.apache.kafka.common.security.plain.PlainLoginModule required</span><br><span class="line">	username=<span class="string">"producer"</span></span><br><span class="line">	password=<span class="string">"your password"</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>这里密码要与 server jaas 密码对应</p>
<ol start="4">
<li>将 JAAS 配置到 kafka 服务器节点的 JVM 启动参数中，复制 kafka 的启动脚本 kafka-server-start.sh，命名 kafka-server-start-saal.sh，如下操作 </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> zookeeper-server-start.sh kafka-server-start-sasl.sh</span><br><span class="line">vim kafka-server-start-sasl.sh</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$KAFKA_HEAP_OPTS</span>"</span> = <span class="string">"x"</span> ]; <span class="keyword">then</span></span><br><span class="line"> <span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx1G -Xms1G -Djava.security.auth.login.config=/root/software/kafka/kafka_server_jaas.conf"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="5">
<li><strong><code>kafka-console-consumer.sh</code> 和 <code>kafka-console-producer.sh</code> 与 4 同样的操作</strong></li>
<li>配置授权信息文件 </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vim config/jaas.properties</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">sasl.jaas.config</span>=<span class="string">org.apache.kafka.common.security.plain.PlainLoginModule required username="producer" password="your password";</span></span><br><span class="line"><span class="attr">security.protocol</span>=<span class="string">SASL_PLAINTEXT</span></span><br><span class="line"><span class="attr">sasl.mechanism</span>=<span class="string">PLAIN</span></span><br></pre></td></tr></tbody></table></figure>

<ol start="7">
<li>启动 Kafka</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-server-stop.sh</span><br><span class="line">kafka-server-start.sh -daemon <span class="variable">$KAFKA_HOME</span>/config/server.properties</span><br></pre></td></tr></tbody></table></figure>

<ol start="8">
<li>查看启动日志是否正常 </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f logs/server.log</span><br></pre></td></tr></tbody></table></figure>

<h2 id="kafka-命令使用（SASL）"><a href="#kafka-命令使用（SASL）" class="headerlink" title="kafka 命令使用（SASL）"></a>kafka 命令使用（SASL）</h2><p>除了 <code>kafka-console-consumer.sh</code> 和 <code>kafka-console-producer.sh</code> 都需要附带 <code>--command-config config/jaas.properties</code> 参数进行认证</p>
<ul>
<li><p>查看 topic list</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-topics.sh --list --bootstrap-server localhost:9092 --command-config config/jaas.properties</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>消费者</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --consumer-property security.protocol=SASL_PLAINTEXT --consumer-property sasl.mechanism=PLAIN --topic <span class="built_in">test</span> </span><br></pre></td></tr></tbody></table></figure></li>
<li><p>生产者</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --producer-property security.protocol=SASL_PLAINTEXT --producer-property sasl.mechanism=PLAIN --topic <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>查看 topic 详情</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-topics.sh --command-config config/jaas.properties --describe --bootstrap-server kl.do:9092 --topic <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>消费组列表</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server kl.do:9092 --list --command-config config/jaas.properties</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>消费组详情</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --command-config config/jaas.properties --group minio-group </span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="GO-使用-Kafka-Sasl认证"><a href="#GO-使用-Kafka-Sasl认证" class="headerlink" title="GO 使用 Kafka Sasl认证"></a>GO 使用 Kafka Sasl 认证</h1><p>安装 github.com/IBM/sarama</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">go get github.com/IBM/sarama</span><br></pre></td></tr></tbody></table></figure>

<p>代码示例：</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	brokers = []<span class="type">string</span>{<span class="string">"domain:9092"</span>}</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	minioEventTopic = <span class="string">"event"</span></span><br><span class="line">	minioEventGroup = <span class="string">"event-group"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetKafkaConsumerGroup</span><span class="params">()</span></span> sarama.ConsumerGroup {</span><br><span class="line">	<span class="comment">// 设置日志</span></span><br><span class="line">	sarama.Logger = log.New(os.Stdout, <span class="string">"[sarama] event "</span>, log.LstdFlags)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建消费者组配置</span></span><br><span class="line">	config := sarama.NewConfig()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置 SASL 认证</span></span><br><span class="line">	config.Net.SASL.Enable = <span class="literal">true</span></span><br><span class="line">	config.Net.SASL.Mechanism = sarama.SASLTypePlaintext</span><br><span class="line">	config.Net.SASL.User = <span class="string">"consumer"</span></span><br><span class="line">	config.Net.SASL.Password = <span class="string">"your password"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 设置消费者组</span></span><br><span class="line">	config.Version = sarama.V3_6_0_0</span><br><span class="line">	config.Consumer.Offsets.Initial = sarama.OffsetNewest</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建消费者组</span></span><br><span class="line">	consumerGroup, err := sarama.NewConsumerGroup(brokers, minioEventGroup, config)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> {</span><br><span class="line">		log.Fatalf(<span class="string">"Error creating consumer eventGroup: %v"</span>, err)</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> consumerGroup</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ConsumerGroupHandler <span class="keyword">struct</span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ConsumerGroupHandler)</span></span> Setup(_ sarama.ConsumerGroupSession) <span class="type">error</span>   { <span class="keyword">return</span> <span class="literal">nil</span> }</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ConsumerGroupHandler)</span></span> Cleanup(_ sarama.ConsumerGroupSession) <span class="type">error</span> { <span class="keyword">return</span> <span class="literal">nil</span> }</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h ConsumerGroupHandler)</span></span> ConsumeClaim(sess sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) <span class="type">error</span> {</span><br><span class="line">	<span class="keyword">for</span> msg := <span class="keyword">range</span> claim.Messages() {</span><br><span class="line">		log.Printf(<span class="string">"获取到消息 partition：%d, offset: %d, key:%s \n"</span>, msg.Partition, msg.Offset, <span class="type">string</span>(msg.Key))</span><br><span class="line">		sess.MarkMessage(msg, <span class="string">""</span>)</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
        <tag>Zookeeper</tag>
        <tag>Software</tag>
      </tags>
  </entry>
</search>
